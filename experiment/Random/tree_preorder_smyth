tree_preorder
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [0, 0, 0] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00930700000004 false false

Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [3,2,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [3, 2, 2] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0098559999999 false false

Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00876900000003 false false

Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [3, 0, 2] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00952099999995 false false

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,3,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [2, 3, 0] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.010176 false false

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [3, 2, 3] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.010689 false false

Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00935400000003 false false

Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [0, 3] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0102320000001 false false

Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [0,1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [0, 1, 3] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0100950000001 false false

Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_preorder = \tree -> [0, 2] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0100480000001 false false

Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.014203 false false

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [1,3,1];

=================================
NOSOL

Leaf () -> [];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, #3.2 y1, S (#3.2 y1)]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , Cons
            ( #3.2 y1
            , Cons
                ( S (#3.2 y1)
                , tree_preorder (#3.3 y1)
                )
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0156039999999 false false

Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];

=================================
NOSOL

Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,2,0];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      [#3.2 y1, #3.2 y1, #3.2 y1]

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , Cons
            ( #3.2 y1
            , Cons (#3.2 y1, tree_preorder (#3.1 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0164830000001 false false

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];

=================================
NOSOL

Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,3];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];

=================================
NOSOL

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,3,1];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Leaf (),0,Leaf ()) -> [0];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [2,0,1];

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),0,Leaf ()) -> [0];

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,3,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.175149 true true

Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,2,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.681736 true true

Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,0,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Node (Leaf (),1,Leaf ()) -> [1];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];

=================================
NOSOL

Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [0,1,2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [2,2,0];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];

=================================
NOSOL

Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.127142 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,1,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];

=================================
NOSOL

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,3,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];

=================================
NOSOL

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.1 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0147019999999 false false

Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Leaf ()) -> [1];

=================================
NOSOL

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [2,2,3];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [1,2,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons (#3.2 y1, tree_preorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0192480000001 false false

Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,1,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.895627 true true

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [0,2,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,0,3];
Node (Leaf (),1,Leaf ()) -> [1];

=================================
NOSOL

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];

=================================
NOSOL

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,3,0];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,2,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];

=================================
NOSOL

Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,1];

=================================
NOSOL

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,2,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [3,0,2];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
NOSOL

Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,3];

=================================
NOSOL

Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,0];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [1,0,3];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];

=================================
NOSOL

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,3,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.508077 true true

Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,1,1];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.559721 true true

Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [3,1,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.47042 true true

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.185361 true true

Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,3,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [1,2,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.443617 true true

Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,3,0];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [2,3,2];
Leaf () -> [];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.523536 true true

Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,0,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [2,0,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [0,1,1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.658113 true true

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [0,2,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [0,1,3];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,3,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.103056 true true

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,2,3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [0,3,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [2,2,3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [3,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.496936 true true

Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,1,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.210274 true true

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,2];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.640463 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,1,2];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [2,2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.29464 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [3,3,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,1,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.328289 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [3,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.449926 true true

Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,2,3];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,1,3];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.337582 true true

Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,0,3];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,2,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,1,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];

=================================
NOSOL

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [3,3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.357372 true true

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,2,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,0,2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),2,Leaf ()) -> [2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.588548 true true

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.286722 true true

Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [2,3,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.084796 true true

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,0,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,2,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.679367 true true

Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,0,1];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,0];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,2,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.341302 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [3,3,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [3,1,0];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,1,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,0,1];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,2,3];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,3,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.678247 true true

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [3,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.711316 true true

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [3,0,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,0,2];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [2,1,0];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,0,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];

=================================
NOSOL

Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [1,2,1];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [2,3,3];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.991926 true true

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Leaf () -> [];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,2,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.405904 true true

Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,1,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,0,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,1];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,1,2];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.353155 true true

Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [0,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.636014 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [0,3,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,0,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,0,0];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.952633 true true

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,1,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,1];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [0,0,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.444346 true true

Leaf () -> [];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,2];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [0,1,1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,0,2];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.406532 true true

Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,2,0];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,3,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.401105 true true

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.359157 true true

Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];

=================================
NOSOL

Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,3,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.866675 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [2,2,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [2,1,0];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.006853 true true

Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,1,2];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,0];

=================================
NOSOL

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,3,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,2,1];

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,2];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.508646 true true

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,3,0];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,2,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Leaf () -> [];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.944174 true true

Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [1,3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.824781 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,2,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [1,1,2];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,0];

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,1,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [0,3,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.956749 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [1,0,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [2,2,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,3,0];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,1];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,1,1];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.502831 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [2,1,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,1];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,3,0];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [1,0,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,3,2];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,3,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,1,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,1,2];
Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.248107 true true

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [1,3,0];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,2,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.960612 true true

Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [3,1,2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,0,2];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,1,0];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.494199 true true

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [3,2,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,0,2];
Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [2,2,3];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [0,3,3];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [1,3,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,3];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.541247 true true

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [3,3,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,1,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [3,2,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,3,3];

=================================
NOSOL

Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [2,2,3];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [2,2,1];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.99358 true true

Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,1,0];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,1,0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Leaf () -> [];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [1,1,3];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.481045 true true

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,2];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,3,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [0,3,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [2,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.658154 true true

Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,3,2];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [3,1,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,0,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,2,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.442656 true true

Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,0,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,2,1];

=================================
NOSOL

Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,3,3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [0,3,2];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,2];
Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [2,2,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.653032 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [2,2,0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,1,0];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,3,2];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [0,0,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,2,3];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [1,2,2];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,2];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.201978 true true

Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,1];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [2,1,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.241051 true true

Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [2,3,0];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,1,3];
Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.613788 true true

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,0,3];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,0,2];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.234232 true true

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,1,0];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,3,0];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.244908 true true

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,2];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,2,0];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,3,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.248445 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,3];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,2];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,1,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.339577 true true

Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,0,1];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,2,3];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,1,0];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,1];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,0,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [3,3,1];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [0,0,1];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [2,1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [2,1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [2,3,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.191573 true true

Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,0,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [2,3,0];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,1,0];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.311312 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,3,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,0,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [3,1,0];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.177091 true true

Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,2,1];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [1,3,1];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,0,3];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,1];
Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [0,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.200821 true true

Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,1,3];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.598936 true true

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,1,2];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,3,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,0,3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,1,0];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,3,0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,2,3];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.267606 true true

Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [0,0,3];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,0,2];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.173328 true true

Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,3,0];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [0,2,3];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [2,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,2];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.412433 true true

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,3,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,3,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,3,1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,2,1];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [0,0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,3,0];

=================================
NOSOL

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,1,2];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [3,1,1];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,0,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.414158 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [3,0,1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,3];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [3,1];
Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,2];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.545654 true true

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [3,3,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,2,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [2,2,1];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,3,0];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [1,0,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,3,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,0,2];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,2];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.46442 true true

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,3,2];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,1,3];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [0,3,3];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [3,3,1];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,2];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.615635 true true

Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [1,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [1,2];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,0,2];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.489101 true true

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,1,3];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,2,0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,2,1];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,3,0];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.43007 true true

Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,3,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [0,2];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,1,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [2,1,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,3,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [0,0,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,0,2];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [0,3,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.724405 true true

Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,0,0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,1];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [0,3,2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.66033 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,3,0];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [3,2];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [3,1,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,3];

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,3];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,0,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,1,0];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [2,2,1];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,2,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,3,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.6909 true true

Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [3,0,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [1,3,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,1,2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [3,3,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,3,0];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,0,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [1,3,0];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.542943 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [2,3,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [1,3,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,3,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,0,0];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.587589 true true

Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [2,3,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [1,2,2];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [0,3,3];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [1,2,2];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,3];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,1,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,3,0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,3,1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,0,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [1,2,3];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.655586 true true

Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [0,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,1];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [2,3,3];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,3];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [3,0];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];

=================================
NOSOL

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [0,3];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,1,1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,0,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,1,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [3,3,1];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [3,2,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,0,2];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,1];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,2,2];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,3];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [1,0];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,2,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [2,3,3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [1,3];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [0,0,1];

=================================
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_preorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_preorder = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_preorder (#3.1 y1)) (tree_preorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_preorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.656045 true true

