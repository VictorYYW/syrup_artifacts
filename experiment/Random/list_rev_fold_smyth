list_rev_fold
[1,3,2] -> [2,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.035887 true false

[2,0,2] -> [2,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.03494 false false

[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0283380000001 false false

[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> [] in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0268510000001 false false

[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030434 false false

[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0319019999999 true false

[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> [] in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0266340000001 false false

[0,3,2] -> [2,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0351450000001 true false

[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0282 false false

[3,1,0] -> [0,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.035449 true false

[3,2] -> [2,3];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0304140000001 true false

[3] -> [3];
[1,2,0] -> [0,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0291239999999 true false

[0,1,0] -> [0,1,0];
[1,2,1] -> [1,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0302079999999 false false

[] -> [];
[0,2,3] -> [3,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.028624 true false

[2,1,2] -> [2,1,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.028446 false false

[1] -> [1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0273540000001 false false

[] -> [];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0282910000001 true false

[3,0,3] -> [3,0,3];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0327199999999 true false

[2,1,1] -> [1,1,2];
[1,2] -> [2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0322880000001 true false

[2,1] -> [1,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0277410000001 true false

[] -> [];
[3] -> [3];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.028352 true false

[1] -> [1];
[2] -> [2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0279479999999 false false

[3,1,2] -> [2,1,3];
[2,1,3] -> [3,1,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030049 true false

[0] -> [0];
[] -> [];
[1,0,1] -> [1,0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0288049999999 false false

[] -> [];
[2] -> [2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.028245 false false

[0,1] -> [1,0];
[0] -> [0];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0286920000001 true false

[3,1,2] -> [2,1,3];
[] -> [];
[1,3,3] -> [3,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0314430000001 true false

[1] -> [1];
[2] -> [2];
[1,1] -> [1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0323960000001 false false

[0] -> [0];
[0,0] -> [0,0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.029399 false false

[] -> [];
[2] -> [2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0286120000001 false false

[2,1] -> [1,2];
[] -> [];
[3,2,1] -> [1,2,3];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0304530000001 true false

[] -> [];
[0,2] -> [2,0];
[1] -> [1];
[3,1,0] -> [0,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030084 true false

[] -> [];
[0,1,2] -> [2,1,0];
[0] -> [0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.031015 true false

[1] -> [1];
[0,2,2] -> [2,2,0];
[1,3] -> [3,1];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0303650000001 true false

[] -> [];
[0,0,3] -> [3,0,0];
[2] -> [2];
[0,0,0] -> [0,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030714 true false

[1,1,1] -> [1,1,1];
[] -> [];
[1] -> [1];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0299540000001 false false

[0,0,0] -> [0,0,0];
[] -> [];
[0] -> [0];
[0,0,1] -> [1,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0307009999999 true false

[3,3] -> [3,3];
[0] -> [0];
[2,0] -> [0,2];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.029665 true false

[0,3,0] -> [0,3,0];
[] -> [];
[1] -> [1];
[0,3,2] -> [2,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0325479999999 true false

[] -> [];
[0,3,1] -> [1,3,0];
[2,1] -> [1,2];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.031514 true false

[0,0] -> [0,0];
[2] -> [2];
[0,2] -> [2,0];
[] -> [];
[2,2,3] -> [3,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0330650000001 true false

[2,1,3] -> [3,1,2];
[2,1,2] -> [2,1,2];
[0] -> [0];
[1,1] -> [1,1];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0353600000001 true false

[1] -> [1];
[0,3,2] -> [2,3,0];
[] -> [];
[0,1,2] -> [2,1,0];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0332530000001 true false

[] -> [];
[3,3] -> [3,3];
[3,1,0] -> [0,1,3];
[2] -> [2];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0311280000001 true false

[1,1] -> [1,1];
[3] -> [3];
[] -> [];
[3,0] -> [0,3];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030129 true false

[2,0,1] -> [1,0,2];
[2] -> [2];
[3] -> [3];
[] -> [];
[3,2,2] -> [2,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.032481 true false

[] -> [];
[2] -> [2];
[1,2] -> [2,1];
[0,1] -> [1,0];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.031078 true false

[1] -> [1];
[] -> [];
[3,3,3] -> [3,3,3];
[0,3,0] -> [0,3,0];
[3,3] -> [3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0325339999999 false false

[] -> [];
[0] -> [0];
[0,2] -> [2,0];
[3] -> [3];
[3,1] -> [1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.030487 true false

[1,2,1] -> [1,2,1];
[0] -> [0];
[2,1] -> [1,2];
[2,2] -> [2,2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0322779999999 true false

[2,3,3] -> [3,3,2];
[2] -> [2];
[3,0] -> [0,3];
[] -> [];
[1,2,2] -> [2,2,1];
[2,1,0] -> [0,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0337939999999 true false

[1] -> [1];
[0,1] -> [1,0];
[1,1] -> [1,1];
[2] -> [2];
[3,1,3] -> [3,1,3];
[3,1] -> [1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0395559999999 true false

[2] -> [2];
[0,2,2] -> [2,2,0];
[1,2,3] -> [3,2,1];
[3,0,2] -> [2,0,3];
[3,2,0] -> [0,2,3];
[1,3,3] -> [3,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.035347 true false

[] -> [];
[2] -> [2];
[0] -> [0];
[3] -> [3];
[3,2,3] -> [3,2,3];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.032103 true false

[3,1,0] -> [0,1,3];
[2] -> [2];
[] -> [];
[0] -> [0];
[1,1,3] -> [3,1,1];
[2,2] -> [2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.034656 true false

[] -> [];
[0,1] -> [1,0];
[1,1] -> [1,1];
[3,3] -> [3,3];
[2] -> [2];
[3,3,1] -> [1,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.034036 true false

[2] -> [2];
[2,3] -> [3,2];
[3,2] -> [2,3];
[] -> [];
[1,1,1] -> [1,1,1];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0340349999999 true false

[2,3] -> [3,2];
[] -> [];
[2,1,3] -> [3,1,2];
[2] -> [2];
[1,2] -> [2,1];
[2,1,0] -> [0,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0342929999999 true false

[0,3,0] -> [0,3,0];
[] -> [];
[2,3,3] -> [3,3,2];
[0,1] -> [1,0];
[2] -> [2];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.035075 true false

[1] -> [1];
[2] -> [2];
[2,2] -> [2,2];
[3,3,0] -> [0,3,3];
[] -> [];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0333000000001 true false

[3,0,0] -> [0,0,3];
[3,1,1] -> [1,1,3];
[0,2,0] -> [0,2,0];
[0,3,3] -> [3,3,0];
[1,1,0] -> [0,1,1];
[0] -> [0];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0380190000001 true false

[1,0,3] -> [3,0,1];
[3] -> [3];
[2,2,1] -> [1,2,2];
[3,1,0] -> [0,1,3];
[1,1,3] -> [3,1,1];
[0,0] -> [0,0];
[0,2,2] -> [2,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038959 true false

[1,3,0] -> [0,3,1];
[1,0] -> [0,1];
[] -> [];
[1,1,3] -> [3,1,1];
[1,1] -> [1,1];
[2,2,0] -> [0,2,2];
[2,0,1] -> [1,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.037863 true false

[3,1] -> [1,3];
[3] -> [3];
[] -> [];
[0] -> [0];
[2] -> [2];
[2,1,3] -> [3,1,2];
[3,0] -> [0,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0350759999999 true false

[3] -> [3];
[2] -> [2];
[2,2,0] -> [0,2,2];
[0,3,0] -> [0,3,0];
[1] -> [1];
[] -> [];
[0,3,1] -> [1,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0362170000001 true false

[] -> [];
[2,1] -> [1,2];
[1,0,1] -> [1,0,1];
[3,2,2] -> [2,2,3];
[1,2,1] -> [1,2,1];
[1,2] -> [2,1];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0369439999999 true false

[0,0,0] -> [0,0,0];
[0,3,1] -> [1,3,0];
[0,2,0] -> [0,2,0];
[2,2] -> [2,2];
[0,2] -> [2,0];
[1] -> [1];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0379720000001 true false

[2] -> [2];
[0,0] -> [0,0];
[2,2,0] -> [0,2,2];
[0,0,2] -> [2,0,0];
[3,3,0] -> [0,3,3];
[1] -> [1];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.037726 true false

[3] -> [3];
[2,2] -> [2,2];
[3,3,0] -> [0,3,3];
[0,0,2] -> [2,0,0];
[2] -> [2];
[0,1,2] -> [2,1,0];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.03739 true false

[0] -> [0];
[3,1] -> [1,3];
[2,2,1] -> [1,2,2];
[1,1,1] -> [1,1,1];
[1] -> [1];
[1,2] -> [2,1];
[3,2,2] -> [2,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.037251 true false

[0,3,0] -> [0,3,0];
[2,0,3] -> [3,0,2];
[] -> [];
[1,1] -> [1,1];
[1] -> [1];
[3,0] -> [0,3];
[3,3] -> [3,3];
[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.037077 true false

[1] -> [1];
[0,1,3] -> [3,1,0];
[3,2] -> [2,3];
[0,1] -> [1,0];
[2] -> [2];
[] -> [];
[0] -> [0];
[2,2,3] -> [3,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0364609999999 true false

[] -> [];
[3] -> [3];
[1,0,1] -> [1,0,1];
[2] -> [2];
[3,0,3] -> [3,0,3];
[0] -> [0];
[3,2,2] -> [2,2,3];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.036969 true false

[2,0] -> [0,2];
[] -> [];
[3,1] -> [1,3];
[0,2,3] -> [3,2,0];
[1,1] -> [1,1];
[0,3] -> [3,0];
[1,0] -> [0,1];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0364790000001 true false

[3,3,0] -> [0,3,3];
[] -> [];
[2] -> [2];
[3] -> [3];
[0] -> [0];
[0,0,0] -> [0,0,0];
[0,1] -> [1,0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.035523 true false

[1,3] -> [3,1];
[1,2] -> [2,1];
[3,3] -> [3,3];
[1,0] -> [0,1];
[2,2] -> [2,2];
[] -> [];
[0,3] -> [3,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0355030000001 true false

[1,3,0] -> [0,3,1];
[] -> [];
[3,2,2] -> [2,2,3];
[3,1,2] -> [2,1,3];
[0,3] -> [3,0];
[3,3] -> [3,3];
[1] -> [1];
[1,2] -> [2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0374059999999 true false

[2,2] -> [2,2];
[2,0,3] -> [3,0,2];
[0] -> [0];
[1] -> [1];
[0,0] -> [0,0];
[0,2,2] -> [2,2,0];
[] -> [];
[3,3,2] -> [2,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0372930000001 true false

[3,0] -> [0,3];
[3] -> [3];
[0,3] -> [3,0];
[0,3,1] -> [1,3,0];
[1,3,0] -> [0,3,1];
[0,1] -> [1,0];
[3,2] -> [2,3];
[1,0,3] -> [3,0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038685 true false

[1] -> [1];
[0,1] -> [1,0];
[] -> [];
[1,0,1] -> [1,0,1];
[2,0,3] -> [3,0,2];
[3,0,1] -> [1,0,3];
[0,2,0] -> [0,2,0];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0381540000001 true false

[] -> [];
[2] -> [2];
[1] -> [1];
[0] -> [0];
[2,1] -> [1,2];
[3,0] -> [0,3];
[1,1,2] -> [2,1,1];
[1,1] -> [1,1];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0363339999999 true false

[2,1,0] -> [0,1,2];
[2,3,1] -> [1,3,2];
[1,3] -> [3,1];
[2,0] -> [0,2];
[0,2] -> [2,0];
[0] -> [0];
[2,3,0] -> [0,3,2];
[2] -> [2];
[1,2,0] -> [0,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.040628 true false

[0,1] -> [1,0];
[] -> [];
[0,0] -> [0,0];
[0] -> [0];
[1,3] -> [3,1];
[1,2,1] -> [1,2,1];
[2,0] -> [0,2];
[2,2,1] -> [1,2,2];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038098 true false

[2,3] -> [3,2];
[] -> [];
[1] -> [1];
[1,2,3] -> [3,2,1];
[0,1,1] -> [1,1,0];
[3] -> [3];
[0] -> [0];
[0,2] -> [2,0];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0366899999999 true false

[3,2,0] -> [0,2,3];
[] -> [];
[1,0] -> [0,1];
[2,3,2] -> [2,3,2];
[0,1] -> [1,0];
[2,3] -> [3,2];
[0,3] -> [3,0];
[1,0,2] -> [2,0,1];
[2,2] -> [2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0390789999999 true false

[3,2,2] -> [2,2,3];
[2,1,3] -> [3,1,2];
[1,0] -> [0,1];
[0,1,1] -> [1,1,0];
[2] -> [2];
[] -> [];
[1,2,3] -> [3,2,1];
[1,1] -> [1,1];
[1,1,3] -> [3,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039976 true false

[] -> [];
[3,3,0] -> [0,3,3];
[1,3] -> [3,1];
[3,2] -> [2,3];
[0,1,0] -> [0,1,0];
[2,1,3] -> [3,1,2];
[3] -> [3];
[1,3,1] -> [1,3,1];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0391480000001 true false

[] -> [];
[0] -> [0];
[1] -> [1];
[3,0] -> [0,3];
[2,3,2] -> [2,3,2];
[0,1,2] -> [2,1,0];
[3,3,0] -> [0,3,3];
[0,0,3] -> [3,0,0];
[2,3] -> [3,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038918 true false

[2,3,2] -> [2,3,2];
[0] -> [0];
[1] -> [1];
[1,0] -> [0,1];
[] -> [];
[0,0,2] -> [2,0,0];
[1,0,3] -> [3,0,1];
[0,3,2] -> [2,3,0];
[2,0] -> [0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039346 true false

[0,3,3] -> [3,3,0];
[1] -> [1];
[3] -> [3];
[0] -> [0];
[] -> [];
[3,0,1] -> [1,0,3];
[2,2,2] -> [2,2,2];
[1,3,1] -> [1,3,1];
[3,1,3] -> [3,1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.03943 true false

[3,0] -> [0,3];
[] -> [];
[3] -> [3];
[1,2] -> [2,1];
[0,0] -> [0,0];
[2] -> [2];
[0,2,0] -> [0,2,0];
[1,0] -> [0,1];
[2,2,3] -> [3,2,2];
[0,0,2] -> [2,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039655 true false

[3,2] -> [2,3];
[1,1,2] -> [2,1,1];
[2] -> [2];
[1,0,2] -> [2,0,1];
[0,2] -> [2,0];
[] -> [];
[3] -> [3];
[2,3] -> [3,2];
[2,2,0] -> [0,2,2];
[3,2,1] -> [1,2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.040798 true false

[0] -> [0];
[] -> [];
[0,1,3] -> [3,1,0];
[2,3,0] -> [0,3,2];
[3] -> [3];
[2,1] -> [1,2];
[2] -> [2];
[2,0] -> [0,2];
[1,0] -> [0,1];
[0,1,0] -> [0,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.03925 true false

[3,0,3] -> [3,0,3];
[1,2,0] -> [0,2,1];
[1] -> [1];
[3,1,0] -> [0,1,3];
[0,1,1] -> [1,1,0];
[] -> [];
[2,2] -> [2,2];
[0,3,0] -> [0,3,0];
[0,0,0] -> [0,0,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.041798 true false

[3,1,1] -> [1,1,3];
[1] -> [1];
[3,3] -> [3,3];
[1,1] -> [1,1];
[3,1,2] -> [2,1,3];
[3,3,2] -> [2,3,3];
[1,3] -> [3,1];
[] -> [];
[0,3,2] -> [2,3,0];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0403020000001 true false

[1,0,0] -> [0,0,1];
[2,1] -> [1,2];
[1,0,3] -> [3,0,1];
[0,3,1] -> [1,3,0];
[0] -> [0];
[3,0,2] -> [2,0,3];
[1,1,2] -> [2,1,1];
[3,1,3] -> [3,1,3];
[3,2,2] -> [2,2,3];
[] -> [];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.040217 true false

[0,3,1] -> [1,3,0];
[2,1] -> [1,2];
[] -> [];
[3] -> [3];
[2,2,0] -> [0,2,2];
[1] -> [1];
[2,1,3] -> [3,1,2];
[0,3] -> [3,0];
[3,2,3] -> [3,2,3];
[0,0,2] -> [2,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0385060000001 true false

[] -> [];
[3,3] -> [3,3];
[3,2,2] -> [2,2,3];
[2,3,0] -> [0,3,2];
[0,2] -> [2,0];
[1,2,0] -> [0,2,1];
[2] -> [2];
[3,0] -> [0,3];
[2,0,2] -> [2,0,2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0393799999999 true false

[] -> [];
[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];
[0,3,2] -> [2,3,0];
[1,3] -> [3,1];
[1,1,1] -> [1,1,1];
[2,2] -> [2,2];
[1,2] -> [2,1];
[0,2,2] -> [2,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0371230000001 true false

[1,1] -> [1,1];
[2,1] -> [1,2];
[0,0] -> [0,0];
[] -> [];
[2,3] -> [3,2];
[0,0,3] -> [3,0,0];
[3,0] -> [0,3];
[1] -> [1];
[2,2] -> [2,2];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0368040000001 true false

[] -> [];
[3,2] -> [2,3];
[2,3,3] -> [3,3,2];
[2,1,2] -> [2,1,2];
[0] -> [0];
[3] -> [3];
[2,1] -> [1,2];
[1] -> [1];
[2,3,1] -> [1,3,2];
[1,0,1] -> [1,0,1];
[1,3,3] -> [3,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0397820000001 true false

[1,0,2] -> [2,0,1];
[3,0] -> [0,3];
[1,3] -> [3,1];
[3,3,3] -> [3,3,3];
[] -> [];
[2,3,0] -> [0,3,2];
[1] -> [1];
[3,2,1] -> [1,2,3];
[0] -> [0];
[3] -> [3];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038595 true false

[] -> [];
[2,0] -> [0,2];
[0,0] -> [0,0];
[0,0,2] -> [2,0,0];
[3,1] -> [1,3];
[3,2,0] -> [0,2,3];
[2] -> [2];
[1,3] -> [3,1];
[1] -> [1];
[1,3,2] -> [2,3,1];
[0,0,0] -> [0,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038757 true false

[1,3,0] -> [0,3,1];
[2,1] -> [1,2];
[0,1,3] -> [3,1,0];
[] -> [];
[3] -> [3];
[1,2,1] -> [1,2,1];
[1] -> [1];
[0,1,1] -> [1,1,0];
[3,3] -> [3,3];
[1,1,1] -> [1,1,1];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039368 true false

[0,3,3] -> [3,3,0];
[3,3,0] -> [0,3,3];
[1] -> [1];
[0,2] -> [2,0];
[3,0] -> [0,3];
[0] -> [0];
[0,1] -> [1,0];
[] -> [];
[3,2] -> [2,3];
[2,0] -> [0,2];
[1,1] -> [1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038043 true false

[] -> [];
[3] -> [3];
[2,2] -> [2,2];
[3,2,0] -> [0,2,3];
[0,1] -> [1,0];
[1,1] -> [1,1];
[3,0,3] -> [3,0,3];
[2] -> [2];
[2,3] -> [3,2];
[1,1,2] -> [2,1,1];
[3,3] -> [3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0385369999999 true false

[0,1,0] -> [0,1,0];
[2] -> [2];
[] -> [];
[2,3] -> [3,2];
[2,0,0] -> [0,0,2];
[3] -> [3];
[1,3] -> [3,1];
[0,2,3] -> [3,2,0];
[2,2,0] -> [0,2,2];
[1,3,3] -> [3,3,1];
[1,1,2] -> [2,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0404140000001 true false

[2,0] -> [0,2];
[3,1,1] -> [1,1,3];
[2] -> [2];
[0] -> [0];
[1,2] -> [2,1];
[2,1,0] -> [0,1,2];
[3,0] -> [0,3];
[3] -> [3];
[1,3,1] -> [1,3,1];
[3,2,3] -> [3,2,3];
[1,1,3] -> [3,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0405109999999 true false

[] -> [];
[3,0,2] -> [2,0,3];
[1,3,1] -> [1,3,1];
[0] -> [0];
[3] -> [3];
[1] -> [1];
[0,1,3] -> [3,1,0];
[3,1,0] -> [0,1,3];
[1,2] -> [2,1];
[0,3] -> [3,0];
[2,2,3] -> [3,2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0391749999999 true false

[2,2,1] -> [1,2,2];
[3,1,2] -> [2,1,3];
[] -> [];
[0] -> [0];
[1] -> [1];
[1,2] -> [2,1];
[0,3,3] -> [3,3,0];
[2] -> [2];
[3,0] -> [0,3];
[3,1] -> [1,3];
[3,3,0] -> [0,3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.040031 true false

[1,1] -> [1,1];
[3,1,3] -> [3,1,3];
[2,3,1] -> [1,3,2];
[] -> [];
[3,0] -> [0,3];
[1,2] -> [2,1];
[2,1,3] -> [3,1,2];
[2,0,2] -> [2,0,2];
[3,1,2] -> [2,1,3];
[3] -> [3];
[3,1,0] -> [0,1,3];
[2,1,2] -> [2,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0424640000001 true false

[0] -> [0];
[3,2,3] -> [3,2,3];
[] -> [];
[2,1] -> [1,2];
[1,0,0] -> [0,0,1];
[3,2,2] -> [2,2,3];
[0,1] -> [1,0];
[1] -> [1];
[2] -> [2];
[3,0] -> [0,3];
[3,2] -> [2,3];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.038992 true false

[2,3] -> [3,2];
[2,0,1] -> [1,0,2];
[0,1] -> [1,0];
[1,1,0] -> [0,1,1];
[2,2] -> [2,2];
[0,3] -> [3,0];
[] -> [];
[3] -> [3];
[0,2,0] -> [0,2,0];
[0] -> [0];
[2] -> [2];
[2,0] -> [0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039295 true false

[] -> [];
[3,0,2] -> [2,0,3];
[1] -> [1];
[0] -> [0];
[2,3,0] -> [0,3,2];
[2,0,3] -> [3,0,2];
[2,2] -> [2,2];
[2,0,0] -> [0,0,2];
[2,1] -> [1,2];
[3,2] -> [2,3];
[2] -> [2];
[3,1] -> [1,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0400509999999 true false

[] -> [];
[0] -> [0];
[3,1] -> [1,3];
[1] -> [1];
[3] -> [3];
[0,3] -> [3,0];
[2] -> [2];
[2,1,2] -> [2,1,2];
[2,3] -> [3,2];
[3,2] -> [2,3];
[2,0,1] -> [1,0,2];
[2,2] -> [2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0382669999999 true false

[0] -> [0];
[2,3,0] -> [0,3,2];
[0,2,1] -> [1,2,0];
[1,0] -> [0,1];
[] -> [];
[1,3,2] -> [2,3,1];
[3,2,0] -> [0,2,3];
[3,3] -> [3,3];
[2] -> [2];
[1,1] -> [1,1];
[2,2,2] -> [2,2,2];
[3,0,1] -> [1,0,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.041829 true false

[3,1] -> [1,3];
[] -> [];
[3,3,0] -> [0,3,3];
[3,2] -> [2,3];
[1,1,2] -> [2,1,1];
[1,0,0] -> [0,0,1];
[0,1] -> [1,0];
[1,3] -> [3,1];
[2,0] -> [0,2];
[3,0,1] -> [1,0,3];
[3,2,1] -> [1,2,3];
[2] -> [2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.042091 true false

[2] -> [2];
[0,1] -> [1,0];
[1,0,1] -> [1,0,1];
[3,2,3] -> [3,2,3];
[0] -> [0];
[0,3] -> [3,0];
[] -> [];
[2,0,1] -> [1,0,2];
[0,0] -> [0,0];
[2,3] -> [3,2];
[2,0] -> [0,2];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039133 true false

[1,0,3] -> [3,0,1];
[0] -> [0];
[] -> [];
[1,1,1] -> [1,1,1];
[1,0] -> [0,1];
[3,2] -> [2,3];
[1,3] -> [3,1];
[3,1] -> [1,3];
[1,0,2] -> [2,0,1];
[3,3] -> [3,3];
[1] -> [1];
[3] -> [3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.039734 true false

[3,2] -> [2,3];
[3,2,0] -> [0,2,3];
[] -> [];
[3,2,3] -> [3,2,3];
[0,2] -> [2,0];
[1] -> [1];
[0,2,2] -> [2,2,0];
[3] -> [3];
[2] -> [2];
[0,3] -> [3,0];
[1,1] -> [1,1];
[3,3] -> [3,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0392609999999 true false

[] -> [];
[2] -> [2];
[2,0,0] -> [0,0,2];
[0] -> [0];
[1,0,3] -> [3,0,1];
[0,1] -> [1,0];
[2,1,3] -> [3,1,2];
[1] -> [1];
[0,2,0] -> [0,2,0];
[2,0] -> [0,2];
[3] -> [3];
[0,2,3] -> [3,2,0];
[3,0] -> [0,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0412180000001 true false

[] -> [];
[1] -> [1];
[0,0] -> [0,0];
[1,1] -> [1,1];
[0] -> [0];
[1,2,3] -> [3,2,1];
[1,2,1] -> [1,2,1];
[0,1,1] -> [1,1,0];
[3,2] -> [2,3];
[3,0,2] -> [2,0,3];
[3,1] -> [1,3];
[2,1,1] -> [1,1,2];
[0,2] -> [2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.042927 true false

[0,2] -> [2,0];
[1] -> [1];
[2,2] -> [2,2];
[] -> [];
[2,1] -> [1,2];
[1,3] -> [3,1];
[2,1,0] -> [0,1,2];
[1,3,3] -> [3,3,1];
[0,0,0] -> [0,0,0];
[3] -> [3];
[2,1,2] -> [2,1,2];
[1,1] -> [1,1];
[0] -> [0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.041598 true false

[3,2,1] -> [1,2,3];
[2] -> [2];
[0] -> [0];
[1,3,0] -> [0,3,1];
[1,3] -> [3,1];
[0,2] -> [2,0];
[] -> [];
[1,0,0] -> [0,0,1];
[1,0] -> [0,1];
[2,2,0] -> [0,2,2];
[0,1] -> [1,0];
[2,1,1] -> [1,1,2];
[0,0,1] -> [1,0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.044056 true false

[2,3,1] -> [1,3,2];
[1,0,2] -> [2,0,1];
[3] -> [3];
[2,0,1] -> [1,0,2];
[] -> [];
[0] -> [0];
[1] -> [1];
[2,1] -> [1,2];
[3,0,3] -> [3,0,3];
[1,0] -> [0,1];
[2,3] -> [3,2];
[0,2,1] -> [1,2,0];
[0,1,3] -> [3,1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0420939999999 true false

[3] -> [3];
[2,3] -> [3,2];
[1] -> [1];
[2,0,1] -> [1,0,2];
[1,3] -> [3,1];
[] -> [];
[1,3,0] -> [0,3,1];
[1,1] -> [1,1];
[3,2] -> [2,3];
[1,3,3] -> [3,3,1];
[0,3] -> [3,0];
[2,1,0] -> [0,1,2];
[1,0,3] -> [3,0,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.042068 true false

[2,0,1] -> [1,0,2];
[] -> [];
[0,3,2] -> [2,3,0];
[2] -> [2];
[1,3] -> [3,1];
[2,1] -> [1,2];
[3,2] -> [2,3];
[3,0] -> [0,3];
[3] -> [3];
[2,3,1] -> [1,3,2];
[2,2,2] -> [2,2,2];
[0,1,1] -> [1,1,0];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.041571 true false

[0] -> [0];
[1] -> [1];
[] -> [];
[3,1] -> [1,3];
[1,1,0] -> [0,1,1];
[1,1,1] -> [1,1,1];
[1,2] -> [2,1];
[3,0] -> [0,3];
[2,0] -> [0,2];
[2,3] -> [3,2];
[0,1] -> [1,0];
[3] -> [3];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0395759999999 true false

[2,1] -> [1,2];
[0,3] -> [3,0];
[2,0] -> [0,2];
[3] -> [3];
[] -> [];
[0,1] -> [1,0];
[0,0,3] -> [3,0,0];
[2] -> [2];
[2,1,2] -> [2,1,2];
[3,2] -> [2,3];
[2,2,0] -> [0,2,2];
[2,2,2] -> [2,2,2];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0412100000001 true false

[3,2,1] -> [1,2,3];
[] -> [];
[0] -> [0];
[2,3,2] -> [2,3,2];
[3,0] -> [0,3];
[1,2,0] -> [0,2,1];
[3,1] -> [1,3];
[3] -> [3];
[0,2,2] -> [2,2,0];
[1,3,0] -> [0,3,1];
[1] -> [1];
[3,3] -> [3,3];
[0,0] -> [0,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0611799999999 true false

[2,1] -> [1,2];
[] -> [];
[1,1,3] -> [3,1,1];
[0,3,1] -> [1,3,0];
[2] -> [2];
[0,0,0] -> [0,0,0];
[0,2] -> [2,0];
[3] -> [3];
[2,3,3] -> [3,3,2];
[3,1,3] -> [3,1,3];
[3,0,0] -> [0,0,3];
[0,1,1] -> [1,1,0];
[0,3] -> [3,0];
[3,2] -> [2,3];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0464199999999 true false

[1,1] -> [1,1];
[1,2] -> [2,1];
[1,1,1] -> [1,1,1];
[] -> [];
[3,1,2] -> [2,1,3];
[0,0,1] -> [1,0,0];
[3,1] -> [1,3];
[0,0,0] -> [0,0,0];
[2] -> [2];
[3,3] -> [3,3];
[3,0,1] -> [1,0,3];
[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045318 true false

[1,1,0] -> [0,1,1];
[] -> [];
[1,1,1] -> [1,1,1];
[1] -> [1];
[0] -> [0];
[0,0] -> [0,0];
[1,0,3] -> [3,0,1];
[2] -> [2];
[0,3,0] -> [0,3,0];
[3,3,1] -> [1,3,3];
[3,2] -> [2,3];
[0,0,0] -> [0,0,0];
[3] -> [3];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045566 true false

[0] -> [0];
[3,2] -> [2,3];
[1] -> [1];
[3] -> [3];
[] -> [];
[1,3] -> [3,1];
[0,1,0] -> [0,1,0];
[1,0] -> [0,1];
[2,0,0] -> [0,0,2];
[1,2] -> [2,1];
[2,1,3] -> [3,1,2];
[1,1,0] -> [0,1,1];
[1,1] -> [1,1];
[1,1,2] -> [2,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.044832 true false

[0] -> [0];
[2] -> [2];
[3] -> [3];
[0,1] -> [1,0];
[1,1] -> [1,1];
[] -> [];
[1,2,3] -> [3,2,1];
[3,1,1] -> [1,1,3];
[2,2] -> [2,2];
[2,3] -> [3,2];
[2,0,1] -> [1,0,2];
[3,1,3] -> [3,1,3];
[3,1,0] -> [0,1,3];
[1,3] -> [3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0448630000001 true false

[2,0,2] -> [2,0,2];
[3,3] -> [3,3];
[0,2] -> [2,0];
[0,1] -> [1,0];
[0,0,1] -> [1,0,0];
[3,0] -> [0,3];
[1,1,0] -> [0,1,1];
[1,2,3] -> [3,2,1];
[1,3,0] -> [0,3,1];
[0] -> [0];
[3,0,3] -> [3,0,3];
[3,2,2] -> [2,2,3];
[] -> [];
[2,2] -> [2,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046484 true false

[] -> [];
[2,0] -> [0,2];
[3,0] -> [0,3];
[0,0,3] -> [3,0,0];
[0,0] -> [0,0];
[2] -> [2];
[2,3,3] -> [3,3,2];
[2,2,2] -> [2,2,2];
[3,3,0] -> [0,3,3];
[3] -> [3];
[1,1,1] -> [1,1,1];
[3,3] -> [3,3];
[0,0,0] -> [0,0,0];
[0,3,2] -> [2,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046263 true false

[] -> [];
[3] -> [3];
[0] -> [0];
[3,1] -> [1,3];
[1] -> [1];
[2,1] -> [1,2];
[2] -> [2];
[1,3,2] -> [2,3,1];
[0,2,2] -> [2,2,0];
[2,0] -> [0,2];
[1,1] -> [1,1];
[3,2] -> [2,3];
[0,1] -> [1,0];
[1,3,1] -> [1,3,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.043081 true false

[0,2,3] -> [3,2,0];
[0] -> [0];
[0,2] -> [2,0];
[1,2] -> [2,1];
[1,1] -> [1,1];
[] -> [];
[1,1,2] -> [2,1,1];
[3,1] -> [1,3];
[1,3] -> [3,1];
[2] -> [2];
[1,0,0] -> [0,0,1];
[3,3,1] -> [1,3,3];
[2,3] -> [3,2];
[0,2,2] -> [2,2,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045646 true false

[2,0] -> [0,2];
[1] -> [1];
[2] -> [2];
[2,2,2] -> [2,2,2];
[0,3,1] -> [1,3,0];
[] -> [];
[0] -> [0];
[0,0] -> [0,0];
[3,3] -> [3,3];
[1,2] -> [2,1];
[1,0,2] -> [2,0,1];
[3,0,1] -> [1,0,3];
[0,1,0] -> [0,1,0];
[2,0,3] -> [3,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0461210000001 true false

[1,0,0] -> [0,0,1];
[0,0,0] -> [0,0,0];
[3,3,2] -> [2,3,3];
[] -> [];
[0,1] -> [1,0];
[2,3,2] -> [2,3,2];
[0] -> [0];
[2,3,1] -> [1,3,2];
[1] -> [1];
[2] -> [2];
[3,0,1] -> [1,0,3];
[3,3] -> [3,3];
[1,0,3] -> [3,0,1];
[2,1] -> [1,2];
[2,0,1] -> [1,0,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.04801 true false

[0] -> [0];
[] -> [];
[1] -> [1];
[3,3] -> [3,3];
[1,2,1] -> [1,2,1];
[3,3,1] -> [1,3,3];
[2] -> [2];
[3] -> [3];
[1,1,0] -> [0,1,1];
[1,0] -> [0,1];
[1,1] -> [1,1];
[1,3] -> [3,1];
[2,1] -> [1,2];
[2,0,1] -> [1,0,2];
[1,1,3] -> [3,1,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046317 true false

[] -> [];
[3,2] -> [2,3];
[1] -> [1];
[0,1] -> [1,0];
[2] -> [2];
[1,2] -> [2,1];
[1,3,2] -> [2,3,1];
[0,2,3] -> [3,2,0];
[3,3] -> [3,3];
[0,2] -> [2,0];
[0,0] -> [0,0];
[1,2,2] -> [2,2,1];
[0] -> [0];
[1,1,2] -> [2,1,1];
[1,2,3] -> [3,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.045527 true false

[2,0,1] -> [1,0,2];
[] -> [];
[1,2] -> [2,1];
[2] -> [2];
[0] -> [0];
[2,0] -> [0,2];
[1,0] -> [0,1];
[3] -> [3];
[2,2] -> [2,2];
[3,1] -> [1,3];
[2,0,0] -> [0,0,2];
[2,2,3] -> [3,2,2];
[3,0] -> [0,3];
[1,0,0] -> [0,0,1];
[0,3,2] -> [2,3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046521 true false

[] -> [];
[2] -> [2];
[1,0] -> [0,1];
[3,2] -> [2,3];
[2,0,1] -> [1,0,2];
[0,0,0] -> [0,0,0];
[0] -> [0];
[1,2,2] -> [2,2,1];
[1,1] -> [1,1];
[3] -> [3];
[3,3] -> [3,3];
[2,0,0] -> [0,0,2];
[2,3] -> [3,2];
[2,0,3] -> [3,0,2];
[2,1,3] -> [3,1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0465389999999 true false

[3,2,3] -> [3,2,3];
[0] -> [0];
[2,3,1] -> [1,3,2];
[2,1] -> [1,2];
[] -> [];
[2,2] -> [2,2];
[2,3,3] -> [3,3,2];
[0,2] -> [2,0];
[0,1,1] -> [1,1,0];
[2] -> [2];
[2,0] -> [0,2];
[1] -> [1];
[3] -> [3];
[1,2] -> [2,1];
[0,3] -> [3,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.044942 true false

[1,2,1] -> [1,2,1];
[2,3] -> [3,2];
[] -> [];
[3,2] -> [2,3];
[0,3] -> [3,0];
[2] -> [2];
[2,2,2] -> [2,2,2];
[3] -> [3];
[1,2] -> [2,1];
[0,2] -> [2,0];
[3,2,0] -> [0,2,3];
[1,0] -> [0,1];
[1] -> [1];
[0] -> [0];
[0,1] -> [1,0];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0440040000001 true false

[1,1,1] -> [1,1,1];
[] -> [];
[2] -> [2];
[1,1,3] -> [3,1,1];
[2,0] -> [0,2];
[0,0] -> [0,0];
[1,0,3] -> [3,0,1];
[2,2,3] -> [3,2,2];
[2,1,3] -> [3,1,2];
[1,1,0] -> [0,1,1];
[0,3] -> [3,0];
[1,2,1] -> [1,2,1];
[0] -> [0];
[3] -> [3];
[1] -> [1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0467289999999 true false

[2] -> [2];
[3,0,2] -> [2,0,3];
[1,0,2] -> [2,0,1];
[3,2,0] -> [0,2,3];
[] -> [];
[3,1,0] -> [0,1,3];
[3,0] -> [0,3];
[0,1,3] -> [3,1,0];
[0] -> [0];
[3,3] -> [3,3];
[0,1,1] -> [1,1,0];
[0,2,1] -> [1,2,0];
[3,2] -> [2,3];
[1] -> [1];
[2,1] -> [1,2];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.0467679999999 true false

[3] -> [3];
[] -> [];
[1,1,0] -> [0,1,1];
[0] -> [0];
[2] -> [2];
[1,3,1] -> [1,3,1];
[0,0,2] -> [2,0,0];
[2,1,1] -> [1,1,2];
[3,2] -> [2,3];
[1,0] -> [0,1];
[2,3] -> [3,2];
[0,2] -> [2,0];
[1] -> [1];
[0,0,0] -> [0,0,0];
[1,2,2] -> [2,2,1];

=================================
(\fold -> (\snoc -> (\list_rev_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_fold = \xs -> fold snoc [] xs in list_rev_fold) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> NatList) in fold) : (NatList -> Nat -> NatList) -> NatList -> NatList -> NatList)
0.046249 true false

