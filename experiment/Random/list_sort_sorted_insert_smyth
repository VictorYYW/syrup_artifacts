list_sort_sorted_insert
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00835000000006 false false

[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00845800000002 false false

[1,0,1] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00929999999994 false false

[3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 3] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0090889999999 false false

[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00898000000007 false false

[1,1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [1, 3] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00944200000004 false false

[1,0,3] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1, 3] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00999900000011 false false

[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00760300000002 false false

[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00908200000003 false false

[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00755699999991 false false

[1,1] -> [1];
[0,3,1] -> [0,1,3];

=================================
NOSOL

[3,0,2] -> [0,2,3];
[0,1] -> [0,1];

=================================
NOSOL

[] -> [];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00727099999995 false false

[0,3,3] -> [0,3];
[2,3,1] -> [1,2,3];

=================================
NOSOL

[0,0,0] -> [0];
[2,0] -> [0,2];

=================================
NOSOL

[] -> [];
[3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0148429999999 false true

[3,1,2] -> [1,2,3];
[3,3,3] -> [3];

=================================
NOSOL

[] -> [];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00768199999993 false false

[] -> [];
[1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00793700000008 false false

[] -> [];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00775700000008 false false

[0,1] -> [0,1];
[0,1,1] -> [0,1];
[1,1] -> [1];

=================================
NOSOL

[1,3,3] -> [1,3];
[] -> [];
[0,0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01349 true true

[3] -> [3];
[] -> [];
[2,1,0] -> [0,1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0119319999999 true true

[0] -> [0];
[2] -> [2];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0085509999999 false false

[] -> [];
[0] -> [0];
[2,2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013346 false true

[3,0,3] -> [0,3];
[0,3,0] -> [0,3];
[1,2] -> [1,2];

=================================
NOSOL

[] -> [];
[3] -> [3];
[2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0125069999999 false true

[0] -> [0];
[3] -> [3];
[3,3] -> [3];

=================================
NOSOL

[] -> [];
[2,3] -> [2,3];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00783999999999 false false

[] -> [];
[0,1] -> [0,1];
[2,0,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0160209999999 false true

[2,1] -> [1,2];
[0,1,2] -> [0,1,2];
[1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.012954 false true

[1,0] -> [0,1];
[] -> [];
[3,2,2] -> [2,3];
[0,1] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0128569999999 true true

[3] -> [3];
[] -> [];
[3,3] -> [3];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01277 false true

[0,1,2] -> [0,1,2];
[3] -> [3];
[1,2] -> [1,2];
[3,0] -> [0,3];

=================================
NOSOL

[2] -> [2];
[] -> [];
[3] -> [3];
[2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0140369999999 false true

[1,1,0] -> [0,1];
[] -> [];
[0,0,0] -> [0];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0127769999999 true true

[] -> [];
[1] -> [1];
[3,1] -> [1,3];
[3,0,1] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0128540000001 false true

[2] -> [2];
[1,2,1] -> [1,2];
[] -> [];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015858 true true

[3,2] -> [2,3];
[] -> [];
[2,0,2] -> [0,2];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.012745 false true

[3,3] -> [3];
[0,2] -> [0,2];
[0,1,0] -> [0,1];
[0,3,2] -> [0,2,3];

=================================
NOSOL

[0] -> [0];
[1] -> [1];
[] -> [];
[0,0,0] -> [0];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01349 true true

[] -> [];
[1,3,0] -> [0,1,3];
[3] -> [3];
[3,3,1] -> [1,3];
[3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0138489999999 true true

[3] -> [3];
[0] -> [0];
[2,0] -> [0,2];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013391 false true

[2,3,1] -> [1,2,3];
[3] -> [3];
[2] -> [2];
[1,1,2] -> [1,2];
[1] -> [1];

=================================
NOSOL

[] -> [];
[3] -> [3];
[1,3,2] -> [1,2,3];
[2,2] -> [2];
[2,3,0] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0139340000001 true true

[0,2] -> [0,2];
[1,3] -> [1,3];
[1,1] -> [1];
[] -> [];
[2,0,3] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0141779999999 false true

[2,3,3] -> [2,3];
[] -> [];
[3,2,0] -> [0,2,3];
[3] -> [3];
[3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013944 true true

[] -> [];
[0] -> [0];
[0,0] -> [0];
[0,2,0] -> [0,2];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0157449999999 true true

[] -> [];
[1,2,1] -> [1,2];
[2] -> [2];
[1,2,2] -> [1,2];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0201259999999 true true

[3,1,0] -> [0,1,3];
[3] -> [3];
[0,1,0] -> [0,1];
[1] -> [1];
[3,1,2] -> [1,2,3];

=================================
NOSOL

[3] -> [3];
[] -> [];
[2] -> [2];
[2,1,2] -> [1,2];
[1] -> [1];
[0,3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0147340000001 true true

[] -> [];
[3,0,1] -> [0,1,3];
[1,0,2] -> [0,1,2];
[2] -> [2];
[0] -> [0];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013694 false true

[0,3,3] -> [0,3];
[2] -> [2];
[1,2,0] -> [0,1,2];
[2,2] -> [2];
[] -> [];
[0,1] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0152290000001 true true

[] -> [];
[3] -> [3];
[2] -> [2];
[3,1,3] -> [1,3];
[2,2] -> [2];
[2,2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0180419999999 false true

[] -> [];
[3,1,2] -> [1,2,3];
[1] -> [1];
[2,3,1] -> [1,2,3];
[3] -> [3];
[2,1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01989 true true

[] -> [];
[3,2,3] -> [2,3];
[3] -> [3];
[1] -> [1];
[3,0,2] -> [0,2,3];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0145889999999 false true

[3,2] -> [2,3];
[2,2] -> [2];
[0,0] -> [0];
[0] -> [0];
[] -> [];
[3,0,2] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014502 false true

[2] -> [2];
[3,2,1] -> [1,2,3];
[1,1] -> [1];
[] -> [];
[1,1,3] -> [1,3];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0186189999999 true true

[2,3] -> [2,3];
[2] -> [2];
[3] -> [3];
[1,2] -> [1,2];
[] -> [];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00916099999995 false false

[3,1] -> [1,3];
[0,2,2] -> [0,2];
[3,0,2] -> [0,2,3];
[3,3] -> [3];
[0] -> [0];
[3,2,3] -> [2,3];

=================================
NOSOL

[2] -> [2];
[1] -> [1];
[0] -> [0];
[] -> [];
[2,3] -> [2,3];
[2,1] -> [1,2];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0146259999999 false true

[0,0,3] -> [0,3];
[0] -> [0];
[2,2,2] -> [2];
[2,1,0] -> [0,1,2];
[3,2] -> [2,3];
[] -> [];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0151490000001 true true

[3,3] -> [3];
[] -> [];
[2] -> [2];
[3] -> [3];
[3,1,1] -> [1,3];
[0] -> [0];
[2,0,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014799 true true

[3,1] -> [1,3];
[0,0] -> [0];
[2,0] -> [0,2];
[0] -> [0];
[2,0,3] -> [0,2,3];
[0,2,2] -> [0,2];
[1,2] -> [1,2];

=================================
NOSOL

[1,2,2] -> [1,2];
[2] -> [2];
[] -> [];
[2,2,3] -> [2,3];
[2,2,1] -> [1,2];
[1,1] -> [1];
[0,3,1] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0159160000001 true true

[1,3] -> [1,3];
[] -> [];
[1] -> [1];
[0,2] -> [0,2];
[3,3,1] -> [1,3];
[2,3,0] -> [0,2,3];
[2,0] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0153600000001 true true

[0,2] -> [0,2];
[1,1] -> [1];
[] -> [];
[3,1] -> [1,3];
[2,3,0] -> [0,2,3];
[1] -> [1];
[1,0,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015402 true true

[2,3] -> [2,3];
[1,1] -> [1];
[1] -> [1];
[0,1,3] -> [0,1,3];
[] -> [];
[0] -> [0];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017881 false true

[] -> [];
[0,2] -> [0,2];
[0,1,3] -> [0,1,3];
[1,0] -> [0,1];
[1] -> [1];
[2,1] -> [1,2];
[1,3,2] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0155219999999 true true

[] -> [];
[0] -> [0];
[2,3] -> [2,3];
[1] -> [1];
[1,2] -> [1,2];
[3,2,3] -> [2,3];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0150599999999 false true

[0,1] -> [0,1];
[2,2,0] -> [0,2];
[] -> [];
[1,2] -> [1,2];
[1,0] -> [0,1];
[0,2,1] -> [0,1,2];
[2,1] -> [1,2];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01612 true true

[0] -> [0];
[1,2,2] -> [1,2];
[1,1] -> [1];
[] -> [];
[2] -> [2];
[2,2,2] -> [2];
[1,0,2] -> [0,1,2];
[3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0151450000001 true true

[] -> [];
[2,2] -> [2];
[0,3] -> [0,3];
[1] -> [1];
[0,1,3] -> [0,1,3];
[1,3,0] -> [0,1,3];
[3,3] -> [3];
[1,2,0] -> [0,1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016437 true true

[] -> [];
[1,1,3] -> [1,3];
[2] -> [2];
[3,3] -> [3];
[0,1,3] -> [0,1,3];
[3,0] -> [0,3];
[0,0] -> [0];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015995 false true

[0,1] -> [0,1];
[1,3] -> [1,3];
[3,1,0] -> [0,1,3];
[3,3] -> [3];
[2] -> [2];
[3,0] -> [0,3];
[1] -> [1];
[0] -> [0];

=================================
NOSOL

[0,0] -> [0];
[2] -> [2];
[3,1,2] -> [1,2,3];
[] -> [];
[2,2] -> [2];
[0,1,0] -> [0,1];
[3,0] -> [0,3];
[0,2,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016429 true true

[] -> [];
[2,1,1] -> [1,2];
[3] -> [3];
[1,1] -> [1];
[2,1,0] -> [0,1,2];
[3,1,0] -> [0,1,3];
[1,2,2] -> [1,2];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016245 true true

[0,3] -> [0,3];
[1,1,0] -> [0,1];
[] -> [];
[1,2,0] -> [0,1,2];
[3,2] -> [2,3];
[0,1] -> [0,1];
[0,0,3] -> [0,3];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0156469999999 true true

[2] -> [2];
[3,3,3] -> [3];
[0,0] -> [0];
[1,0] -> [0,1];
[3] -> [3];
[] -> [];
[1] -> [1];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014643 true true

[] -> [];
[3,3] -> [3];
[1,0,0] -> [0,1];
[2] -> [2];
[2,1,3] -> [1,2,3];
[1,1] -> [1];
[3,2,3] -> [2,3];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0166770000001 true true

[3,1,2] -> [1,2,3];
[0,3] -> [0,3];
[2] -> [2];
[] -> [];
[0] -> [0];
[0,1] -> [0,1];
[1] -> [1];
[1,1,1] -> [1];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0155440000001 true true

[] -> [];
[0,1] -> [0,1];
[0,1,3] -> [0,1,3];
[2,0] -> [0,2];
[3,2] -> [2,3];
[0] -> [0];
[2,3,0] -> [0,2,3];
[1] -> [1];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015582 true true

[1,0,0] -> [0,1];
[0] -> [0];
[0,1,1] -> [0,1];
[2,2,2] -> [2];
[1,1] -> [1];
[1] -> [1];
[0,1,2] -> [0,1,2];
[3] -> [3];
[2,0] -> [0,2];

=================================
NOSOL

[3] -> [3];
[0] -> [0];
[2,3,1] -> [1,2,3];
[] -> [];
[3,2] -> [2,3];
[1,3] -> [1,3];
[0,1,3] -> [0,1,3];
[2] -> [2];
[1,2,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0166039999999 true true

[] -> [];
[3,1,3] -> [1,3];
[1,2] -> [1,2];
[1,0,1] -> [0,1];
[3] -> [3];
[1,2,1] -> [1,2];
[1] -> [1];
[0] -> [0];
[0,0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016613 true true

[] -> [];
[1] -> [1];
[1,1,0] -> [0,1];
[1,1] -> [1];
[3,3,3] -> [3];
[3,1,2] -> [1,2,3];
[0,0] -> [0];
[0] -> [0];
[1,2,3] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0171740000001 true true

[] -> [];
[1,2,0] -> [0,1,2];
[2,1,0] -> [0,1,2];
[1,1] -> [1];
[3,3,2] -> [2,3];
[1,1,0] -> [0,1];
[1,1,3] -> [1,3];
[3,0] -> [0,3];
[2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0179149999999 true true

[3] -> [3];
[0,2] -> [0,2];
[] -> [];
[2,3] -> [2,3];
[1] -> [1];
[2] -> [2];
[0,3,0] -> [0,3];
[1,2,0] -> [0,1,2];
[3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016783 true true

[] -> [];
[0,2] -> [0,2];
[0,3] -> [0,3];
[1,1,0] -> [0,1];
[2,1] -> [1,2];
[0,1,1] -> [0,1];
[3,3,0] -> [0,3];
[2] -> [2];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0169209999999 true true

[1,2,0] -> [0,1,2];
[1,1] -> [1];
[3] -> [3];
[] -> [];
[1,1,2] -> [1,2];
[1,0,2] -> [0,1,2];
[2,1] -> [1,2];
[1] -> [1];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0166979999999 true true

[2,3] -> [2,3];
[] -> [];
[2,0,0] -> [0,2];
[2] -> [2];
[3,2] -> [2,3];
[0,0,3] -> [0,3];
[1] -> [1];
[0,2] -> [0,2];
[0] -> [0];
[3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0174529999999 true true

[1,0,3] -> [0,1,3];
[1] -> [1];
[] -> [];
[2] -> [2];
[1,3,3] -> [1,3];
[0] -> [0];
[0,0] -> [0];
[0,2,1] -> [0,1,2];
[3] -> [3];
[2,1,0] -> [0,1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0170969999999 true true

[2] -> [2];
[3] -> [3];
[] -> [];
[1,3,1] -> [1,3];
[0,1,3] -> [0,1,3];
[0,0] -> [0];
[1,3] -> [1,3];
[0] -> [0];
[0,0,1] -> [0,1];
[1,3,2] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0229810000001 true true

[0,0] -> [0];
[3,3,3] -> [3];
[3] -> [3];
[2,0] -> [0,2];
[0,1,2] -> [0,1,2];
[1,3] -> [1,3];
[2,0,3] -> [0,2,3];
[2,3] -> [2,3];
[] -> [];
[1,1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018137 true true

[3,3,3] -> [3];
[2,0] -> [0,2];
[] -> [];
[3] -> [3];
[3,3] -> [3];
[2] -> [2];
[1] -> [1];
[2,0,1] -> [0,1,2];
[0,3] -> [0,3];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017386 true true

[0,0] -> [0];
[] -> [];
[3] -> [3];
[1,0,3] -> [0,1,3];
[3,3,2] -> [2,3];
[1,2,1] -> [1,2];
[1,0] -> [0,1];
[3,1,1] -> [1,3];
[1,2,0] -> [0,1,2];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0180439999999 true true

[3,1,0] -> [0,1,3];
[3,3,3] -> [3];
[2] -> [2];
[] -> [];
[1,1,1] -> [1];
[3] -> [3];
[0] -> [0];
[3,3,1] -> [1,3];
[2,1] -> [1,2];
[3,1,2] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017955 true true

[] -> [];
[2,1] -> [1,2];
[2] -> [2];
[0] -> [0];
[0,2] -> [0,2];
[0,1,2] -> [0,1,2];
[0,1] -> [0,1];
[2,3] -> [2,3];
[1,0] -> [0,1];
[3,1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0173870000001 false true

[0] -> [0];
[] -> [];
[2,3,1] -> [1,2,3];
[3,1,0] -> [0,1,3];
[2] -> [2];
[0,3,0] -> [0,3];
[1,1] -> [1];
[2,3,2] -> [2,3];
[3,0,1] -> [0,1,3];
[2,2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018337 true true

[] -> [];
[2,0] -> [0,2];
[0,2] -> [0,2];
[3,0] -> [0,3];
[1] -> [1];
[0] -> [0];
[2,2] -> [2];
[3,2,3] -> [2,3];
[2] -> [2];
[1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017208 false true

[2,1] -> [1,2];
[3,0,2] -> [0,2,3];
[] -> [];
[2,0,1] -> [0,1,2];
[3,0,1] -> [0,1,3];
[2] -> [2];
[1,1,3] -> [1,3];
[0] -> [0];
[1] -> [1];
[0,2,2] -> [0,2];
[1,3,0] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0188450000001 true true

[0,0,3] -> [0,3];
[1,3,2] -> [1,2,3];
[] -> [];
[2,2] -> [2];
[3,2] -> [2,3];
[1,0] -> [0,1];
[0,1,2] -> [0,1,2];
[1] -> [1];
[0,1,0] -> [0,1];
[0] -> [0];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0188350000001 true true

[2,3,3] -> [2,3];
[1,2] -> [1,2];
[3,3] -> [3];
[] -> [];
[1,0] -> [0,1];
[3,0,1] -> [0,1,3];
[2,0] -> [0,2];
[0,1] -> [0,1];
[0,0] -> [0];
[3] -> [3];
[1,1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018969 true true

[] -> [];
[1,2] -> [1,2];
[1,2,3] -> [1,2,3];
[1,1,1] -> [1];
[1,1,2] -> [1,2];
[1] -> [1];
[3,2] -> [2,3];
[2,1,0] -> [0,1,2];
[0,1] -> [0,1];
[3,0,0] -> [0,3];
[3,2,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0194449999999 true true

[] -> [];
[2,0] -> [0,2];
[1] -> [1];
[1,3,1] -> [1,3];
[3,3] -> [3];
[3] -> [3];
[1,2,0] -> [0,1,2];
[0,1] -> [0,1];
[2,1,0] -> [0,1,2];
[3,0] -> [0,3];
[2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0184529999999 true true

[0,1,2] -> [0,1,2];
[0] -> [0];
[1] -> [1];
[1,3,2] -> [1,2,3];
[3,1,3] -> [1,3];
[0,0] -> [0];
[2,2,1] -> [1,2];
[] -> [];
[3,2,2] -> [2,3];
[2,0] -> [0,2];
[0,1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0190459999999 true true

[0,1] -> [0,1];
[2,1] -> [1,2];
[1,1] -> [1];
[] -> [];
[3] -> [3];
[0,3] -> [0,3];
[2,2,3] -> [2,3];
[0] -> [0];
[0,0] -> [0];
[2,1,0] -> [0,1,2];
[3,3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018262 true true

[2] -> [2];
[] -> [];
[3] -> [3];
[3,2,1] -> [1,2,3];
[0] -> [0];
[2,0] -> [0,2];
[1,1] -> [1];
[2,3,1] -> [1,2,3];
[3,3,0] -> [0,3];
[1,3,3] -> [1,3];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018554 true true

[1,3] -> [1,3];
[2,0] -> [0,2];
[1,2] -> [1,2];
[0,2,0] -> [0,2];
[] -> [];
[2,2] -> [2];
[2] -> [2];
[0,3,2] -> [0,2,3];
[3] -> [3];
[0] -> [0];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017744 true true

[3,0,3] -> [0,3];
[] -> [];
[0,1,0] -> [0,1];
[0,1,1] -> [0,1];
[2,0,2] -> [0,2];
[3,3,3] -> [3];
[3] -> [3];
[2,0] -> [0,2];
[3,0] -> [0,3];
[0] -> [0];
[1] -> [1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0186610000001 true true

[1,1] -> [1];
[1] -> [1];
[3] -> [3];
[1,3] -> [1,3];
[] -> [];
[0,3,0] -> [0,3];
[2] -> [2];
[3,2,0] -> [0,2,3];
[2,0,1] -> [0,1,2];
[3,0] -> [0,3];
[0,3,2] -> [0,2,3];
[3,1] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0191400000001 true true

[] -> [];
[2] -> [2];
[3,0] -> [0,3];
[3,3,3] -> [3];
[1] -> [1];
[1,0] -> [0,1];
[3] -> [3];
[0,2] -> [0,2];
[2,1] -> [1,2];
[0,0,1] -> [0,1];
[0] -> [0];
[3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018626 true true

[1] -> [1];
[] -> [];
[3] -> [3];
[3,3] -> [3];
[2,3] -> [2,3];
[3,0,3] -> [0,3];
[3,3,3] -> [3];
[2] -> [2];
[1,0] -> [0,1];
[0] -> [0];
[0,3,1] -> [0,1,3];
[2,3,1] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0192750000001 true true

[] -> [];
[2,2] -> [2];
[2] -> [2];
[3,3] -> [3];
[3] -> [3];
[3,3,0] -> [0,3];
[0,3] -> [0,3];
[1,0,0] -> [0,1];
[2,3] -> [2,3];
[0] -> [0];
[1,2,0] -> [0,1,2];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0195389999999 true true

[1,2] -> [1,2];
[] -> [];
[1] -> [1];
[3] -> [3];
[2] -> [2];
[3,3] -> [3];
[3,0,2] -> [0,2,3];
[1,1,3] -> [1,3];
[0] -> [0];
[1,0] -> [0,1];
[2,0] -> [0,2];
[1,1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0187659999999 true true

[] -> [];
[2,3] -> [2,3];
[1,3] -> [1,3];
[3] -> [3];
[2,3,2] -> [2,3];
[1] -> [1];
[0,1,1] -> [0,1];
[0,0] -> [0];
[3,0,0] -> [0,3];
[2] -> [2];
[2,2] -> [2];
[1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019137 true true

[] -> [];
[3] -> [3];
[0,3,1] -> [0,1,3];
[0,0] -> [0];
[1,2,0] -> [0,1,2];
[2,2] -> [2];
[2,0] -> [0,2];
[0,1] -> [0,1];
[1,2] -> [1,2];
[1,0] -> [0,1];
[1,0,0] -> [0,1];
[2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0191669999999 true true

[3,1] -> [1,3];
[2] -> [2];
[3,2,2] -> [2,3];
[3,2] -> [2,3];
[3] -> [3];
[] -> [];
[0] -> [0];
[2,2,1] -> [1,2];
[2,3,1] -> [1,2,3];
[2,3] -> [2,3];
[1,1,0] -> [0,1];
[2,0,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019464 true true

[1] -> [1];
[0,2] -> [0,2];
[3,3,2] -> [2,3];
[2,1] -> [1,2];
[2,1,3] -> [1,2,3];
[1,0] -> [0,1];
[3,0] -> [0,3];
[3] -> [3];
[2,3,2] -> [2,3];
[1,3,2] -> [1,2,3];
[] -> [];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0192930000001 true true

[1,0] -> [0,1];
[] -> [];
[3,3] -> [3];
[2] -> [2];
[1,1] -> [1];
[0,1] -> [0,1];
[0,2] -> [0,2];
[1] -> [1];
[1,1,3] -> [1,3];
[2,1,3] -> [1,2,3];
[0,0,2] -> [0,2];
[2,1,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0192549999999 true true

[1,3,1] -> [1,3];
[2] -> [2];
[2,2] -> [2];
[] -> [];
[0,2,0] -> [0,2];
[1] -> [1];
[0,3,1] -> [0,1,3];
[2,2,3] -> [2,3];
[3,2] -> [2,3];
[2,0] -> [0,2];
[0] -> [0];
[0,2,2] -> [0,2];
[3,1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.020628 true true

[] -> [];
[3,0,1] -> [0,1,3];
[2] -> [2];
[3] -> [3];
[1,0,2] -> [0,1,2];
[0] -> [0];
[3,0] -> [0,3];
[1,3] -> [1,3];
[0,1,1] -> [0,1];
[2,2] -> [2];
[2,1] -> [1,2];
[3,3,2] -> [2,3];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.020595 true true

[2] -> [2];
[] -> [];
[3] -> [3];
[1] -> [1];
[2,3,3] -> [2,3];
[0,1] -> [0,1];
[0] -> [0];
[3,2,3] -> [2,3];
[3,1,2] -> [1,2,3];
[2,1,3] -> [1,2,3];
[3,3,1] -> [1,3];
[2,0] -> [0,2];
[3,0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0194819999999 true true

[0,3] -> [0,3];
[1] -> [1];
[] -> [];
[1,3] -> [1,3];
[3,0] -> [0,3];
[0,1] -> [0,1];
[0,1,3] -> [0,1,3];
[2,0,3] -> [0,2,3];
[3,3,3] -> [3];
[3,1] -> [1,3];
[1,2,2] -> [1,2];
[0,3,0] -> [0,3];
[0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019274 true true

[] -> [];
[2] -> [2];
[0,0,0] -> [0];
[3] -> [3];
[1] -> [1];
[3,1] -> [1,3];
[1,0] -> [0,1];
[3,0] -> [0,3];
[0,3,1] -> [0,1,3];
[1,0,0] -> [0,1];
[3,1,1] -> [1,3];
[1,3] -> [1,3];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0193340000001 true true

[] -> [];
[3] -> [3];
[3,0,0] -> [0,3];
[2,2,1] -> [1,2];
[1,2,2] -> [1,2];
[3,2,0] -> [0,2,3];
[2] -> [2];
[0] -> [0];
[2,1,0] -> [0,1,2];
[2,0] -> [0,2];
[3,1,2] -> [1,2,3];
[3,2] -> [2,3];
[0,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019697 true true

[3,3,1] -> [1,3];
[] -> [];
[0,1] -> [0,1];
[1] -> [1];
[0] -> [0];
[2,3] -> [2,3];
[0,2] -> [0,2];
[3] -> [3];
[1,2] -> [1,2];
[0,0] -> [0];
[3,2,0] -> [0,2,3];
[1,0] -> [0,1];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0185690000001 true true

[] -> [];
[0,3] -> [0,3];
[2,2,0] -> [0,2];
[2,0] -> [0,2];
[0,1,1] -> [0,1];
[0] -> [0];
[1] -> [1];
[3,3] -> [3];
[1,3,0] -> [0,1,3];
[2,3] -> [2,3];
[0,3,3] -> [0,3];
[3,2,1] -> [1,2,3];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0189789999999 true true

[] -> [];
[2] -> [2];
[1,1] -> [1];
[2,3,0] -> [0,2,3];
[1] -> [1];
[0] -> [0];
[2,0] -> [0,2];
[1,0,2] -> [0,1,2];
[1,1,1] -> [1];
[2,2,0] -> [0,2];
[0,0,1] -> [0,1];
[1,2] -> [1,2];
[0,1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0192830000001 true true

[3,0] -> [0,3];
[1,3] -> [1,3];
[0] -> [0];
[1,3,1] -> [1,3];
[] -> [];
[0,1,3] -> [0,1,3];
[0,0,2] -> [0,2];
[1] -> [1];
[2,0,1] -> [0,1,2];
[1,3,3] -> [1,3];
[2,1,3] -> [1,2,3];
[2,0] -> [0,2];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019354 true true

[0,1,3] -> [0,1,3];
[0] -> [0];
[2,2,3] -> [2,3];
[2] -> [2];
[3,1] -> [1,3];
[] -> [];
[1,1,0] -> [0,1];
[2,1,3] -> [1,2,3];
[3,0] -> [0,3];
[3] -> [3];
[1,3,1] -> [1,3];
[1,2] -> [1,2];
[1,1] -> [1];
[3,0,2] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0214309999999 true true

[0,0,0] -> [0];
[] -> [];
[2,3] -> [2,3];
[2] -> [2];
[3,1] -> [1,3];
[3,2] -> [2,3];
[2,0,0] -> [0,2];
[3,1,3] -> [1,3];
[0,3] -> [0,3];
[2,1,0] -> [0,1,2];
[1,2] -> [1,2];
[2,1,3] -> [1,2,3];
[2,0] -> [0,2];
[3,3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021696 true true

[3] -> [3];
[2,3] -> [2,3];
[0,2] -> [0,2];
[0,3] -> [0,3];
[] -> [];
[2,1] -> [1,2];
[0,2,2] -> [0,2];
[1] -> [1];
[0] -> [0];
[1,0,2] -> [0,1,2];
[2,3,0] -> [0,2,3];
[1,0,1] -> [0,1];
[0,3,3] -> [0,3];
[0,1,3] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021567 true true

[1] -> [1];
[0,2,1] -> [0,1,2];
[0] -> [0];
[] -> [];
[1,1,0] -> [0,1];
[2,3] -> [2,3];
[1,1] -> [1];
[0,3] -> [0,3];
[1,3] -> [1,3];
[2] -> [2];
[3] -> [3];
[3,3,3] -> [3];
[0,3,2] -> [0,2,3];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0207680000001 true true

[] -> [];
[2] -> [2];
[0] -> [0];
[1,3,1] -> [1,3];
[3,1] -> [1,3];
[0,0,3] -> [0,3];
[2,1] -> [1,2];
[2,3] -> [2,3];
[3] -> [3];
[2,3,1] -> [1,2,3];
[1,1,2] -> [1,2];
[0,2] -> [0,2];
[3,2] -> [2,3];
[1,3,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0211179999999 true true

[3] -> [3];
[] -> [];
[3,0] -> [0,3];
[1] -> [1];
[1,1] -> [1];
[2,1] -> [1,2];
[0] -> [0];
[1,2] -> [1,2];
[2] -> [2];
[0,3,2] -> [0,2,3];
[2,0,1] -> [0,1,2];
[2,2,3] -> [2,3];
[2,0] -> [0,2];
[3,1] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0204140000001 true true

[1] -> [1];
[3] -> [3];
[3,1] -> [1,3];
[] -> [];
[2,2] -> [2];
[3,2] -> [2,3];
[2,0] -> [0,2];
[0] -> [0];
[2] -> [2];
[1,3] -> [1,3];
[1,3,1] -> [1,3];
[2,1,0] -> [0,1,2];
[3,0] -> [0,3];
[1,2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0206330000001 true true

[0,1] -> [0,1];
[3,1,1] -> [1,3];
[1,3] -> [1,3];
[2] -> [2];
[1,0,2] -> [0,1,2];
[1,2,1] -> [1,2];
[] -> [];
[1,1,2] -> [1,2];
[3] -> [3];
[1,1] -> [1];
[3,2,3] -> [2,3];
[0] -> [0];
[1,2] -> [1,2];
[3,0,1] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021712 true true

[1,1] -> [1];
[] -> [];
[0,3,1] -> [0,1,3];
[1,2,1] -> [1,2];
[0] -> [0];
[1,3,3] -> [1,3];
[1] -> [1];
[2] -> [2];
[2,3] -> [2,3];
[3,3,0] -> [0,3];
[1,3,2] -> [1,2,3];
[3,0,2] -> [0,2,3];
[3] -> [3];
[1,3,0] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0211879999999 true true

[2,3] -> [2,3];
[1,1] -> [1];
[0,2,1] -> [0,1,2];
[] -> [];
[3] -> [3];
[1] -> [1];
[3,2] -> [2,3];
[2,3,3] -> [2,3];
[2] -> [2];
[0] -> [0];
[3,2,3] -> [2,3];
[3,0] -> [0,3];
[3,1,0] -> [0,1,3];
[0,0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.020581 true true

[2,3,2] -> [2,3];
[0] -> [0];
[] -> [];
[3] -> [3];
[1] -> [1];
[2,3,0] -> [0,2,3];
[1,1,0] -> [0,1];
[2,1,2] -> [1,2];
[0,0,1] -> [0,1];
[2] -> [2];
[3,0,1] -> [0,1,3];
[3,0] -> [0,3];
[3,2] -> [2,3];
[1,2,0] -> [0,1,2];
[2,0] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0219279999999 true true

[0,1,2] -> [0,1,2];
[0,2,0] -> [0,2];
[1,3,2] -> [1,2,3];
[3,2,0] -> [0,2,3];
[0,3] -> [0,3];
[2] -> [2];
[2,2,3] -> [2,3];
[] -> [];
[1] -> [1];
[0,1,3] -> [0,1,3];
[3,3,0] -> [0,3];
[3] -> [3];
[0,3,3] -> [0,3];
[1,2,0] -> [0,1,2];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022678 true true

[0,0,3] -> [0,3];
[1] -> [1];
[] -> [];
[1,3] -> [1,3];
[2,3,3] -> [2,3];
[2,0] -> [0,2];
[1,3,0] -> [0,1,3];
[1,0] -> [0,1];
[3] -> [3];
[2] -> [2];
[2,1,2] -> [1,2];
[1,0,1] -> [0,1];
[3,0] -> [0,3];
[3,1,3] -> [1,3];
[1,1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0229039999999 true true

[0] -> [0];
[] -> [];
[2] -> [2];
[2,3,3] -> [2,3];
[1] -> [1];
[1,1] -> [1];
[1,1,3] -> [1,3];
[3] -> [3];
[3,3] -> [3];
[0,0,2] -> [0,2];
[0,1] -> [0,1];
[0,0,3] -> [0,3];
[3,1,3] -> [1,3];
[3,2] -> [2,3];
[3,1,1] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022037 true true

[] -> [];
[1] -> [1];
[2,0] -> [0,2];
[3,0] -> [0,3];
[2,1] -> [1,2];
[0] -> [0];
[1,1] -> [1];
[0,3,0] -> [0,3];
[0,3] -> [0,3];
[1,3] -> [1,3];
[0,1,0] -> [0,1];
[3,2,1] -> [1,2,3];
[1,0] -> [0,1];
[3,2] -> [2,3];
[0,1,3] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0217439999999 true true

[3] -> [3];
[1] -> [1];
[1,3,0] -> [0,1,3];
[1,0] -> [0,1];
[2] -> [2];
[0,3,3] -> [0,3];
[0,2] -> [0,2];
[1,3,3] -> [1,3];
[0] -> [0];
[2,1,3] -> [1,2,3];
[] -> [];
[2,0] -> [0,2];
[1,3,1] -> [1,3];
[2,1,0] -> [0,1,2];
[3,3,3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0220569999999 true true

[] -> [];
[0] -> [0];
[3,3,3] -> [3];
[2] -> [2];
[1,0,3] -> [0,1,3];
[1] -> [1];
[3,0] -> [0,3];
[2,0] -> [0,2];
[3,2] -> [2,3];
[1,2,1] -> [1,2];
[3,1,2] -> [1,2,3];
[3,2,2] -> [2,3];
[1,0,1] -> [0,1];
[1,1] -> [1];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0235499999999 true true

[2,0] -> [0,2];
[2] -> [2];
[] -> [];
[3] -> [3];
[0,2,3] -> [0,2,3];
[3,0] -> [0,3];
[1,1] -> [1];
[0,3,1] -> [0,1,3];
[2,2] -> [2];
[1,0] -> [0,1];
[0,3] -> [0,3];
[1] -> [1];
[3,3,2] -> [2,3];
[2,2,1] -> [1,2];
[3,1] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0213610000001 true true

[0,1,0] -> [0,1];
[1,0,2] -> [0,1,2];
[3,3,3] -> [3];
[0] -> [0];
[] -> [];
[0,2] -> [0,2];
[3] -> [3];
[2] -> [2];
[2,3,3] -> [2,3];
[1,1,3] -> [1,3];
[1,3,1] -> [1,3];
[1] -> [1];
[1,3] -> [1,3];
[2,0] -> [0,2];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0220260000001 true true

[1] -> [1];
[] -> [];
[0,1] -> [0,1];
[3,1] -> [1,3];
[2,2] -> [2];
[1,1] -> [1];
[2,3] -> [2,3];
[0,1,3] -> [0,1,3];
[3,2] -> [2,3];
[1,2,3] -> [1,2,3];
[2] -> [2];
[1,3,0] -> [0,1,3];
[3] -> [3];
[3,0] -> [0,3];
[0,3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0217889999999 true true

[1,3] -> [1,3];
[2] -> [2];
[2,1] -> [1,2];
[2,2,0] -> [0,2];
[1,2] -> [1,2];
[] -> [];
[3,2] -> [2,3];
[0,0,0] -> [0];
[3] -> [3];
[2,3,0] -> [0,2,3];
[2,2] -> [2];
[3,0] -> [0,3];
[0] -> [0];
[3,3] -> [3];
[2,0] -> [0,2];
[2,1,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022774 true true

[0,0] -> [0];
[] -> [];
[0,2,1] -> [0,1,2];
[2,3,0] -> [0,2,3];
[3,3,1] -> [1,3];
[2,1,2] -> [1,2];
[3,0,2] -> [0,2,3];
[3] -> [3];
[0,3,3] -> [0,3];
[1,1] -> [1];
[0] -> [0];
[3,2,2] -> [2,3];
[0,3,2] -> [0,2,3];
[1,2,1] -> [1,2];
[2,0,2] -> [0,2];
[0,1] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.037039 true true

[2,2] -> [2];
[2,1,1] -> [1,2];
[0,2,0] -> [0,2];
[2] -> [2];
[] -> [];
[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];
[3,1] -> [1,3];
[2,0,0] -> [0,2];
[2,3,0] -> [0,2,3];
[3,2,0] -> [0,2,3];
[1,2,0] -> [0,1,2];
[0] -> [0];
[3,3] -> [3];
[3,0,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021718 true true

[] -> [];
[0,3,0] -> [0,3];
[2,0] -> [0,2];
[1,1] -> [1];
[2] -> [2];
[3,1] -> [1,3];
[0] -> [0];
[0,2,3] -> [0,2,3];
[1] -> [1];
[2,1] -> [1,2];
[3,2] -> [2,3];
[1,3,1] -> [1,3];
[2,2] -> [2];
[0,2] -> [0,2];
[0,0,1] -> [0,1];
[1,2,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0221959999999 true true

[] -> [];
[3] -> [3];
[2] -> [2];
[1,2,0] -> [0,1,2];
[3,2,3] -> [2,3];
[1,2,2] -> [1,2];
[0,0,3] -> [0,3];
[2,3] -> [2,3];
[3,2] -> [2,3];
[1] -> [1];
[0,3,1] -> [0,1,3];
[1,1] -> [1];
[3,3] -> [3];
[3,2,1] -> [1,2,3];
[3,0] -> [0,3];
[3,1] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022338 true true

[] -> [];
[0] -> [0];
[2,0] -> [0,2];
[2,2,1] -> [1,2];
[1,0] -> [0,1];
[1,3] -> [1,3];
[1,3,0] -> [0,1,3];
[3,1,1] -> [1,3];
[0,0,0] -> [0];
[3,2,2] -> [2,3];
[3] -> [3];
[0,3] -> [0,3];
[0,0,3] -> [0,3];
[3,1] -> [1,3];
[2,1] -> [1,2];
[2,2,0] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022309 true true

[1,0,0] -> [0,1];
[] -> [];
[0] -> [0];
[1,0] -> [0,1];
[2,3] -> [2,3];
[3] -> [3];
[0,1,2] -> [0,1,2];
[1,0,3] -> [0,1,3];
[3,3,3] -> [3];
[3,1,1] -> [1,3];
[1] -> [1];
[3,3] -> [3];
[2] -> [2];
[3,1] -> [1,3];
[3,2,1] -> [1,2,3];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0216350000001 true true

[2,3] -> [2,3];
[] -> [];
[3,1,1] -> [1,3];
[0] -> [0];
[2,3,3] -> [2,3];
[0,0] -> [0];
[3,0] -> [0,3];
[3] -> [3];
[2,0,1] -> [0,1,2];
[3,3] -> [3];
[2] -> [2];
[0,2,2] -> [0,2];
[1] -> [1];
[3,1] -> [1,3];
[1,2] -> [1,2];
[0,3,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0214370000001 true true

[2,3,0] -> [0,2,3];
[2,0] -> [0,2];
[2,0,0] -> [0,2];
[3] -> [3];
[1,1] -> [1];
[] -> [];
[2,3] -> [2,3];
[1,1,1] -> [1];
[2,2,3] -> [2,3];
[1] -> [1];
[0,2,1] -> [0,1,2];
[0,0] -> [0];
[3,2] -> [2,3];
[1,0] -> [0,1];
[2,2] -> [2];
[1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0214759999999 true true

[3] -> [3];
[2,0] -> [0,2];
[] -> [];
[3,3] -> [3];
[3,1,0] -> [0,1,3];
[2,2,0] -> [0,2];
[0] -> [0];
[2] -> [2];
[1,0] -> [0,1];
[2,2,2] -> [2];
[3,1,3] -> [1,3];
[0,2] -> [0,2];
[0,3,3] -> [0,3];
[0,2,1] -> [0,1,2];
[1,2] -> [1,2];
[2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021714 true true

[2,3] -> [2,3];
[3] -> [3];
[1] -> [1];
[] -> [];
[3,0] -> [0,3];
[1,0] -> [0,1];
[3,1] -> [1,3];
[1,0,1] -> [0,1];
[1,2,3] -> [1,2,3];
[0,0,1] -> [0,1];
[3,3] -> [3];
[2,3,0] -> [0,2,3];
[0,3,2] -> [0,2,3];
[0] -> [0];
[2] -> [2];
[0,2] -> [0,2];
[2,1] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0222550000001 true true

[2,3,0] -> [0,2,3];
[1,1] -> [1];
[] -> [];
[2,0,2] -> [0,2];
[1,2,0] -> [0,1,2];
[2,0] -> [0,2];
[1,1,2] -> [1,2];
[1,1,1] -> [1];
[3,2] -> [2,3];
[1] -> [1];
[2,3] -> [2,3];
[3,3,3] -> [3];
[3,1] -> [1,3];
[3] -> [3];
[2] -> [2];
[3,3] -> [3];
[0,0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.022864 true true

[] -> [];
[1,1] -> [1];
[2] -> [2];
[1] -> [1];
[2,3] -> [2,3];
[3] -> [3];
[1,0] -> [0,1];
[2,0,3] -> [0,2,3];
[0,1,2] -> [0,1,2];
[0,2,2] -> [0,2];
[3,2] -> [2,3];
[2,0,1] -> [0,1,2];
[1,3,3] -> [1,3];
[3,2,0] -> [0,2,3];
[0] -> [0];
[2,2,3] -> [2,3];
[3,2,1] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.036969 true true

[3] -> [3];
[3,1] -> [1,3];
[0,1,3] -> [0,1,3];
[0,1] -> [0,1];
[1,2,2] -> [1,2];
[1] -> [1];
[2,0,3] -> [0,2,3];
[2,0] -> [0,2];
[] -> [];
[1,0] -> [0,1];
[2,3] -> [2,3];
[1,1] -> [1];
[0,0,1] -> [0,1];
[0,2,0] -> [0,2];
[2,2] -> [2];
[2,3,1] -> [1,2,3];
[0,2,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0240329999999 true true

[1,0] -> [0,1];
[0] -> [0];
[] -> [];
[2,0] -> [0,2];
[1,3] -> [1,3];
[1] -> [1];
[2] -> [2];
[3,3] -> [3];
[0,3] -> [0,3];
[2,3,1] -> [1,2,3];
[2,2,2] -> [2];
[3,3,0] -> [0,3];
[1,1] -> [1];
[3] -> [3];
[1,0,2] -> [0,1,2];
[3,0,1] -> [0,1,3];
[2,0,2] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0231209999999 true true

[1,1,2] -> [1,2];
[2,0,1] -> [0,1,2];
[0] -> [0];
[0,1,0] -> [0,1];
[3,2] -> [2,3];
[] -> [];
[1,2,0] -> [0,1,2];
[3,1] -> [1,3];
[1] -> [1];
[0,2] -> [0,2];
[3] -> [3];
[2,3] -> [2,3];
[2,0] -> [0,2];
[3,1,1] -> [1,3];
[1,2] -> [1,2];
[2,0,3] -> [0,2,3];
[3,1,0] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0241349999999 true true

[2] -> [2];
[3] -> [3];
[] -> [];
[0] -> [0];
[0,2] -> [0,2];
[2,3,2] -> [2,3];
[1,3] -> [1,3];
[2,3] -> [2,3];
[1,2] -> [1,2];
[2,1] -> [1,2];
[1,0] -> [0,1];
[3,0,1] -> [0,1,3];
[2,1,3] -> [1,2,3];
[0,3,0] -> [0,3];
[0,1] -> [0,1];
[1] -> [1];
[2,0,3] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0232209999999 true true

[] -> [];
[3,0] -> [0,3];
[0,2] -> [0,2];
[1,3] -> [1,3];
[2] -> [2];
[0,3] -> [0,3];
[2,2,0] -> [0,2];
[0] -> [0];
[1,2] -> [1,2];
[0,1,3] -> [0,1,3];
[1,3,3] -> [1,3];
[2,3,2] -> [2,3];
[0,0] -> [0];
[3] -> [3];
[1,0] -> [0,1];
[2,0,0] -> [0,2];
[3,3,3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.023848 true true

[] -> [];
[3] -> [3];
[2] -> [2];
[0,2,0] -> [0,2];
[2,1] -> [1,2];
[3,3,0] -> [0,3];
[3,1] -> [1,3];
[3,3] -> [3];
[0] -> [0];
[3,2,3] -> [2,3];
[2,0,3] -> [0,2,3];
[2,3,2] -> [2,3];
[1] -> [1];
[1,1,2] -> [1,2];
[2,2] -> [2];
[1,0] -> [0,1];
[1,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0236809999999 true true

[] -> [];
[1] -> [1];
[2,3] -> [2,3];
[3,1,2] -> [1,2,3];
[1,3] -> [1,3];
[3,3,1] -> [1,3];
[2,2] -> [2];
[1,3,0] -> [0,1,3];
[0,1,1] -> [0,1];
[1,0] -> [0,1];
[0,0,2] -> [0,2];
[3,3] -> [3];
[1,1,2] -> [1,2];
[2,0] -> [0,2];
[3,2] -> [2,3];
[2] -> [2];
[0,2,3] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024175 true true

[0,1,1] -> [0,1];
[0,2,1] -> [0,1,2];
[] -> [];
[2] -> [2];
[2,3] -> [2,3];
[0] -> [0];
[2,1,2] -> [1,2];
[3,0,2] -> [0,2,3];
[3] -> [3];
[1,3,1] -> [1,3];
[1,1,1] -> [1];
[1] -> [1];
[0,1,2] -> [0,1,2];
[1,0] -> [0,1];
[2,2] -> [2];
[1,3,2] -> [1,2,3];
[2,2,2] -> [2];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0256220000001 true true

[2] -> [2];
[] -> [];
[3,3] -> [3];
[3] -> [3];
[1,1,3] -> [1,3];
[0,1] -> [0,1];
[0,3,2] -> [0,2,3];
[1,1] -> [1];
[1] -> [1];
[1,0] -> [0,1];
[0,2,0] -> [0,2];
[0] -> [0];
[1,0,3] -> [0,1,3];
[1,3,3] -> [1,3];
[2,0] -> [0,2];
[3,2] -> [2,3];
[2,3,2] -> [2,3];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.023991 true true

[] -> [];
[2,1] -> [1,2];
[0] -> [0];
[2,3,0] -> [0,2,3];
[2,1,1] -> [1,2];
[0,1] -> [0,1];
[1,0,1] -> [0,1];
[0,2,3] -> [0,2,3];
[2,0,0] -> [0,2];
[1,0,3] -> [0,1,3];
[0,3,0] -> [0,3];
[2] -> [2];
[0,2] -> [0,2];
[3,3,1] -> [1,3];
[3,3,2] -> [2,3];
[3,1,2] -> [1,2,3];
[2,0] -> [0,2];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0263030000001 true true

[1,3,1] -> [1,3];
[3,0,2] -> [0,2,3];
[2,1] -> [1,2];
[2,1,1] -> [1,2];
[0,3,2] -> [0,2,3];
[2] -> [2];
[] -> [];
[3,3] -> [3];
[1,2,1] -> [1,2];
[1,3,3] -> [1,3];
[1,2,2] -> [1,2];
[3,2,1] -> [1,2,3];
[0] -> [0];
[3] -> [3];
[1,1,3] -> [1,3];
[2,2] -> [2];
[1,2,0] -> [0,1,2];
[1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.025226 true true

[2] -> [2];
[] -> [];
[0] -> [0];
[0,0] -> [0];
[2,0] -> [0,2];
[0,1] -> [0,1];
[2,3] -> [2,3];
[1,3] -> [1,3];
[0,2,3] -> [0,2,3];
[2,1] -> [1,2];
[3,0] -> [0,3];
[1] -> [1];
[3,2] -> [2,3];
[0,3] -> [0,3];
[1,3,2] -> [1,2,3];
[2,2,0] -> [0,2];
[3,2,2] -> [2,3];
[2,3,1] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0239959999999 true true

[0,0] -> [0];
[] -> [];
[1] -> [1];
[0] -> [0];
[2,0,3] -> [0,2,3];
[2] -> [2];
[0,3] -> [0,3];
[3,3] -> [3];
[3] -> [3];
[1,0] -> [0,1];
[2,3] -> [2,3];
[3,3,2] -> [2,3];
[3,1] -> [1,3];
[3,1,1] -> [1,3];
[3,0,2] -> [0,2,3];
[3,2,2] -> [2,3];
[2,2,2] -> [2];
[1,2,2] -> [1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024594 true true

[2,2] -> [2];
[] -> [];
[2,1] -> [1,2];
[1,2] -> [1,2];
[3,1,3] -> [1,3];
[2,2,1] -> [1,2];
[3] -> [3];
[3,0,2] -> [0,2,3];
[0] -> [0];
[1,2,2] -> [1,2];
[2,2,3] -> [2,3];
[2,3] -> [2,3];
[0,1,0] -> [0,1];
[1] -> [1];
[0,3] -> [0,3];
[2] -> [2];
[0,0,0] -> [0];
[1,1,3] -> [1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024739 true true

[] -> [];
[2,0] -> [0,2];
[3] -> [3];
[0,2,1] -> [0,1,2];
[0,1,0] -> [0,1];
[3,1] -> [1,3];
[2] -> [2];
[0,0] -> [0];
[1,1] -> [1];
[0,3] -> [0,3];
[3,3] -> [3];
[0] -> [0];
[1] -> [1];
[3,0] -> [0,3];
[3,3,0] -> [0,3];
[0,0,2] -> [0,2];
[0,0,3] -> [0,3];
[1,0] -> [0,1];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0239389999999 true true

[] -> [];
[0,3,1] -> [0,1,3];
[3,0,2] -> [0,2,3];
[2,2,3] -> [2,3];
[0,1,0] -> [0,1];
[1] -> [1];
[1,2,1] -> [1,2];
[1,0] -> [0,1];
[0] -> [0];
[2,0,3] -> [0,2,3];
[2,1] -> [1,2];
[0,3] -> [0,3];
[2,0] -> [0,2];
[0,1,2] -> [0,1,2];
[3,0] -> [0,3];
[2,3] -> [2,3];
[0,0,1] -> [0,1];
[2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024437 true true

[1,1] -> [1];
[] -> [];
[1,0] -> [0,1];
[2] -> [2];
[0,2,1] -> [0,1,2];
[3] -> [3];
[1,2,3] -> [1,2,3];
[0,1,1] -> [0,1];
[0,1] -> [0,1];
[0,2] -> [0,2];
[3,1] -> [1,3];
[1] -> [1];
[3,3,3] -> [3];
[0,0,1] -> [0,1];
[2,0] -> [0,2];
[0,0,3] -> [0,3];
[1,1,0] -> [0,1];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0244110000001 true true

[1,2,3] -> [1,2,3];
[0,2] -> [0,2];
[0,1] -> [0,1];
[] -> [];
[0,3,0] -> [0,3];
[2,1] -> [1,2];
[1] -> [1];
[0,0] -> [0];
[2,3,3] -> [2,3];
[0] -> [0];
[2,1,2] -> [1,2];
[2,2] -> [2];
[2,1,3] -> [1,2,3];
[2] -> [2];
[3] -> [3];
[1,1,1] -> [1];
[2,3] -> [2,3];
[3,3,2] -> [2,3];
[3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.02448 true true

[3,2,3] -> [2,3];
[2,0,0] -> [0,2];
[0,2] -> [0,2];
[1] -> [1];
[3,0] -> [0,3];
[3,2] -> [2,3];
[0,0,0] -> [0];
[] -> [];
[3,0,3] -> [0,3];
[2,1] -> [1,2];
[2,0,1] -> [0,1,2];
[3,3,1] -> [1,3];
[3] -> [3];
[1,2] -> [1,2];
[3,0,0] -> [0,3];
[2] -> [2];
[2,1,3] -> [1,2,3];
[2,3,3] -> [2,3];
[3,2,0] -> [0,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.025525 true true

[2,0,0] -> [0,2];
[3,2] -> [2,3];
[1,2,3] -> [1,2,3];
[3,3] -> [3];
[1,1] -> [1];
[3,0,1] -> [0,1,3];
[1,0,0] -> [0,1];
[] -> [];
[2] -> [2];
[1] -> [1];
[0] -> [0];
[1,3] -> [1,3];
[2,2,0] -> [0,2];
[1,0,1] -> [0,1];
[2,3] -> [2,3];
[2,0,2] -> [0,2];
[2,2] -> [2];
[1,1,2] -> [1,2];
[0,1,3] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.025457 true true

[0,2] -> [0,2];
[0,0] -> [0];
[1,3,1] -> [1,3];
[3,3] -> [3];
[] -> [];
[3] -> [3];
[2,0] -> [0,2];
[0,1,3] -> [0,1,3];
[2] -> [2];
[1,0,0] -> [0,1];
[1] -> [1];
[3,2,0] -> [0,2,3];
[0,3] -> [0,3];
[1,1] -> [1];
[0,1] -> [0,1];
[3,2] -> [2,3];
[1,2,3] -> [1,2,3];
[3,0] -> [0,3];
[3,0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0252760000001 true true

[] -> [];
[2,0,3] -> [0,2,3];
[0,0] -> [0];
[3,3,0] -> [0,3];
[0] -> [0];
[0,2,1] -> [0,1,2];
[0,2,2] -> [0,2];
[2,1,3] -> [1,2,3];
[2] -> [2];
[0,1,2] -> [0,1,2];
[0,1] -> [0,1];
[2,2] -> [2];
[3,1] -> [1,3];
[2,1] -> [1,2];
[2,3] -> [2,3];
[2,0] -> [0,2];
[0,3] -> [0,3];
[1,1] -> [1];
[3] -> [3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0250900000001 true true

[1,3,3] -> [1,3];
[1,1] -> [1];
[0,3] -> [0,3];
[] -> [];
[0] -> [0];
[0,0] -> [0];
[2,0] -> [0,2];
[3] -> [3];
[2] -> [2];
[3,3,2] -> [2,3];
[1,1,3] -> [1,3];
[0,0,1] -> [0,1];
[0,2,2] -> [0,2];
[2,3] -> [2,3];
[1] -> [1];
[0,3,3] -> [0,3];
[2,2,1] -> [1,2];
[3,1] -> [1,3];
[1,2,0] -> [0,1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0254339999999 true true

[1,3] -> [1,3];
[0] -> [0];
[2] -> [2];
[0,2] -> [0,2];
[0,0,3] -> [0,3];
[1] -> [1];
[] -> [];
[0,0,0] -> [0];
[3] -> [3];
[1,2] -> [1,2];
[3,3] -> [3];
[3,3,3] -> [3];
[2,2] -> [2];
[0,1,0] -> [0,1];
[2,1] -> [1,2];
[3,1] -> [1,3];
[1,0,2] -> [0,1,2];
[2,1,0] -> [0,1,2];
[2,0] -> [0,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0251040000001 true true

[0] -> [0];
[2,1,0] -> [0,1,2];
[] -> [];
[3] -> [3];
[1,0] -> [0,1];
[1] -> [1];
[3,3] -> [3];
[3,3,0] -> [0,3];
[2,3,0] -> [0,2,3];
[2,2] -> [2];
[2] -> [2];
[2,0] -> [0,2];
[2,2,0] -> [0,2];
[0,2] -> [0,2];
[3,1,1] -> [1,3];
[2,1] -> [1,2];
[1,1] -> [1];
[0,1] -> [0,1];
[0,0] -> [0];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.02504 true true

[] -> [];
[1,2,3] -> [1,2,3];
[3,3,2] -> [2,3];
[2,3,1] -> [1,2,3];
[2,2] -> [2];
[2] -> [2];
[1,3,3] -> [1,3];
[3,1] -> [1,3];
[2,0,1] -> [0,1,2];
[1,3] -> [1,3];
[1,1] -> [1];
[2,0,3] -> [0,2,3];
[0,0] -> [0];
[3,3,1] -> [1,3];
[3,3,0] -> [0,3];
[1] -> [1];
[0,1,2] -> [0,1,2];
[3,0] -> [0,3];
[2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024958 true true

[] -> [];
[3,2,0] -> [0,2,3];
[2,3,2] -> [2,3];
[3,2] -> [2,3];
[1] -> [1];
[0] -> [0];
[1,3,3] -> [1,3];
[1,1,3] -> [1,3];
[1,0] -> [0,1];
[1,0,2] -> [0,1,2];
[0,1] -> [0,1];
[1,1] -> [1];
[1,3] -> [1,3];
[0,0] -> [0];
[2,2] -> [2];
[0,3,1] -> [0,1,3];
[3,3] -> [3];
[2] -> [2];
[2,1,3] -> [1,2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024592 true true

[2] -> [2];
[2,2] -> [2];
[0,2,3] -> [0,2,3];
[] -> [];
[0,0] -> [0];
[3,1,2] -> [1,2,3];
[0,1] -> [0,1];
[0,3,2] -> [0,2,3];
[2,3] -> [2,3];
[1,0,3] -> [0,1,3];
[1] -> [1];
[1,1,3] -> [1,3];
[3] -> [3];
[1,1] -> [1];
[2,0] -> [0,2];
[0] -> [0];
[3,1,1] -> [1,3];
[2,1,0] -> [0,1,2];
[0,0,2] -> [0,2];
[3,1,0] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.026151 true true

[2] -> [2];
[] -> [];
[1,3,0] -> [0,1,3];
[2,3] -> [2,3];
[2,3,0] -> [0,2,3];
[0,1] -> [0,1];
[3] -> [3];
[2,1] -> [1,2];
[0,1,3] -> [0,1,3];
[0] -> [0];
[2,2,1] -> [1,2];
[2,2] -> [2];
[3,3,1] -> [1,3];
[3,3] -> [3];
[2,0] -> [0,2];
[1] -> [1];
[2,0,2] -> [0,2];
[1,1,0] -> [0,1];
[2,3,3] -> [2,3];
[3,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.02604 true true

[0,3,2] -> [0,2,3];
[0] -> [0];
[1,0] -> [0,1];
[2,1] -> [1,2];
[0,1,3] -> [0,1,3];
[1] -> [1];
[0,2] -> [0,2];
[2,3,2] -> [2,3];
[] -> [];
[2,2,1] -> [1,2];
[2] -> [2];
[0,1,1] -> [0,1];
[2,1,0] -> [0,1,2];
[1,2,3] -> [1,2,3];
[2,1,3] -> [1,2,3];
[2,3,3] -> [2,3];
[1,3,3] -> [1,3];
[0,3] -> [0,3];
[0,1,2] -> [0,1,2];
[3,3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0255050000001 true true

[] -> [];
[1] -> [1];
[0,3,2] -> [0,2,3];
[2,3,1] -> [1,2,3];
[0] -> [0];
[0,0,1] -> [0,1];
[0,1] -> [0,1];
[3,1] -> [1,3];
[3,0,2] -> [0,2,3];
[1,0] -> [0,1];
[1,3] -> [1,3];
[0,2,0] -> [0,2];
[2] -> [2];
[0,1,1] -> [0,1];
[1,1] -> [1];
[1,2,1] -> [1,2];
[2,3] -> [2,3];
[3] -> [3];
[2,3,0] -> [0,2,3];
[0,3] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0246529999999 true true

[1,2,1] -> [1,2];
[] -> [];
[3,2] -> [2,3];
[2] -> [2];
[2,3,0] -> [0,2,3];
[1,1,1] -> [1];
[3] -> [3];
[3,0] -> [0,3];
[1] -> [1];
[3,2,3] -> [2,3];
[3,1] -> [1,3];
[1,0,0] -> [0,1];
[1,2] -> [1,2];
[2,0,1] -> [0,1,2];
[0,2] -> [0,2];
[1,0] -> [0,1];
[1,1] -> [1];
[3,1,3] -> [1,3];
[2,3,1] -> [1,2,3];
[1,2,0] -> [0,1,2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0266240000001 true true

[1,3] -> [1,3];
[0,1] -> [0,1];
[2,2,0] -> [0,2];
[0,0] -> [0];
[] -> [];
[1,1] -> [1];
[3] -> [3];
[1] -> [1];
[0] -> [0];
[3,0,1] -> [0,1,3];
[0,2] -> [0,2];
[0,3] -> [0,3];
[1,2] -> [1,2];
[2,1,0] -> [0,1,2];
[2,0] -> [0,2];
[3,0] -> [0,3];
[2] -> [2];
[0,2,2] -> [0,2];
[1,1,2] -> [1,2];
[0,3,1] -> [0,1,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0246689999999 true true

[] -> [];
[2] -> [2];
[0] -> [0];
[1,2,3] -> [1,2,3];
[1] -> [1];
[3,2,3] -> [2,3];
[3] -> [3];
[3,0,1] -> [0,1,3];
[2,1,2] -> [1,2];
[0,2,3] -> [0,2,3];
[2,2] -> [2];
[2,2,1] -> [1,2];
[3,1,1] -> [1,3];
[2,1,1] -> [1,2];
[1,0] -> [0,1];
[1,0,0] -> [0,1];
[3,0,0] -> [0,3];
[1,1] -> [1];
[0,0] -> [0];
[2,3,2] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.025312 true true

[2,1,1] -> [1,2];
[3,1,1] -> [1,3];
[1] -> [1];
[3,1,3] -> [1,3];
[0,2] -> [0,2];
[] -> [];
[3,1] -> [1,3];
[1,3,2] -> [1,2,3];
[2,2] -> [2];
[0,3,2] -> [0,2,3];
[0] -> [0];
[2] -> [2];
[1,2,1] -> [1,2];
[1,2,2] -> [1,2];
[0,1,0] -> [0,1];
[3] -> [3];
[0,0,2] -> [0,2];
[1,3,3] -> [1,3];
[2,3] -> [2,3];
[3,0,0] -> [0,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.026464 true true

[] -> [];
[1] -> [1];
[3,0] -> [0,3];
[2] -> [2];
[3] -> [3];
[0] -> [0];
[2,1,2] -> [1,2];
[1,3] -> [1,3];
[0,0,2] -> [0,2];
[1,0,1] -> [0,1];
[1,1] -> [1];
[1,2,2] -> [1,2];
[0,2,0] -> [0,2];
[0,0,3] -> [0,3];
[0,3,2] -> [0,2,3];
[1,2] -> [1,2];
[1,1,3] -> [1,3];
[2,0] -> [0,2];
[2,0,3] -> [0,2,3];
[2,2] -> [2];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0260639999999 true true

[3,0] -> [0,3];
[0,0,0] -> [0];
[] -> [];
[2] -> [2];
[3] -> [3];
[1,0,3] -> [0,1,3];
[1,1] -> [1];
[3,1] -> [1,3];
[0] -> [0];
[1] -> [1];
[3,1,2] -> [1,2,3];
[1,2] -> [1,2];
[2,0] -> [0,2];
[0,2] -> [0,2];
[2,2,0] -> [0,2];
[0,2,2] -> [0,2];
[3,2] -> [2,3];
[3,0,1] -> [0,1,3];
[0,3,1] -> [0,1,3];
[2,3] -> [2,3];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.024623 true true

