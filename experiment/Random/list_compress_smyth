list_compress
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00276899999994 false false

[3,1] -> [3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00321099999996 false false

[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00303099999996 false false

[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00271900000007 false false

[1,3] -> [1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.003514 false false

[2,2,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00316599999996 false false

[2,0,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00315999999998 false false

[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00279 false false

[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00300900000002 false false

[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0027869999999 false false

[0,2,1] -> [0,2,1];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0029199999999 false false

[0,1,1] -> [0,1];
[1,1,0] -> [1,0];

=================================
NOSOL

[3] -> [3];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0028749999999 false false

[3] -> [3];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00272399999994 false false

[2] -> [2];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00308599999994 false false

[] -> [];
[3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00445599999989 false false

[] -> [];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00276299999996 false false

[2] -> [2];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00294299999996 false false

[] -> [];
[0,1] -> [0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00268499999993 false false

[0] -> [0];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00289300000009 false false

[3,1,3] -> [3,1,3];
[0,1,2] -> [0,1,2];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0030119999999 false false

[1,1,2] -> [1,2];
[3,0] -> [3,0];
[2,2,2] -> [2];

=================================
NOSOL

[2,1] -> [2,1];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00285499999995 false false

[2] -> [2];
[1,1] -> [1];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00442999999996 false false

[2] -> [2];
[3,2] -> [3,2];
[0,2,3] -> [0,2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00314000000003 false false

[1,1] -> [1];
[2] -> [2];
[0] -> [0];

=================================
NOSOL

[3,0,1] -> [3,0,1];
[3,2,1] -> [3,2,1];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00314299999991 false false

[0] -> [0];
[1,1,1] -> [1];
[2,1,1] -> [2,1];

=================================
NOSOL

[3,1,2] -> [3,1,2];
[2] -> [2];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00308199999995 false false

[] -> [];
[1,1,2] -> [1,2];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y1))

        Cons y2 -> 
          Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0137609999999 false false

[0] -> [0];
[] -> [];
[2] -> [2];
[3,0,2] -> [3,0,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00286200000005 false false

[3] -> [3];
[0,0] -> [0];
[2] -> [2];
[1,1] -> [1];

=================================
NOSOL

[1] -> [1];
[2] -> [2];
[2,0,3] -> [2,0,3];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00282799999991 false false

[3] -> [3];
[0,0] -> [0];
[0] -> [0];
[1] -> [1];

=================================
NOSOL

[3,2] -> [3,2];
[1,2,3] -> [1,2,3];
[] -> [];
[2,1,3] -> [2,1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00277400000004 false false

[] -> [];
[0,2,3] -> [0,2,3];
[0,3] -> [0,3];
[2,3] -> [2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00278299999991 false false

[0,0] -> [0];
[3,3,3] -> [3];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00448499999993 false false

[1,3,2] -> [1,3,2];
[2,1,1] -> [2,1];
[] -> [];
[2,1] -> [2,1];

=================================
NOSOL

[1] -> [1];
[3] -> [3];
[1,2,2] -> [1,2];
[1,1] -> [1];

=================================
NOSOL

[] -> [];
[2] -> [2];
[1,2,3] -> [1,2,3];
[3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              ??

            EQ y3 -> 
              [3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.084537 false false

[] -> [];
[2,0,2] -> [2,0,2];
[2,1,2] -> [2,1,2];
[0,1] -> [0,1];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00276299999996 false false

[2,3] -> [2,3];
[3] -> [3];
[] -> [];
[1,0] -> [1,0];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00272300000006 false false

[3] -> [3];
[0,1,3] -> [0,1,3];
[1] -> [1];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00274300000001 false false

[0,2] -> [0,2];
[0,3,1] -> [0,3,1];
[1,1] -> [1];
[] -> [];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          xs

        S y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0189499999999 false false

[3,3] -> [3];
[] -> [];
[3,2,2] -> [3,2];
[3,0,0] -> [3,0];
[2,0] -> [2,0];

=================================
NOSOL

[2] -> [2];
[0,2] -> [0,2];
[3,2,1] -> [3,2,1];
[0,3] -> [0,3];
[1,3,1] -> [1,3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00293699999997 false false

[] -> [];
[1] -> [1];
[1,1,2] -> [1,2];
[3,0,3] -> [3,0,3];
[3,1,0] -> [3,1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.211486 false false

[2,3,0] -> [2,3,0];
[] -> [];
[2,2,0] -> [2,0];
[0,1,1] -> [0,1];
[1,2] -> [1,2];

=================================
NOSOL

[1,1,1] -> [1];
[] -> [];
[2] -> [2];
[3,2] -> [3,2];
[0,3,0] -> [0,3,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              [3, #2.1 y2]

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              Cons
                ( 3
                , Cons (2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.596896 false false

[0,1] -> [0,1];
[2,1] -> [2,1];
[1,0,3] -> [1,0,3];
[2,0] -> [2,0];
[3,2,2] -> [3,2];

=================================
NOSOL

[0,2,2] -> [0,2];
[0] -> [0];
[0,1,3] -> [0,1,3];
[1,3] -> [1,3];
[] -> [];
[2] -> [2];

=================================
None
[] -> [];
[1] -> [1];
[2] -> [2];
[3,1] -> [3,1];
[1,2,2] -> [1,2];
[1,3,2] -> [1,3,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y2) (S (#2.1 y1)) of
            LT y3 -> 
              [3, #2.1 y2]

            GT y3 -> 
              [1, S (S (#2.1 y1)), S (#2.1 y1)]

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y2) (S (#2.1 y1)) of
            LT y3 -> 
              Cons
                ( 3
                , Cons (1, list_compress (#2.2 y2))
                )

            GT y3 -> 
              [1, S (S (#2.1 y1)), S (#2.1 y1)]

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.591859 false false

[3,0] -> [3,0];
[2,0,3] -> [2,0,3];
[1,0] -> [1,0];
[] -> [];
[0] -> [0];
[1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.002792 false false

[] -> [];
[2,1,0] -> [2,1,0];
[2,0,0] -> [2,0];
[3,0] -> [3,0];
[2,2,3] -> [2,3];
[1,1,0] -> [1,0];

=================================
NOSOL

[3] -> [3];
[0] -> [0];
[1,2,1] -> [1,2,1];
[] -> [];
[1,1,3] -> [1,3];
[1,0,3] -> [1,0,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [3]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, Cons (2, #2.2 y2))

            GT y3 -> 
              [1, 0, S (S (#2.1 y1))]

            EQ y3 -> 
              [1, 3] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.84259 false false

[3] -> [3];
[2,3] -> [2,3];
[3,2,0] -> [3,2,0];
[2,3,3] -> [2,3];
[0] -> [0];
[2] -> [2];

=================================
NOSOL

[] -> [];
[1,0] -> [1,0];
[1] -> [1];
[2,3] -> [2,3];
[0,3] -> [0,3];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00294000000008 false false

[2,2] -> [2];
[] -> [];
[1] -> [1];
[1,0] -> [1,0];
[2,1,2] -> [2,1,2];
[0,1] -> [0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y1)

            GT y3 -> 
              Cons (S (#2.1 y2), #2.2 y1)

            EQ y3 -> 
              [2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (S (#2.1 y2), #2.2 y1)

            EQ y3 -> 
              [2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.818672 false false

[] -> [];
[3,2,3] -> [3,2,3];
[1,1,3] -> [1,3];
[1,1,0] -> [1,0];
[2] -> [2];
[1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.285132 false false

[3] -> [3];
[2] -> [2];
[0] -> [0];
[2,2,3] -> [2,3];
[3,3] -> [3];
[2,1,0] -> [2,1,0];

=================================
NOSOL

[0,3] -> [0,3];
[0,2] -> [0,2];
[2,1,3] -> [2,1,3];
[1,3] -> [1,3];
[0,2,0] -> [0,2,0];
[] -> [];
[0,1,1] -> [0,1];

=================================
NOSOL

[0,2] -> [0,2];
[1,1] -> [1];
[2,3] -> [2,3];
[3,0] -> [3,0];
[1] -> [1];
[] -> [];
[3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              [3, 0]

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              [3, 0]

            EQ y3 -> 
              [1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.218722 false false

[1,0] -> [1,0];
[2,2,3] -> [2,3];
[2,0] -> [2,0];
[1] -> [1];
[] -> [];
[1,3,3] -> [1,3];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              [#2.1 y1, 0]

            EQ y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [2, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.508788 false false

[2,2] -> [2];
[1,0] -> [1,0];
[3,2,3] -> [3,2,3];
[0] -> [0];
[3,0] -> [3,0];
[3] -> [3];
[0,1,0] -> [0,1,0];

=================================
NOSOL

[1,3] -> [1,3];
[2] -> [2];
[1] -> [1];
[2,1] -> [2,1];
[3] -> [3];
[2,0,1] -> [2,0,1];
[1,1,0] -> [1,0];

=================================
NOSOL

[3] -> [3];
[1] -> [1];
[2] -> [2];
[] -> [];
[3,1,0] -> [3,1,0];
[0,3,0] -> [0,3,0];
[2,1] -> [2,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00285499999995 false false

[3] -> [3];
[1,2,1] -> [1,2,1];
[2] -> [2];
[] -> [];
[1,3,0] -> [1,3,0];
[0,0,3] -> [0,3];
[2,2,0] -> [2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, #2.2 y1)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.740799 false false

[0,2] -> [0,2];
[1,0,3] -> [1,0,3];
[2,1] -> [2,1];
[2] -> [2];
[3,0] -> [3,0];
[3,1] -> [3,1];
[3,2] -> [3,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00326599999994 false false

[0] -> [0];
[] -> [];
[2,2,3] -> [2,3];
[2] -> [2];
[2,2] -> [2];
[3] -> [3];
[1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (2, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (2, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.033078 false false

[0,2,2] -> [0,2];
[0,3] -> [0,3];
[0] -> [0];
[2,0] -> [2,0];
[3] -> [3];
[2] -> [2];
[0,2] -> [0,2];

=================================
NOSOL

[2,2,2] -> [2];
[1,0,0] -> [1,0];
[2] -> [2];
[3,2] -> [3,2];
[2,1,2] -> [2,1,2];
[0,3] -> [0,3];
[1] -> [1];
[3,1] -> [3,1];

=================================
NOSOL

[3] -> [3];
[3,1,3] -> [3,1,3];
[] -> [];
[2,2] -> [2];
[1] -> [1];
[0] -> [0];
[2,0,3] -> [2,0,3];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( S (S (#2.1 y2))
                , Cons (#2.1 y2, #2.2 y2)
                )

            EQ y3 -> 
              [2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( S (S (#2.1 y2))
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [2] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.581236 false false

[3,1,2] -> [3,1,2];
[3] -> [3];
[] -> [];
[0] -> [0];
[3,3,3] -> [3];
[0,2,3] -> [0,2,3];
[2,0] -> [2,0];
[1] -> [1];

=================================
None
[1,2,3] -> [1,2,3];
[] -> [];
[0] -> [0];
[3,3] -> [3];
[1,3] -> [1,3];
[1,0,2] -> [1,0,2];
[1,2,2] -> [1,2];
[0,2] -> [0,2];

=================================
None
[0] -> [0];
[2] -> [2];
[2,1] -> [2,1];
[] -> [];
[0,0] -> [0];
[1,1,1] -> [1];
[2,2] -> [2];
[3,2,0] -> [3,2,0];

=================================
None
[2,1,0] -> [2,1,0];
[1] -> [1];
[2,1] -> [2,1];
[1,2] -> [1,2];
[2] -> [2];
[] -> [];
[1,0] -> [1,0];
[0,1] -> [0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00277299999993 false false

[1] -> [1];
[0,3,1] -> [0,3,1];
[0,3] -> [0,3];
[0,2,0] -> [0,2,0];
[3,2,2] -> [3,2];
[0,3,2] -> [0,3,2];
[2,1] -> [2,1];
[0] -> [0];

=================================
NOSOL

[0,0] -> [0];
[0] -> [0];
[1,3,2] -> [1,3,2];
[] -> [];
[1,0,0] -> [1,0];
[3] -> [3];
[1,0] -> [1,0];
[3,0] -> [3,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.023396 false false

[2,0,1] -> [2,0,1];
[] -> [];
[0] -> [0];
[1,2,1] -> [1,2,1];
[1,1,1] -> [1];
[3] -> [3];
[2,2] -> [2];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (1, Cons (#2.1 y2, #2.2 y2))

            GT y3 -> 
              Cons (2, Cons (0, #2.2 y2))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (2, Cons (0, #2.2 y2))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.200728 false false

[] -> [];
[1,1,0] -> [1,0];
[1,0,1] -> [1,0,1];
[3,1] -> [3,1];
[3] -> [3];
[1] -> [1];
[3,1,1] -> [3,1];
[3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (S (#2.1 y2)) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y2)

            GT y3 -> 
              [S (S (#2.1 y2)), #2.1 y2]

            EQ y3 -> 
              Cons (1, Cons (0, #2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (S (#2.1 y2)) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y2)

            GT y3 -> 
              [S (S (#2.1 y2)), #2.1 y2]

            EQ y3 -> 
              Cons
                ( 1
                , Cons (0, list_compress (#2.2 y2))
                ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.66231 false false

[3] -> [3];
[0] -> [0];
[3,1,2] -> [3,1,2];
[2,1,2] -> [2,1,2];
[2,3,2] -> [2,3,2];
[2,0,1] -> [2,0,1];
[] -> [];
[3,3,0] -> [3,0];
[0,3,0] -> [0,3,0];

=================================
None
[2] -> [2];
[1,3] -> [1,3];
[0,2,3] -> [0,2,3];
[3,1,1] -> [3,1];
[1,1,0] -> [1,0];
[] -> [];
[1] -> [1];
[2,0,2] -> [2,0,2];
[2,2,3] -> [2,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.771175 false false

[2] -> [2];
[] -> [];
[1] -> [1];
[2,2,0] -> [2,0];
[0] -> [0];
[2,1,2] -> [2,1,2];
[3] -> [3];
[2,3] -> [2,3];
[3,0] -> [3,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [2, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, Cons (#2.1 y2, #2.2 y2))

            EQ y3 -> 
              [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            GT y3 -> 
              Cons (#2.1 y1, Cons (#2.1 y2, #2.2 y2))

            EQ y3 -> 
              [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.936146 false false

[0,0] -> [0];
[0] -> [0];
[0,2,1] -> [0,2,1];
[] -> [];
[2,3,2] -> [2,3,2];
[3] -> [3];
[1,0] -> [1,0];
[1,1] -> [1];
[3,1,0] -> [3,1,0];

=================================
None
[0,3] -> [0,3];
[1,3] -> [1,3];
[] -> [];
[1,0] -> [1,0];
[0,0,3] -> [0,3];
[2,2,0] -> [2,0];
[2,3,2] -> [2,3,2];
[2,1,0] -> [2,1,0];
[2,3] -> [2,3];

=================================
NOSOL

[] -> [];
[1,0] -> [1,0];
[2,0] -> [2,0];
[1] -> [1];
[1,1] -> [1];
[0,1,0] -> [0,1,0];
[1,1,3] -> [1,3];
[2] -> [2];
[0,1] -> [0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y1)

            GT y3 -> 
              [#2.1 y1, 0]

            EQ y3 -> 
              Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y1)

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              Cons (1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.714291 false false

[1,2] -> [1,2];
[] -> [];
[3,0,1] -> [3,0,1];
[0,0] -> [0];
[1,1,3] -> [1,3];
[2,2] -> [2];
[1,1] -> [1];
[1] -> [1];
[0,0,0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons (3, Cons (0, #2.2 y2))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons (3, Cons (0, #2.2 y2))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.544856 false false

[3,3,2] -> [3,2];
[2] -> [2];
[3] -> [3];
[] -> [];
[3,2,1] -> [3,2,1];
[0,0,2] -> [0,2];
[2,1,1] -> [2,1];
[2,0,2] -> [2,0,2];
[3,2,0] -> [3,2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            ( #2.1 y1
            , Nil
                (case #2.1 y1 of
                  Z y3 -> 
                    ()

                  S y3 -> 
                    ())
            )

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            ( #2.1 y1
            , Nil
                (case #2.1 y1 of
                  Z y3 -> 
                    ()

                  S y3 -> 
                    ())
            )

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.408539 false false

[2] -> [2];
[3,1,0] -> [3,1,0];
[] -> [];
[0] -> [0];
[1,2] -> [1,2];
[2,1,1] -> [2,1];
[3,0,2] -> [3,0,2];
[3,3] -> [3];
[3,0] -> [3,0];

=================================
None
[1,0] -> [1,0];
[] -> [];
[1,0,1] -> [1,0,1];
[2,0,2] -> [2,0,2];
[1,3,3] -> [1,3];
[2,3,3] -> [2,3];
[2] -> [2];
[3] -> [3];
[1,1,2] -> [1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y2)

            GT y3 -> 
              Cons (#2.1 y1, Cons (0, #2.2 y2))

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y2)

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (0, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [1, S (#2.1 y1)] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.630346 false false

[2,0,3] -> [2,0,3];
[2,3] -> [2,3];
[1,0,0] -> [1,0];
[] -> [];
[1] -> [1];
[1,1,0] -> [1,0];
[0,2,2] -> [0,2];
[2] -> [2];
[0] -> [0];
[3] -> [3];

=================================
None
[3,3,0] -> [3,0];
[3,1,1] -> [3,1];
[] -> [];
[1,2] -> [1,2];
[1] -> [1];
[2] -> [2];
[0] -> [0];
[3,2,3] -> [3,2,3];
[3] -> [3];
[1,2,1] -> [1,2,1];

=================================
None
[1] -> [1];
[1,2] -> [1,2];
[3] -> [3];
[3,1,1] -> [3,1];
[0] -> [0];
[3,3,1] -> [3,1];
[2,3,3] -> [2,3];
[2,3] -> [2,3];
[0,1] -> [0,1];
[] -> [];

=================================
None
[1,2,3] -> [1,2,3];
[3,1,1] -> [3,1];
[3] -> [3];
[1] -> [1];
[3,2,1] -> [3,2,1];
[3,0,0] -> [3,0];
[2,1,3] -> [2,1,3];
[] -> [];
[1,3,2] -> [1,3,2];
[0,3,1] -> [0,3,1];

=================================
None
[3,3] -> [3];
[] -> [];
[2] -> [2];
[0] -> [0];
[0,1,0] -> [0,1,0];
[3] -> [3];
[1,0] -> [1,0];
[1,1,2] -> [1,2];
[1,2] -> [1,2];
[3,3,3] -> [3];

=================================
None
[] -> [];
[2,0] -> [2,0];
[1,2,0] -> [1,2,0];
[3] -> [3];
[1,2] -> [1,2];
[1] -> [1];
[3,1,3] -> [3,1,3];
[2] -> [2];
[0,0] -> [0];
[0,3,1] -> [0,3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [#2.1 y1]

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              Cons (0, Cons (#2.1 y3, #2.2 y3)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [#2.1 y1]

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              Cons (0, Cons (#2.1 y3, #2.2 y3)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.865312 false false

[1,3,2] -> [1,3,2];
[3,1,1] -> [3,1];
[] -> [];
[0] -> [0];
[3,1] -> [3,1];
[1] -> [1];
[2,0] -> [2,0];
[2,3,3] -> [2,3];
[3] -> [3];
[2,3,2] -> [2,3,2];

=================================
None
[] -> [];
[2] -> [2];
[3,1,1] -> [3,1];
[1] -> [1];
[3] -> [3];
[0] -> [0];
[3,0] -> [3,0];
[0,3] -> [0,3];
[1,0,3] -> [1,0,3];
[1,1,2] -> [1,2];

=================================
None
[3,1] -> [3,1];
[1,3] -> [1,3];
[0,1,1] -> [0,1];
[] -> [];
[1,2] -> [1,2];
[2] -> [2];
[0,1] -> [0,1];
[1,0,3] -> [1,0,3];
[3] -> [3];
[1,0,1] -> [1,0,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0, 1]

        S y2 -> 
          xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0423969999999 false false

[2,2,3] -> [2,3];
[2,0,1] -> [2,0,1];
[1,3,2] -> [1,3,2];
[3,3,1] -> [3,1];
[] -> [];
[1,2,3] -> [1,2,3];
[1] -> [1];
[0,2,1] -> [0,2,1];
[2] -> [2];
[3,1] -> [3,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
16.073747 false false

[2,3] -> [2,3];
[3,2,0] -> [3,2,0];
[0,1] -> [0,1];
[2,1] -> [2,1];
[1,2] -> [1,2];
[] -> [];
[2,0] -> [2,0];
[0,1,3] -> [0,1,3];
[0,2] -> [0,2];
[2,3,3] -> [2,3];
[1] -> [1];

=================================
None
[] -> [];
[3,2] -> [3,2];
[3,2,2] -> [3,2];
[3,0] -> [3,0];
[2,3] -> [2,3];
[0,0,0] -> [0];
[2] -> [2];
[1,2] -> [1,2];
[0,3] -> [0,3];
[1] -> [1];
[2,1] -> [2,1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.873309 false false

[] -> [];
[0] -> [0];
[3,1,1] -> [3,1];
[1] -> [1];
[3,1,3] -> [3,1,3];
[2,3] -> [2,3];
[0,3] -> [0,3];
[2,3,0] -> [2,3,0];
[0,2,3] -> [0,2,3];
[0,0] -> [0];
[2,1,0] -> [2,1,0];

=================================
None
[3,3] -> [3];
[] -> [];
[3] -> [3];
[1] -> [1];
[3,2] -> [3,2];
[1,3] -> [1,3];
[0,2] -> [0,2];
[3,3,2] -> [3,2];
[2,1] -> [2,1];
[2] -> [2];
[3,0,0] -> [3,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
14.404589 false false

[3,1] -> [3,1];
[1,3] -> [1,3];
[2] -> [2];
[] -> [];
[1,2] -> [1,2];
[3,1,3] -> [3,1,3];
[0,3] -> [0,3];
[0] -> [0];
[3] -> [3];
[1,1,0] -> [1,0];
[1] -> [1];

=================================
None
[3] -> [3];
[2,2,3] -> [2,3];
[1] -> [1];
[] -> [];
[3,0,3] -> [3,0,3];
[3,2] -> [3,2];
[1,3,1] -> [1,3,1];
[2,1] -> [2,1];
[2] -> [2];
[1,1,3] -> [1,3];
[3,3,3] -> [3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.745544 false false

[3] -> [3];
[] -> [];
[2,3] -> [2,3];
[1] -> [1];
[3,2,0] -> [3,2,0];
[2] -> [2];
[0,0] -> [0];
[0,2] -> [0,2];
[3,3] -> [3];
[3,3,2] -> [3,2];
[1,3,3] -> [1,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (S (#2.1 y2), #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (S (#2.1 y2), #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
10.630357 false false

[3,0,2] -> [3,0,2];
[] -> [];
[0,3,2] -> [0,3,2];
[0,3] -> [0,3];
[0,0] -> [0];
[2] -> [2];
[2,3] -> [2,3];
[3,1,1] -> [3,1];
[0] -> [0];
[0,1] -> [0,1];
[3] -> [3];

=================================
None
[0,1,1] -> [0,1];
[1] -> [1];
[] -> [];
[0,2,0] -> [0,2,0];
[3] -> [3];
[1,2,3] -> [1,2,3];
[0] -> [0];
[3,3] -> [3];
[1,3,2] -> [1,3,2];
[0,1,2] -> [0,1,2];
[3,0] -> [3,0];

=================================
None
[1] -> [1];
[] -> [];
[0,0] -> [0];
[3,2] -> [3,2];
[3,0] -> [3,0];
[2,3] -> [2,3];
[3] -> [3];
[1,2] -> [1,2];
[1,0,2] -> [1,0,2];
[0,3,3] -> [0,3];
[0] -> [0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [#2.1 y1]

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            Cons y3 -> 
              Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.250336 false false

[3,1,2] -> [3,1,2];
[] -> [];
[0] -> [0];
[2] -> [2];
[0,0] -> [0];
[3] -> [3];
[1] -> [1];
[2,0] -> [2,0];
[3,1] -> [3,1];
[1,3] -> [1,3];
[2,0,0] -> [2,0];
[1,0,0] -> [1,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , case #2.1 y1 of
            Z y2 -> 
              []

            S y2 -> 
              list_compress (#2.2 y1)
        ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.027431 false false

[2,2] -> [2];
[] -> [];
[1] -> [1];
[0,1,1] -> [0,1];
[1,0,3] -> [1,0,3];
[0] -> [0];
[2] -> [2];
[0,0] -> [0];
[0,0,1] -> [0,1];
[1,1] -> [1];
[3] -> [3];
[0,1] -> [0,1];

=================================
None
[] -> [];
[1,1,3] -> [1,3];
[0] -> [0];
[0,2,3] -> [0,2,3];
[2] -> [2];
[2,0] -> [2,0];
[0,2,2] -> [0,2];
[1,3] -> [1,3];
[2,3] -> [2,3];
[3,3,1] -> [3,1];
[3] -> [3];
[1] -> [1];

=================================
None
[1,1,2] -> [1,2];
[3,2,2] -> [3,2];
[1] -> [1];
[0,1] -> [0,1];
[2] -> [2];
[] -> [];
[3] -> [3];
[1,3] -> [1,3];
[3,2,0] -> [3,2,0];
[1,0,0] -> [1,0];
[3,1,2] -> [3,1,2];
[0] -> [0];

=================================
None
[3,1] -> [3,1];
[0,2] -> [0,2];
[] -> [];
[1] -> [1];
[0] -> [0];
[3] -> [3];
[1,1] -> [1];
[1,0,2] -> [1,0,2];
[2,2] -> [2];
[2] -> [2];
[1,0,3] -> [1,0,3];
[2,1,2] -> [2,1,2];

=================================
None
[] -> [];
[3,2] -> [3,2];
[1] -> [1];
[2] -> [2];
[0,3,0] -> [0,3,0];
[0,0] -> [0];
[1,0,1] -> [1,0,1];
[1,3] -> [1,3];
[1,2,2] -> [1,2];
[0,2,3] -> [0,2,3];
[2,0] -> [2,0];
[3,0] -> [3,0];

=================================
None
[0,2] -> [0,2];
[3,0,0] -> [3,0];
[] -> [];
[3,2,2] -> [3,2];
[3,3] -> [3];
[1] -> [1];
[3,3,1] -> [3,1];
[1,1,2] -> [1,2];
[0] -> [0];
[1,2] -> [1,2];
[1,3] -> [1,3];
[2,1] -> [2,1];

=================================
None
[1] -> [1];
[1,3,0] -> [1,3,0];
[0,0] -> [0];
[3,2,1] -> [3,2,1];
[3,1] -> [3,1];
[] -> [];
[2,2] -> [2];
[1,1,3] -> [1,3];
[3,0,2] -> [3,0,2];
[3,1,3] -> [3,1,3];
[0,3] -> [0,3];
[1,2,0] -> [1,2,0];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
37.97798 false false

[0,2,1] -> [0,2,1];
[2] -> [2];
[3] -> [3];
[3,2,3] -> [3,2,3];
[] -> [];
[1] -> [1];
[0,2] -> [0,2];
[2,3,0] -> [2,3,0];
[1,0,1] -> [1,0,1];
[2,0,0] -> [2,0];
[3,1,0] -> [3,1,0];
[0] -> [0];

=================================
None
[3,1,2] -> [3,1,2];
[2,3,3] -> [2,3];
[] -> [];
[1,3] -> [1,3];
[0] -> [0];
[3,0,2] -> [3,0,2];
[2,0] -> [2,0];
[0,2] -> [0,2];
[0,3] -> [0,3];
[3,2,1] -> [3,2,1];
[2] -> [2];
[1,2,3] -> [1,2,3];

=================================
None
[0] -> [0];
[1,3,0] -> [1,3,0];
[1,0] -> [1,0];
[1,1] -> [1];
[1,2] -> [1,2];
[3,0,3] -> [3,0,3];
[3,1] -> [3,1];
[1] -> [1];
[2] -> [2];
[0,0,2] -> [0,2];
[] -> [];
[3,2,0] -> [3,2,0];
[1,1,2] -> [1,2];

=================================
None
[0,1,0] -> [0,1,0];
[2,2,0] -> [2,0];
[0,2,3] -> [0,2,3];
[3,2] -> [3,2];
[2] -> [2];
[3] -> [3];
[] -> [];
[0,2] -> [0,2];
[1] -> [1];
[2,3,0] -> [2,3,0];
[0] -> [0];
[0,0,3] -> [0,3];
[0,3,3] -> [0,3];

=================================
None
[] -> [];
[3] -> [3];
[1] -> [1];
[3,1,0] -> [3,1,0];
[0,3] -> [0,3];
[2] -> [2];
[2,3] -> [2,3];
[0,3,0] -> [0,3,0];
[0] -> [0];
[3,3,1] -> [3,1];
[1,2] -> [1,2];
[0,1,0] -> [0,1,0];
[0,2,0] -> [0,2,0];

=================================
None
[] -> [];
[2,3] -> [2,3];
[0,2,1] -> [0,2,1];
[2] -> [2];
[0] -> [0];
[2,2,3] -> [2,3];
[2,2,1] -> [2,1];
[3,1,3] -> [3,1,3];
[1,2] -> [1,2];
[1] -> [1];
[1,3] -> [1,3];
[1,3,2] -> [1,3,2];
[3,1] -> [3,1];

=================================
None
[] -> [];
[0,3] -> [0,3];
[1,2,3] -> [1,2,3];
[3,2,2] -> [3,2];
[3] -> [3];
[2] -> [2];
[0,0,2] -> [0,2];
[2,1] -> [2,1];
[0] -> [0];
[3,1] -> [3,1];
[1,1,2] -> [1,2];
[3,2] -> [3,2];
[1,1] -> [1];

=================================
None
[1,3] -> [1,3];
[2,3,0] -> [2,3,0];
[] -> [];
[0,3] -> [0,3];
[0] -> [0];
[2,1,1] -> [2,1];
[2] -> [2];
[1] -> [1];
[1,1] -> [1];
[0,1] -> [0,1];
[1,3,0] -> [1,3,0];
[3,0,2] -> [3,0,2];
[3,2,1] -> [3,2,1];

=================================
None
[] -> [];
[0,2] -> [0,2];
[0,1,2] -> [0,1,2];
[0,0] -> [0];
[2,1,1] -> [2,1];
[3,3] -> [3];
[1,2,2] -> [1,2];
[3,2] -> [3,2];
[2,2] -> [2];
[3,3,1] -> [3,1];
[0,0,3] -> [0,3];
[3] -> [3];
[0,3] -> [0,3];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
25.958737 false false

[0] -> [0];
[] -> [];
[3,2,2] -> [3,2];
[0,1] -> [0,1];
[3] -> [3];
[0,1,1] -> [0,1];
[1,1] -> [1];
[1,2,0] -> [1,2,0];
[1,2] -> [1,2];
[1,1,3] -> [1,3];
[1,0,1] -> [1,0,1];
[1,3] -> [1,3];
[2,1] -> [2,1];

=================================
None
[0] -> [0];
[1] -> [1];
[] -> [];
[2] -> [2];
[0,2] -> [0,2];
[3,0,1] -> [3,0,1];
[1,3,3] -> [1,3];
[3,0] -> [3,0];
[1,2,1] -> [1,2,1];
[1,2] -> [1,2];
[3] -> [3];
[3,1,0] -> [3,1,0];
[1,1,2] -> [1,2];

=================================
None
[3] -> [3];
[] -> [];
[0] -> [0];
[3,1,0] -> [3,1,0];
[2,0] -> [2,0];
[1,3,0] -> [1,3,0];
[2] -> [2];
[2,3,0] -> [2,3,0];
[3,1] -> [3,1];
[0,1,1] -> [0,1];
[1,2,1] -> [1,2,1];
[2,2,0] -> [2,0];
[2,1,3] -> [2,1,3];

=================================
None
[3] -> [3];
[2,0] -> [2,0];
[0,0,0] -> [0];
[] -> [];
[0,2,2] -> [0,2];
[3,2,0] -> [3,2,0];
[2,1,0] -> [2,1,0];
[1] -> [1];
[0,1,3] -> [0,1,3];
[3,2,1] -> [3,2,1];
[3,2] -> [3,2];
[1,2] -> [1,2];
[3,3] -> [3];
[0,1,2] -> [0,1,2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              xs

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              xs

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
75.501922 false false

[] -> [];
[2] -> [2];
[1,1] -> [1];
[0,3] -> [0,3];
[3] -> [3];
[2,2] -> [2];
[1] -> [1];
[1,3,2] -> [1,3,2];
[2,2,0] -> [2,0];
[1,0,2] -> [1,0,2];
[0] -> [0];
[1,2] -> [1,2];
[0,2] -> [0,2];
[2,2,1] -> [2,1];

=================================
None
[] -> [];
[2,1] -> [2,1];
[2,3,3] -> [2,3];
[3,3,3] -> [3];
[0] -> [0];
[3] -> [3];
[3,2,0] -> [3,2,0];
[3,2,2] -> [3,2];
[1] -> [1];
[3,2] -> [3,2];
[0,0,2] -> [0,2];
[2,0] -> [2,0];
[0,0] -> [0];
[1,3] -> [1,3];

=================================
None
[1,0,0] -> [1,0];
[3,3] -> [3];
[3] -> [3];
[] -> [];
[0,1] -> [0,1];
[3,0] -> [3,0];
[2,0,3] -> [2,0,3];
[3,0,3] -> [3,0,3];
[2] -> [2];
[1] -> [1];
[3,2,2] -> [3,2];
[1,3] -> [1,3];
[0,2] -> [0,2];
[0,3,3] -> [0,3];

=================================
None
[0,3,0] -> [0,3,0];
[] -> [];
[0,1] -> [0,1];
[3] -> [3];
[2] -> [2];
[0,3,1] -> [0,3,1];
[3,3,3] -> [3];
[2,3,0] -> [2,3,0];
[3,1,0] -> [3,1,0];
[1,2] -> [1,2];
[0,0,1] -> [0,1];
[1] -> [1];
[3,0] -> [3,0];
[1,1,1] -> [1];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            GT y3 -> 
              Cons (#2.1 y1, #2.2 y1)

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
82.617719 false false

[0] -> [0];
[] -> [];
[3] -> [3];
[2,2,1] -> [2,1];
[3,0] -> [3,0];
[2,1] -> [2,1];
[2] -> [2];
[2,1,1] -> [2,1];
[0,0,1] -> [0,1];
[3,3,1] -> [3,1];
[1] -> [1];
[3,3] -> [3];
[3,3,3] -> [3];
[0,0,2] -> [0,2];

=================================
None
[3] -> [3];
[2,2,1] -> [2,1];
[3,3] -> [3];
[2] -> [2];
[0,1,0] -> [0,1,0];
[3,3,2] -> [3,2];
[1,1] -> [1];
[0] -> [0];
[] -> [];
[0,3] -> [0,3];
[1] -> [1];
[3,0] -> [3,0];
[1,0,2] -> [1,0,2];
[3,3,0] -> [3,0];

=================================
None
[0,2] -> [0,2];
[3] -> [3];
[1,2,3] -> [1,2,3];
[2,3] -> [2,3];
[] -> [];
[2,1] -> [2,1];
[0,1,3] -> [0,1,3];
[1] -> [1];
[3,0,2] -> [3,0,2];
[3,1,2] -> [3,1,2];
[0,1] -> [0,1];
[3,1] -> [3,1];
[0] -> [0];
[2] -> [2];

=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00289999999995 false false

[1,2] -> [1,2];
[1,0] -> [1,0];
[0] -> [0];
[1] -> [1];
[3] -> [3];
[0,1] -> [0,1];
[1,2,0] -> [1,2,0];
[2,0] -> [2,0];
[] -> [];
[2] -> [2];
[1,1] -> [1];
[2,2] -> [2];
[3,0] -> [3,0];
[0,3,1] -> [0,3,1];

=================================
None
[3,2,1] -> [3,2,1];
[0,2] -> [0,2];
[0] -> [0];
[1] -> [1];
[2,1] -> [2,1];
[2] -> [2];
[2,2] -> [2];
[0,0,2] -> [0,2];
[] -> [];
[3] -> [3];
[2,1,3] -> [2,1,3];
[2,2,0] -> [2,0];
[3,3] -> [3];
[3,3,1] -> [3,1];

=================================
None
[3,1] -> [3,1];
[0] -> [0];
[2,3] -> [2,3];
[3,2,1] -> [3,2,1];
[1,1] -> [1];
[3,0,1] -> [3,0,1];
[2] -> [2];
[] -> [];
[3,2] -> [3,2];
[1,2,3] -> [1,2,3];
[2,3,1] -> [2,3,1];
[3,0,0] -> [3,0];
[1,1,0] -> [1,0];
[1,0,3] -> [1,0,3];
[1,3,0] -> [1,3,0];

=================================
None
[0,2,1] -> [0,2,1];
[2] -> [2];
[1,1,2] -> [1,2];
[3,3] -> [3];
[3,3,3] -> [3];
[1,1] -> [1];
[2,3,1] -> [2,3,1];
[0,2] -> [0,2];
[1,2] -> [1,2];
[1] -> [1];
[3] -> [3];
[1,0] -> [1,0];
[2,2] -> [2];
[0] -> [0];
[2,3] -> [2,3];

=================================
NOSOL

[] -> [];
[3,2] -> [3,2];
[1,1] -> [1];
[1,2,2] -> [1,2];
[2,0,0] -> [2,0];
[0,1] -> [0,1];
[0] -> [0];
[0,3,2] -> [0,3,2];
[2] -> [2];
[2,2] -> [2];
[1] -> [1];
[2,0] -> [2,0];
[1,0,3] -> [1,0,3];
[3,1] -> [3,1];
[0,0,2] -> [0,2];

=================================
None
[3] -> [3];
[0,0,3] -> [0,3];
[] -> [];
[0,1] -> [0,1];
[2,0] -> [2,0];
[0] -> [0];
[3,1] -> [3,1];
[2,0,3] -> [2,0,3];
[0,2] -> [0,2];
[1] -> [1];
[1,3,0] -> [1,3,0];
[2,2] -> [2];
[1,1,3] -> [1,3];
[0,2,3] -> [0,2,3];
[0,1,1] -> [0,1];

=================================
None
[0] -> [0];
[1,0] -> [1,0];
[2,1] -> [2,1];
[0,2] -> [0,2];
[2] -> [2];
[1] -> [1];
[3,2] -> [3,2];
[] -> [];
[3,0] -> [3,0];
[2,2] -> [2];
[1,2,3] -> [1,2,3];
[0,0,0] -> [0];
[3,1,0] -> [3,1,0];
[2,2,2] -> [2];
[3] -> [3];

=================================
None
[] -> [];
[3,2,2] -> [3,2];
[0,3] -> [0,3];
[0,3,2] -> [0,3,2];
[3] -> [3];
[1,2] -> [1,2];
[0,0] -> [0];
[3,0,1] -> [3,0,1];
[2,2] -> [2];
[1,3] -> [1,3];
[1] -> [1];
[2,1] -> [2,1];
[1,0] -> [1,0];
[1,1,2] -> [1,2];
[2,3,1] -> [2,3,1];

=================================
None
[3] -> [3];
[2] -> [2];
[0] -> [0];
[2,1,3] -> [2,1,3];
[] -> [];
[1] -> [1];
[2,1,2] -> [2,1,2];
[3,0] -> [3,0];
[2,0,2] -> [2,0,2];
[1,3,2] -> [1,3,2];
[3,3,2] -> [3,2];
[2,1] -> [2,1];
[0,1,3] -> [0,1,3];
[0,3] -> [0,3];
[3,3,3] -> [3];

=================================
None
[3] -> [3];
[0,2] -> [0,2];
[] -> [];
[2,3,1] -> [2,3,1];
[0,3] -> [0,3];
[1,1,1] -> [1];
[0,1,2] -> [0,1,2];
[3,0] -> [3,0];
[1,1] -> [1];
[1] -> [1];
[1,0,3] -> [1,0,3];
[3,1] -> [3,1];
[0,1,3] -> [0,1,3];
[3,0,2] -> [3,0,2];
[3,1,1] -> [3,1];

=================================
None
[] -> [];
[0,3] -> [0,3];
[0] -> [0];
[0,1] -> [0,1];
[1,3] -> [1,3];
[3,1] -> [3,1];
[3,3] -> [3];
[0,2] -> [0,2];
[1,0,3] -> [1,0,3];
[2] -> [2];
[3,0] -> [3,0];
[3,0,1] -> [3,0,1];
[0,1,2] -> [0,1,2];
[0,0,2] -> [0,2];
[3,0,3] -> [3,0,3];

=================================
None
[2] -> [2];
[3] -> [3];
[1,1,2] -> [1,2];
[] -> [];
[1,3,1] -> [1,3,1];
[1] -> [1];
[1,2,0] -> [1,2,0];
[0,1,0] -> [0,1,0];
[0] -> [0];
[0,3] -> [0,3];
[1,1,0] -> [1,0];
[1,2] -> [1,2];
[3,3,3] -> [3];
[2,1] -> [2,1];
[2,3] -> [2,3];

=================================
None
[2] -> [2];
[3,0] -> [3,0];
[0,1] -> [0,1];
[1,2] -> [1,2];
[] -> [];
[0,0,1] -> [0,1];
[2,1,1] -> [2,1];
[1,0] -> [1,0];
[1] -> [1];
[3] -> [3];
[0,2] -> [0,2];
[2,0] -> [2,0];
[3,1] -> [3,1];
[0] -> [0];
[2,2,3] -> [2,3];
[3,0,0] -> [3,0];

=================================
None
[2,1] -> [2,1];
[1,2] -> [1,2];
[1] -> [1];
[] -> [];
[2] -> [2];
[1,2,1] -> [1,2,1];
[3,3,0] -> [3,0];
[0,2,1] -> [0,2,1];
[0] -> [0];
[0,0,2] -> [0,2];
[3,2] -> [3,2];
[1,0] -> [1,0];
[3] -> [3];
[2,2] -> [2];
[2,0,2] -> [2,0,2];
[3,1] -> [3,1];

=================================
None
[0] -> [0];
[] -> [];
[2] -> [2];
[0,1,2] -> [0,1,2];
[0,1,1] -> [0,1];
[3,3,1] -> [3,1];
[2,2,3] -> [2,3];
[3] -> [3];
[1] -> [1];
[3,2] -> [3,2];
[0,2,2] -> [0,2];
[2,3,0] -> [2,3,0];
[1,3] -> [1,3];
[2,1,1] -> [2,1];
[3,1,3] -> [3,1,3];
[1,1,0] -> [1,0];

=================================
None
[2,0] -> [2,0];
[3,0,1] -> [3,0,1];
[3,0,0] -> [3,0];
[] -> [];
[0,3] -> [0,3];
[2,3] -> [2,3];
[2,1,2] -> [2,1,2];
[2,1] -> [2,1];
[0,1,1] -> [0,1];
[2] -> [2];
[3,1] -> [3,1];
[1] -> [1];
[3] -> [3];
[3,0,2] -> [3,0,2];
[3,3] -> [3];
[1,3] -> [1,3];

=================================
None
[] -> [];
[3,3,3] -> [3];
[3] -> [3];
[0] -> [0];
[2] -> [2];
[0,0,1] -> [0,1];
[1,2] -> [1,2];
[2,0] -> [2,0];
[1,3,3] -> [1,3];
[3,2] -> [3,2];
[2,1,2] -> [2,1,2];
[3,2,0] -> [3,2,0];
[1,0] -> [1,0];
[0,0,3] -> [0,3];
[3,2,2] -> [3,2];
[0,3] -> [0,3];

=================================
None
[] -> [];
[2,0,0] -> [2,0];
[2,1,0] -> [2,1,0];
[0,1,0] -> [0,1,0];
[2,0,1] -> [2,0,1];
[2] -> [2];
[1,1,0] -> [1,0];
[2,3] -> [2,3];
[3] -> [3];
[1] -> [1];
[0] -> [0];
[3,3] -> [3];
[2,0] -> [2,0];
[1,1,2] -> [1,2];
[3,0] -> [3,0];
[0,3,0] -> [0,3,0];

=================================
None
[3] -> [3];
[3,2,2] -> [3,2];
[0] -> [0];
[0,3] -> [0,3];
[0,2,1] -> [0,2,1];
[1,1] -> [1];
[3,0,0] -> [3,0];
[3,1] -> [3,1];
[2,1,1] -> [2,1];
[2,1] -> [2,1];
[2,2,3] -> [2,3];
[2,2] -> [2];
[2,0] -> [2,0];
[1,1,0] -> [1,0];
[0,3,0] -> [0,3,0];
[1,0,3] -> [1,0,3];

=================================
NOSOL

[1,2] -> [1,2];
[] -> [];
[1] -> [1];
[3,1] -> [3,1];
[1,3] -> [1,3];
[0] -> [0];
[1,2,1] -> [1,2,1];
[1,3,2] -> [1,3,2];
[1,0,2] -> [1,0,2];
[0,3] -> [0,3];
[2,2] -> [2];
[1,0] -> [1,0];
[0,2,0] -> [0,2,0];
[0,2] -> [0,2];
[0,1,1] -> [0,1];
[2] -> [2];

=================================
None
[0] -> [0];
[2,3] -> [2,3];
[0,1] -> [0,1];
[2] -> [2];
[0,1,3] -> [0,1,3];
[] -> [];
[1,0] -> [1,0];
[1] -> [1];
[2,3,2] -> [2,3,2];
[3] -> [3];
[1,2] -> [1,2];
[2,2] -> [2];
[0,0,1] -> [0,1];
[3,1] -> [3,1];
[3,0,0] -> [3,0];
[3,0,1] -> [3,0,1];

=================================
None
[2,0,3] -> [2,0,3];
[2,2] -> [2];
[3,3] -> [3];
[] -> [];
[0,3] -> [0,3];
[3,0,0] -> [3,0];
[3] -> [3];
[3,0] -> [3,0];
[2,3] -> [2,3];
[2] -> [2];
[3,3,1] -> [3,1];
[0,0] -> [0];
[0] -> [0];
[2,1,1] -> [2,1];
[2,0] -> [2,0];
[0,0,1] -> [0,1];

=================================
None
[] -> [];
[3,0,1] -> [3,0,1];
[1] -> [1];
[1,3] -> [1,3];
[2,3,0] -> [2,3,0];
[0,0,1] -> [0,1];
[0] -> [0];
[2,0,3] -> [2,0,3];
[2] -> [2];
[3] -> [3];
[3,1,3] -> [3,1,3];
[1,3,1] -> [1,3,1];
[2,0] -> [2,0];
[2,0,0] -> [2,0];
[0,3] -> [0,3];
[1,1] -> [1];
[2,3,3] -> [2,3];

=================================
None
[2] -> [2];
[3] -> [3];
[0] -> [0];
[] -> [];
[3,0] -> [3,0];
[3,0,1] -> [3,0,1];
[2,3,1] -> [2,3,1];
[3,2] -> [3,2];
[3,2,2] -> [3,2];
[2,1] -> [2,1];
[0,0,2] -> [0,2];
[2,0,3] -> [2,0,3];
[0,0] -> [0];
[0,2] -> [0,2];
[1,2] -> [1,2];
[3,3] -> [3];
[2,0,0] -> [2,0];

=================================
None
[1,1] -> [1];
[0,1,3] -> [0,1,3];
[1] -> [1];
[3,2,1] -> [3,2,1];
[1,3] -> [1,3];
[0] -> [0];
[1,2] -> [1,2];
[2,2,3] -> [2,3];
[2,2,1] -> [2,1];
[] -> [];
[3,0] -> [3,0];
[2,3] -> [2,3];
[0,1] -> [0,1];
[2,2] -> [2];
[0,3,0] -> [0,3,0];
[2,3,2] -> [2,3,2];
[1,0,3] -> [1,0,3];

=================================
None
[2] -> [2];
[0,2,1] -> [0,2,1];
[] -> [];
[2,1] -> [2,1];
[2,3] -> [2,3];
[2,0,1] -> [2,0,1];
[0,0] -> [0];
[3,3,1] -> [3,1];
[3,0] -> [3,0];
[0,1] -> [0,1];
[1,3] -> [1,3];
[1,3,1] -> [1,3,1];
[1,0,1] -> [1,0,1];
[0,2,3] -> [0,2,3];
[2,1,3] -> [2,1,3];
[3,2,3] -> [3,2,3];
[1] -> [1];

=================================
None
[] -> [];
[0] -> [0];
[1,0] -> [1,0];
[0,3,1] -> [0,3,1];
[3] -> [3];
[3,0] -> [3,0];
[1,2,1] -> [1,2,1];
[0,2,0] -> [0,2,0];
[3,1] -> [3,1];
[0,1] -> [0,1];
[1] -> [1];
[2] -> [2];
[0,3] -> [0,3];
[1,2] -> [1,2];
[2,3] -> [2,3];
[1,2,2] -> [1,2];
[0,0] -> [0];

=================================
None
[3] -> [3];
[1] -> [1];
[] -> [];
[2] -> [2];
[3,2] -> [3,2];
[0,0,2] -> [0,2];
[0,1,3] -> [0,1,3];
[0,0,0] -> [0];
[1,3,3] -> [1,3];
[3,3] -> [3];
[1,3] -> [1,3];
[3,3,1] -> [3,1];
[1,2] -> [1,2];
[0] -> [0];
[2,0,2] -> [2,0,2];
[0,2] -> [0,2];
[1,0,2] -> [1,0,2];

=================================
None
[] -> [];
[3,2,1] -> [3,2,1];
[0,0] -> [0];
[0,1] -> [0,1];
[1] -> [1];
[2] -> [2];
[0,2] -> [0,2];
[3,3,3] -> [3];
[3,1,0] -> [3,1,0];
[2,3,1] -> [2,3,1];
[2,1,0] -> [2,1,0];
[0,0,0] -> [0];
[0,2,2] -> [0,2];
[0] -> [0];
[3,2,3] -> [3,2,3];
[3] -> [3];
[2,0,1] -> [2,0,1];

=================================
None
[1] -> [1];
[1,2] -> [1,2];
[3,0] -> [3,0];
[2,1,3] -> [2,1,3];
[2,3,3] -> [2,3];
[0] -> [0];
[2,0,3] -> [2,0,3];
[] -> [];
[3,3] -> [3];
[3] -> [3];
[2,3] -> [2,3];
[0,1] -> [0,1];
[0,0,0] -> [0];
[3,1] -> [3,1];
[2] -> [2];
[0,3] -> [0,3];
[2,1] -> [2,1];

=================================
None
[3,3] -> [3];
[1,1,0] -> [1,0];
[2] -> [2];
[3,1,2] -> [3,1,2];
[] -> [];
[2,0,0] -> [2,0];
[3,2,0] -> [3,2,0];
[0,3,0] -> [0,3,0];
[0] -> [0];
[0,2,2] -> [0,2];
[1] -> [1];
[1,0] -> [1,0];
[3] -> [3];
[2,2] -> [2];
[2,0,2] -> [2,0,2];
[1,3,1] -> [1,3,1];
[3,3,2] -> [3,2];

=================================
None
[1,3] -> [1,3];
[2,1,3] -> [2,1,3];
[] -> [];
[1] -> [1];
[3] -> [3];
[2,2,3] -> [2,3];
[1,2,0] -> [1,2,0];
[1,1] -> [1];
[0,3,1] -> [0,3,1];
[1,0] -> [1,0];
[2,3,1] -> [2,3,1];
[2,1,1] -> [2,1];
[1,0,2] -> [1,0,2];
[3,3] -> [3];
[2] -> [2];
[1,0,3] -> [1,0,3];
[2,1,0] -> [2,1,0];

=================================
None
[0] -> [0];
[2,3,1] -> [2,3,1];
[1,3,3] -> [1,3];
[] -> [];
[2] -> [2];
[0,2,1] -> [0,2,1];
[1] -> [1];
[2,0] -> [2,0];
[3] -> [3];
[0,0] -> [0];
[2,0,3] -> [2,0,3];
[0,3,0] -> [0,3,0];
[1,3] -> [1,3];
[3,0] -> [3,0];
[1,2] -> [1,2];
[3,3,3] -> [3];
[2,2,1] -> [2,1];
[2,3,3] -> [2,3];

=================================
STACKOVERFLOW

[] -> [];
[0] -> [0];
[0,3] -> [0,3];
[1,3,3] -> [1,3];
[2,3] -> [2,3];
[2] -> [2];
[3,2,1] -> [3,2,1];
[2,1] -> [2,1];
[3,0] -> [3,0];
[2,0] -> [2,0];
[0,0] -> [0];
[1,1,2] -> [1,2];
[1] -> [1];
[0,1] -> [0,1];
[2,3,3] -> [2,3];
[3,2] -> [3,2];
[3] -> [3];
[3,3] -> [3];

=================================
STACKOVERFLOW

[1,3] -> [1,3];
[0] -> [0];
[1,2] -> [1,2];
[1] -> [1];
[0,0,3] -> [0,3];
[] -> [];
[0,3] -> [0,3];
[1,3,3] -> [1,3];
[0,2] -> [0,2];
[0,0,0] -> [0];
[0,0] -> [0];
[3] -> [3];
[0,1,1] -> [0,1];
[3,1] -> [3,1];
[2,3,3] -> [2,3];
[3,3] -> [3];
[2] -> [2];
[3,0,2] -> [3,0,2];

=================================
STACKOVERFLOW

[] -> [];
[2,0] -> [2,0];
[1] -> [1];
[2,2,3] -> [2,3];
[2] -> [2];
[1,3,3] -> [1,3];
[1,0] -> [1,0];
[3] -> [3];
[2,2,2] -> [2];
[3,2] -> [3,2];
[2,1] -> [2,1];
[0,3] -> [0,3];
[1,2,0] -> [1,2,0];
[2,1,0] -> [2,1,0];
[1,3] -> [1,3];
[0] -> [0];
[0,2,3] -> [0,2,3];
[2,3] -> [2,3];

=================================
STACKOVERFLOW

[2] -> [2];
[] -> [];
[2,2,0] -> [2,0];
[1,0,2] -> [1,0,2];
[2,2,2] -> [2];
[2,0] -> [2,0];
[0,3,3] -> [0,3];
[0,3,1] -> [0,3,1];
[0,3,0] -> [0,3,0];
[3] -> [3];
[1] -> [1];
[0,0] -> [0];
[3,1,2] -> [3,1,2];
[0,1] -> [0,1];
[1,3,3] -> [1,3];
[2,1] -> [2,1];
[0] -> [0];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[0,3] -> [0,3];
[] -> [];
[3,0,0] -> [3,0];
[3] -> [3];
[3,2] -> [3,2];
[0,1,3] -> [0,1,3];
[2,2] -> [2];
[1] -> [1];
[3,3] -> [3];
[1,0] -> [1,0];
[0,1] -> [0,1];
[0,1,2] -> [0,1,2];
[2,1] -> [2,1];
[3,2,0] -> [3,2,0];
[3,1] -> [3,1];
[1,3,3] -> [1,3];
[2,1,2] -> [2,1,2];
[0,0,2] -> [0,2];

=================================
STACKOVERFLOW

[2,3,2] -> [2,3,2];
[3,1] -> [3,1];
[1,3,1] -> [1,3,1];
[2] -> [2];
[1,0] -> [1,0];
[3,1,0] -> [3,1,0];
[1,2] -> [1,2];
[] -> [];
[1,2,2] -> [1,2];
[0] -> [0];
[3,0] -> [3,0];
[3] -> [3];
[2,1,2] -> [2,1,2];
[1,1] -> [1];
[2,2] -> [2];
[1] -> [1];
[0,0,1] -> [0,1];
[3,3,0] -> [3,0];

=================================
STACKOVERFLOW

[0,0,1] -> [0,1];
[] -> [];
[3,1] -> [3,1];
[1,0,0] -> [1,0];
[2,3] -> [2,3];
[1,0] -> [1,0];
[0] -> [0];
[2,0] -> [2,0];
[0,3] -> [0,3];
[2,1,0] -> [2,1,0];
[2] -> [2];
[2,0,0] -> [2,0];
[3,1,2] -> [3,1,2];
[1] -> [1];
[0,1,2] -> [0,1,2];
[2,2] -> [2];
[1,3] -> [1,3];
[2,1] -> [2,1];

=================================
STACKOVERFLOW

[1,2,0] -> [1,2,0];
[3,3] -> [3];
[2,1,3] -> [2,1,3];
[2,2,0] -> [2,0];
[1] -> [1];
[3,1] -> [3,1];
[3] -> [3];
[2] -> [2];
[3,0] -> [3,0];
[2,1] -> [2,1];
[2,0,2] -> [2,0,2];
[] -> [];
[2,3] -> [2,3];
[1,1] -> [1];
[2,0] -> [2,0];
[2,1,1] -> [2,1];
[0,3,3] -> [0,3];
[2,2] -> [2];

=================================
STACKOVERFLOW

[] -> [];
[2,1,1] -> [2,1];
[0,1] -> [0,1];
[1,0] -> [1,0];
[0] -> [0];
[3,3] -> [3];
[2,2] -> [2];
[3,2] -> [3,2];
[3,1,0] -> [3,1,0];
[0,0] -> [0];
[2,2,3] -> [2,3];
[2,0,0] -> [2,0];
[2,2,0] -> [2,0];
[2] -> [2];
[1,2,0] -> [1,2,0];
[3] -> [3];
[1,1,3] -> [1,3];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[0] -> [0];
[2,0,0] -> [2,0];
[2,1] -> [2,1];
[3,3,2] -> [3,2];
[] -> [];
[1,0] -> [1,0];
[0,0,3] -> [0,3];
[0,0] -> [0];
[3,3] -> [3];
[2,3] -> [2,3];
[3,2,1] -> [3,2,1];
[3,0] -> [3,0];
[1] -> [1];
[2,0,3] -> [2,0,3];
[3,1,1] -> [3,1];
[0,1] -> [0,1];
[1,1,2] -> [1,2];
[2,0] -> [2,0];
[1,3] -> [1,3];

=================================
STACKOVERFLOW

[0,0,0] -> [0];
[0,1] -> [0,1];
[1,2] -> [1,2];
[2] -> [2];
[] -> [];
[1] -> [1];
[0,2] -> [0,2];
[3] -> [3];
[3,3,1] -> [3,1];
[3,0,1] -> [3,0,1];
[2,2,3] -> [2,3];
[3,0] -> [3,0];
[1,0] -> [1,0];
[3,0,2] -> [3,0,2];
[2,0] -> [2,0];
[2,1] -> [2,1];
[2,3,3] -> [2,3];
[0,0,2] -> [0,2];
[3,1] -> [3,1];

=================================
STACKOVERFLOW

[] -> [];
[1,2] -> [1,2];
[0,2] -> [0,2];
[1,3,3] -> [1,3];
[3,0] -> [3,0];
[1,3] -> [1,3];
[0] -> [0];
[1,0,0] -> [1,0];
[2,1,3] -> [2,1,3];
[2,1,1] -> [2,1];
[3,0,2] -> [3,0,2];
[2] -> [2];
[2,1] -> [2,1];
[1] -> [1];
[3] -> [3];
[2,2,2] -> [2];
[0,3] -> [0,3];
[1,0] -> [1,0];
[1,0,3] -> [1,0,3];

=================================
STACKOVERFLOW

[] -> [];
[2] -> [2];
[3,0] -> [3,0];
[0,2,2] -> [0,2];
[3,3] -> [3];
[2,1,1] -> [2,1];
[3] -> [3];
[1,2] -> [1,2];
[0,1,2] -> [0,1,2];
[0] -> [0];
[0,1] -> [0,1];
[2,2] -> [2];
[3,1,3] -> [3,1,3];
[3,3,0] -> [3,0];
[2,2,0] -> [2,0];
[0,0,1] -> [0,1];
[1] -> [1];
[2,3] -> [2,3];
[2,0,3] -> [2,0,3];

=================================
STACKOVERFLOW

[] -> [];
[0] -> [0];
[0,1] -> [0,1];
[0,0] -> [0];
[2] -> [2];
[2,0,2] -> [2,0,2];
[0,3] -> [0,3];
[0,1,1] -> [0,1];
[2,0,3] -> [2,0,3];
[1,0] -> [1,0];
[1,1] -> [1];
[2,3,1] -> [2,3,1];
[1] -> [1];
[3] -> [3];
[2,0,0] -> [2,0];
[0,2] -> [0,2];
[0,3,2] -> [0,3,2];
[3,0] -> [3,0];
[3,0,1] -> [3,0,1];

=================================
STACKOVERFLOW

[3,0,1] -> [3,0,1];
[0,3,3] -> [0,3];
[1,1] -> [1];
[1] -> [1];
[0,1,2] -> [0,1,2];
[] -> [];
[1,3] -> [1,3];
[3] -> [3];
[3,3,3] -> [3];
[3,0] -> [3,0];
[0,2] -> [0,2];
[0] -> [0];
[2] -> [2];
[1,2] -> [1,2];
[3,2] -> [3,2];
[2,2,1] -> [2,1];
[3,1] -> [3,1];
[2,3,0] -> [2,3,0];
[3,3] -> [3];

=================================
STACKOVERFLOW

[0] -> [0];
[1,1] -> [1];
[] -> [];
[1] -> [1];
[3,2,3] -> [3,2,3];
[2,2] -> [2];
[0,3,1] -> [0,3,1];
[1,1,0] -> [1,0];
[0,1] -> [0,1];
[0,2] -> [0,2];
[3,3] -> [3];
[3,1,0] -> [3,1,0];
[3,3,0] -> [3,0];
[2,0,0] -> [2,0];
[2] -> [2];
[3,2,2] -> [3,2];
[3] -> [3];
[3,1,3] -> [3,1,3];
[2,0] -> [2,0];

=================================
STACKOVERFLOW

[1] -> [1];
[2,1] -> [2,1];
[2,3] -> [2,3];
[] -> [];
[2,3,2] -> [2,3,2];
[0,1] -> [0,1];
[3] -> [3];
[3,0,0] -> [3,0];
[0] -> [0];
[2,3,0] -> [2,3,0];
[1,2] -> [1,2];
[0,0] -> [0];
[3,3,1] -> [3,1];
[0,2,1] -> [0,2,1];
[0,3] -> [0,3];
[2] -> [2];
[0,2] -> [0,2];
[0,1,2] -> [0,1,2];
[3,3] -> [3];

=================================
STACKOVERFLOW

[0,3] -> [0,3];
[] -> [];
[0] -> [0];
[1,3] -> [1,3];
[1,2] -> [1,2];
[0,2] -> [0,2];
[1,0] -> [1,0];
[1] -> [1];
[3] -> [3];
[2,3,0] -> [2,3,0];
[2] -> [2];
[3,3] -> [3];
[3,2,0] -> [3,2,0];
[0,1] -> [0,1];
[0,3,0] -> [0,3,0];
[2,2,3] -> [2,3];
[3,1] -> [3,1];
[2,3] -> [2,3];
[1,1,2] -> [1,2];

=================================
STACKOVERFLOW

[0,1] -> [0,1];
[0] -> [0];
[0,0] -> [0];
[0,1,0] -> [0,1,0];
[2,3] -> [2,3];
[] -> [];
[1] -> [1];
[1,3] -> [1,3];
[3,2] -> [3,2];
[2] -> [2];
[1,0,0] -> [1,0];
[2,1,2] -> [2,1,2];
[0,3] -> [0,3];
[1,1,1] -> [1];
[3] -> [3];
[0,0,2] -> [0,2];
[1,3,0] -> [1,3,0];
[2,0] -> [2,0];
[0,1,2] -> [0,1,2];

=================================
STACKOVERFLOW

[1,1] -> [1];
[1,2,1] -> [1,2,1];
[] -> [];
[3,2] -> [3,2];
[1] -> [1];
[0] -> [0];
[3,1,2] -> [3,1,2];
[2,3] -> [2,3];
[3] -> [3];
[2] -> [2];
[3,1,3] -> [3,1,3];
[1,0,0] -> [1,0];
[1,3] -> [1,3];
[1,0,2] -> [1,0,2];
[2,0] -> [2,0];
[0,1,2] -> [0,1,2];
[1,3,3] -> [1,3];
[0,2,3] -> [0,2,3];
[3,1,0] -> [3,1,0];
[1,0] -> [1,0];

=================================
STACKOVERFLOW

[0] -> [0];
[] -> [];
[2] -> [2];
[1] -> [1];
[1,1] -> [1];
[1,2,0] -> [1,2,0];
[3,2,1] -> [3,2,1];
[2,1,3] -> [2,1,3];
[3,0,1] -> [3,0,1];
[2,1] -> [2,1];
[0,1] -> [0,1];
[3,0,2] -> [3,0,2];
[2,3] -> [2,3];
[0,2] -> [0,2];
[3] -> [3];
[3,0] -> [3,0];
[2,3,1] -> [2,3,1];
[3,3] -> [3];
[1,2] -> [1,2];
[1,0,0] -> [1,0];

=================================
STACKOVERFLOW

[3,3] -> [3];
[] -> [];
[2] -> [2];
[3] -> [3];
[3,0] -> [3,0];
[3,0,0] -> [3,0];
[0] -> [0];
[2,0,0] -> [2,0];
[3,1,1] -> [3,1];
[1] -> [1];
[1,3] -> [1,3];
[1,2,3] -> [1,2,3];
[0,3] -> [0,3];
[1,0,1] -> [1,0,1];
[1,0] -> [1,0];
[1,1] -> [1];
[2,3] -> [2,3];
[3,2,3] -> [3,2,3];
[2,2] -> [2];
[3,3,0] -> [3,0];

=================================
STACKOVERFLOW

[0,2] -> [0,2];
[] -> [];
[2] -> [2];
[1,3] -> [1,3];
[3] -> [3];
[0,0] -> [0];
[0] -> [0];
[3,2,3] -> [3,2,3];
[1,2,0] -> [1,2,0];
[0,3,3] -> [0,3];
[1,0,1] -> [1,0,1];
[1,1] -> [1];
[3,1,2] -> [3,1,2];
[1,1,2] -> [1,2];
[3,0] -> [3,0];
[2,2] -> [2];
[2,0,1] -> [2,0,1];
[0,3] -> [0,3];
[1] -> [1];
[2,2,2] -> [2];

=================================
STACKOVERFLOW

[] -> [];
[3,0] -> [3,0];
[0,1] -> [0,1];
[0] -> [0];
[1] -> [1];
[1,0,1] -> [1,0,1];
[2] -> [2];
[3] -> [3];
[1,1,0] -> [1,0];
[2,1,0] -> [2,1,0];
[3,3] -> [3];
[0,0,2] -> [0,2];
[2,2,3] -> [2,3];
[3,1] -> [3,1];
[1,2,2] -> [1,2];
[1,3,1] -> [1,3,1];
[2,2,2] -> [2];
[2,3,1] -> [2,3,1];
[0,3] -> [0,3];
[2,1] -> [2,1];

=================================
STACKOVERFLOW

[0] -> [0];
[2,0] -> [2,0];
[0,0,2] -> [0,2];
[2] -> [2];
[] -> [];
[3,1] -> [3,1];
[1,3,0] -> [1,3,0];
[2,2,1] -> [2,1];
[0,1,3] -> [0,1,3];
[0,1] -> [0,1];
[0,2,3] -> [0,2,3];
[3] -> [3];
[1,0] -> [1,0];
[0,2,0] -> [0,2,0];
[1] -> [1];
[1,1,0] -> [1,0];
[1,2] -> [1,2];
[2,0,3] -> [2,0,3];
[3,3,3] -> [3];
[0,0,3] -> [0,3];

=================================
STACKOVERFLOW

[3] -> [3];
[] -> [];
[2] -> [2];
[3,3,1] -> [3,1];
[3,3,2] -> [3,2];
[3,1,0] -> [3,1,0];
[2,1,2] -> [2,1,2];
[0,0,3] -> [0,3];
[0,3] -> [0,3];
[1,0,0] -> [1,0];
[0] -> [0];
[3,0,1] -> [3,0,1];
[1,1,3] -> [1,3];
[0,1,0] -> [0,1,0];
[3,2,2] -> [3,2];
[2,0] -> [2,0];
[1,1] -> [1];
[0,1] -> [0,1];
[1] -> [1];
[0,2] -> [0,2];

=================================
STACKOVERFLOW

[] -> [];
[0] -> [0];
[3,0] -> [3,0];
[2,3,2] -> [2,3,2];
[3,1] -> [3,1];
[3,2,0] -> [3,2,0];
[2,2] -> [2];
[1,1,3] -> [1,3];
[2,3] -> [2,3];
[0,3,2] -> [0,3,2];
[3] -> [3];
[2,1,1] -> [2,1];
[3,1,1] -> [3,1];
[2,0] -> [2,0];
[0,1] -> [0,1];
[1] -> [1];
[1,2,3] -> [1,2,3];
[3,0,2] -> [3,0,2];
[2,1] -> [2,1];
[3,3] -> [3];

=================================
STACKOVERFLOW

[2,2] -> [2];
[2,2,1] -> [2,1];
[3,3] -> [3];
[3,0,1] -> [3,0,1];
[0,1,0] -> [0,1,0];
[1] -> [1];
[1,1] -> [1];
[3,0] -> [3,0];
[2,3,0] -> [2,3,0];
[0] -> [0];
[0,0,3] -> [0,3];
[0,0] -> [0];
[0,1] -> [0,1];
[] -> [];
[2,3,3] -> [2,3];
[1,2,0] -> [1,2,0];
[3,3,3] -> [3];
[0,0,0] -> [0];
[3] -> [3];
[2,1] -> [2,1];

=================================
STACKOVERFLOW

[1] -> [1];
[1,3] -> [1,3];
[] -> [];
[2,0,3] -> [2,0,3];
[3,3,0] -> [3,0];
[2,1,2] -> [2,1,2];
[0,3,3] -> [0,3];
[1,2] -> [1,2];
[2] -> [2];
[2,0] -> [2,0];
[1,0] -> [1,0];
[2,2] -> [2];
[0,0] -> [0];
[0] -> [0];
[2,3,1] -> [2,3,1];
[3,1,2] -> [3,1,2];
[3,1] -> [3,1];
[0,2] -> [0,2];
[0,3] -> [0,3];
[1,2,1] -> [1,2,1];

=================================
STACKOVERFLOW

