list_sum
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.027079 false false

[2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 2 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0478909999999 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0273090000001 false false

[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 1 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0280889999999 false false

[2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 2 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0282529999999 false false

[2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 2 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0285329999999 false false

[2,2] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 4 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030925 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.027229 false false

[2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 2 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028264 false false

[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> 0 in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0271299999999 false false

[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0285490000001 true false

[3,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0277410000001 true false

[3,3,3] -> 9;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028276 true false

[] -> 0;
[3,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0278490000001 true false

[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0279 true false

[] -> 0;
[0,0,3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0281629999999 true false

[] -> 0;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0272689999999 true false

[] -> 0;
[3,1,0] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028057 true false

[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.027957 true false

[0,0,0] -> 0;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0284630000001 true false

[] -> 0;
[2] -> 2;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029421 true false

[0] -> 0;
[1,2] -> 3;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0284349999999 true false

[0,1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028847 true false

[0] -> 0;
[] -> 0;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0284939999999 true false

[] -> 0;
[2,1,0] -> 3;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0287189999999 true false

[3,0] -> 3;
[] -> 0;
[1,0,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028564 true false

[0,3] -> 3;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0283649999999 true false

[0,2] -> 2;
[1,3] -> 4;
[1,0,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030931 true false

[1,1,1] -> 3;
[] -> 0;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028509 true false

[] -> 0;
[3] -> 3;
[3,1,1] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028206 true false

[] -> 0;
[1,0,3] -> 4;
[3,3,0] -> 6;
[0,0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029391 true false

[1] -> 1;
[2,0] -> 2;
[2] -> 2;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0315410000001 true false

[1] -> 1;
[] -> 0;
[2,0,1] -> 3;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0286550000001 true false

[3,3] -> 6;
[] -> 0;
[2,0,1] -> 3;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029129 true false

[] -> 0;
[2] -> 2;
[3,3,3] -> 9;
[0,3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0292019999999 true false

[] -> 0;
[0] -> 0;
[2] -> 2;
[0,1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0288419999999 true false

[] -> 0;
[1,3,0] -> 4;
[0,3] -> 3;
[3,0,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030139 true false

[3] -> 3;
[] -> 0;
[0] -> 0;
[1,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028613 true false

[3,2] -> 5;
[1,0] -> 1;
[1] -> 1;
[1,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0311509999999 true false

[1,0,3] -> 4;
[] -> 0;
[1,0,0] -> 1;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0297760000001 true false

[] -> 0;
[3,3] -> 6;
[2,3] -> 5;
[1,2] -> 3;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029618 true false

[2,0,2] -> 4;
[3] -> 3;
[] -> 0;
[0,3] -> 3;
[1,3,0] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.02989 true false

[1,1] -> 2;
[1] -> 1;
[2,1] -> 3;
[] -> 0;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0292609999999 true false

[0,1] -> 1;
[3] -> 3;
[2,2] -> 4;
[1,3,2] -> 6;
[3,0,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0342920000001 true false

[3,2] -> 5;
[2,3,1] -> 6;
[3] -> 3;
[1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0296679999999 true false

[] -> 0;
[0,0,2] -> 2;
[3,2,1] -> 6;
[3] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0301139999999 true false

[1,3] -> 4;
[] -> 0;
[2,3] -> 5;
[0,2,3] -> 5;
[1,2,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030397 true false

[] -> 0;
[1,0,2] -> 3;
[2,1,2] -> 5;
[1,2,1] -> 4;
[0,2,2] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0302360000001 true false

[3,3,0] -> 6;
[2] -> 2;
[0] -> 0;
[1,2,1] -> 4;
[0,2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0296949999999 true false

[2,3] -> 5;
[0] -> 0;
[] -> 0;
[3] -> 3;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0290279999999 true false

[] -> 0;
[3,1,0] -> 4;
[0] -> 0;
[3,3,1] -> 7;
[2,2] -> 4;
[1,3,3] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0306849999999 true false

[] -> 0;
[0] -> 0;
[0,1,0] -> 1;
[2,1] -> 3;
[3,3] -> 6;
[3,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030109 true false

[] -> 0;
[3,1] -> 4;
[1] -> 1;
[2,2] -> 4;
[3] -> 3;
[2,1] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029865 true false

[] -> 0;
[1] -> 1;
[2,1,2] -> 5;
[0,2] -> 2;
[3,3] -> 6;
[2,3,2] -> 7;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0304940000001 true false

[] -> 0;
[1,3,2] -> 6;
[3] -> 3;
[2,2,1] -> 5;
[3,1,0] -> 4;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0306250000001 true false

[0] -> 0;
[2] -> 2;
[1,0,2] -> 3;
[3,3,0] -> 6;
[1,3] -> 4;
[0,3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031054 true false

[3,0,0] -> 3;
[1] -> 1;
[2,0,2] -> 4;
[] -> 0;
[3] -> 3;
[2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030047 true false

[] -> 0;
[0] -> 0;
[2,2,1] -> 5;
[0,2] -> 2;
[2,3,1] -> 6;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029941 true false

[3] -> 3;
[2,2,1] -> 5;
[3,3] -> 6;
[2,1] -> 3;
[0] -> 0;
[3,3,0] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0306069999999 true false

[] -> 0;
[2] -> 2;
[0] -> 0;
[1] -> 1;
[1,2] -> 3;
[3,0,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029824 true false

[2,2] -> 4;
[2,0,3] -> 5;
[3,1,0] -> 4;
[2] -> 2;
[0,2] -> 2;
[0,1] -> 1;
[2,3] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0360860000001 true false

[1,3,1] -> 5;
[2,2,2] -> 6;
[3,2,1] -> 6;
[3,1,1] -> 5;
[3] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031383 true false

[] -> 0;
[2] -> 2;
[3,3] -> 6;
[0,3] -> 3;
[0,3,0] -> 3;
[3,3,2] -> 8;
[2,2] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031213 true false

[1,0] -> 1;
[3,3] -> 6;
[2,2] -> 4;
[] -> 0;
[2,1] -> 3;
[1] -> 1;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03144 true false

[3] -> 3;
[0,1] -> 1;
[] -> 0;
[0] -> 0;
[1,1] -> 2;
[1,3] -> 4;
[1,2] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030489 true false

[3,0,2] -> 5;
[2,3] -> 5;
[1,1] -> 2;
[] -> 0;
[3,0] -> 3;
[3,2,1] -> 6;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03089 true false

[2,0,3] -> 5;
[] -> 0;
[3] -> 3;
[0,2,2] -> 4;
[0,2,1] -> 3;
[2] -> 2;
[3,2] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030931 true false

[] -> 0;
[3,3] -> 6;
[2] -> 2;
[3,0] -> 3;
[3] -> 3;
[0,0] -> 0;
[3,1] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030714 true false

[1] -> 1;
[] -> 0;
[2,3] -> 5;
[0] -> 0;
[3] -> 3;
[3,0,3] -> 6;
[1,0,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0305820000001 true false

[2,0,3] -> 5;
[] -> 0;
[0] -> 0;
[0,2,2] -> 4;
[2,0] -> 2;
[2,0,2] -> 4;
[0,2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032007 true false

[2,0,1] -> 3;
[2,0] -> 2;
[] -> 0;
[2] -> 2;
[0,0] -> 0;
[0,1,3] -> 4;
[3,0] -> 3;
[0,3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0318239999999 true false

[1,1] -> 2;
[2] -> 2;
[2,2] -> 4;
[3,2] -> 5;
[] -> 0;
[1] -> 1;
[3] -> 3;
[3,3,3] -> 9;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0315459999999 true false

[] -> 0;
[1] -> 1;
[1,1,1] -> 3;
[1,2] -> 3;
[0] -> 0;
[2,3] -> 5;
[2,3,0] -> 5;
[0,1,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031933 true false

[3] -> 3;
[2,2] -> 4;
[] -> 0;
[0,1,2] -> 3;
[2,0,3] -> 5;
[1,2] -> 3;
[0] -> 0;
[1,0] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0314619999999 true false

[3,1,0] -> 4;
[0,1,2] -> 3;
[] -> 0;
[0] -> 0;
[1,1,0] -> 2;
[2] -> 2;
[2,3,3] -> 8;
[1,0,2] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0322619999999 true false

[3] -> 3;
[0,0,3] -> 3;
[1] -> 1;
[1,1] -> 2;
[3,1] -> 4;
[1,0,0] -> 1;
[0] -> 0;
[1,0,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0316499999999 true false

[3,1,2] -> 6;
[2,2,0] -> 4;
[3] -> 3;
[3,2,1] -> 6;
[0] -> 0;
[] -> 0;
[2,2] -> 4;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031665 true false

[] -> 0;
[1,3] -> 4;
[0,2] -> 2;
[0,1] -> 1;
[1,1,3] -> 5;
[2,2] -> 4;
[1,1,0] -> 2;
[2,3,3] -> 8;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0322940000001 true false

[2,2,1] -> 5;
[1] -> 1;
[] -> 0;
[0,1,3] -> 4;
[1,0,0] -> 1;
[2,3] -> 5;
[2,0,2] -> 4;
[3] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031984 true false

[3] -> 3;
[1,2] -> 3;
[1,3,2] -> 6;
[2] -> 2;
[] -> 0;
[2,3,3] -> 8;
[0,0] -> 0;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0314040000001 true false

[] -> 0;
[3] -> 3;
[2,0,2] -> 4;
[1] -> 1;
[1,3,3] -> 7;
[2,3,3] -> 8;
[2] -> 2;
[2,0,1] -> 3;
[3,0] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0335600000001 true false

[2,3] -> 5;
[2,1,3] -> 6;
[3,1,0] -> 4;
[] -> 0;
[3,3] -> 6;
[1,2] -> 3;
[1] -> 1;
[1,3] -> 4;
[2,1] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0325110000001 true false

[] -> 0;
[1,3,0] -> 4;
[2,0] -> 2;
[1,0,1] -> 2;
[0,2] -> 2;
[3,0] -> 3;
[3,1] -> 4;
[3,0,3] -> 6;
[2,3,0] -> 5;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032823 true false

[0,2,2] -> 4;
[3] -> 3;
[0,2] -> 2;
[] -> 0;
[1,1,3] -> 5;
[0] -> 0;
[2,0,3] -> 5;
[1,2,1] -> 4;
[1,3,0] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033402 true false

[3] -> 3;
[] -> 0;
[3,1] -> 4;
[1,3,0] -> 4;
[0,0,0] -> 0;
[1,1,2] -> 4;
[3,3,2] -> 8;
[3,3,1] -> 7;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0329139999999 true false

[] -> 0;
[0] -> 0;
[1,1,3] -> 5;
[0,2,0] -> 2;
[0,3,1] -> 4;
[2,1] -> 3;
[1,0] -> 1;
[3] -> 3;
[1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032367 true false

[] -> 0;
[1] -> 1;
[0] -> 0;
[2] -> 2;
[1,0] -> 1;
[3,2,2] -> 7;
[3] -> 3;
[0,2,3] -> 5;
[0,1] -> 1;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0320260000001 true false

[1] -> 1;
[0,1] -> 1;
[3] -> 3;
[] -> 0;
[2] -> 2;
[3,0,2] -> 5;
[1,3,0] -> 4;
[1,0,0] -> 1;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031763 true false

[3] -> 3;
[0,0,1] -> 1;
[] -> 0;
[1,3,0] -> 4;
[1] -> 1;
[0,1] -> 1;
[0,3] -> 3;
[3,0,2] -> 5;
[0,3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0327070000001 true false

[3,1] -> 4;
[3,0] -> 3;
[0] -> 0;
[] -> 0;
[2,2,1] -> 5;
[0,1] -> 1;
[2] -> 2;
[0,1,0] -> 1;
[2,0,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033424 true false

[2,3] -> 5;
[2] -> 2;
[] -> 0;
[1,3,1] -> 5;
[2,0] -> 2;
[0] -> 0;
[1,3,0] -> 4;
[2,1] -> 3;
[1,0] -> 1;
[0,2] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0331389999999 true false

[3,2,0] -> 5;
[1,0] -> 1;
[3,0] -> 3;
[2] -> 2;
[3,3] -> 6;
[] -> 0;
[1] -> 1;
[3,2,1] -> 6;
[2,3] -> 5;
[2,2] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0326869999999 true false

[3,1,0] -> 4;
[3] -> 3;
[] -> 0;
[0] -> 0;
[2,2] -> 4;
[2] -> 2;
[1,2] -> 3;
[1] -> 1;
[3,1,3] -> 7;
[2,0] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0324860000001 true false

[3,2] -> 5;
[] -> 0;
[3,1,1] -> 5;
[3] -> 3;
[2] -> 2;
[0,1] -> 1;
[2,0] -> 2;
[0,1,3] -> 4;
[1,2] -> 3;
[0] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032592 true false

[0,1,1] -> 2;
[2,0] -> 2;
[] -> 0;
[3] -> 3;
[2] -> 2;
[1] -> 1;
[3,1] -> 4;
[0] -> 0;
[1,0] -> 1;
[2,3,1] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0331900000001 true false

[2,3] -> 5;
[3,1,0] -> 4;
[0,2,3] -> 5;
[1] -> 1;
[1,0,3] -> 4;
[] -> 0;
[3,3,2] -> 8;
[3,1,1] -> 5;
[1,3,3] -> 7;
[0,1,3] -> 4;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0349249999999 true false

[0,3] -> 3;
[2,3,1] -> 6;
[] -> 0;
[3,3,2] -> 8;
[1] -> 1;
[3,1,1] -> 5;
[3,2,0] -> 5;
[1,0,3] -> 4;
[1,2] -> 3;
[3,3] -> 6;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033518 true false

[0] -> 0;
[2] -> 2;
[1,0,1] -> 2;
[0,3,0] -> 3;
[1,3,0] -> 4;
[2,3,0] -> 5;
[3] -> 3;
[0,1,1] -> 2;
[1,0] -> 1;
[1,0,2] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0344270000001 true false

[0,1,0] -> 1;
[1] -> 1;
[] -> 0;
[3] -> 3;
[2,3,3] -> 8;
[2] -> 2;
[1,3,3] -> 7;
[0,2,3] -> 5;
[0] -> 0;
[0,1,1] -> 2;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0341840000001 true false

[0,2,0] -> 2;
[3,3] -> 6;
[3] -> 3;
[1] -> 1;
[2] -> 2;
[1,1] -> 2;
[] -> 0;
[0,0] -> 0;
[3,2] -> 5;
[2,1] -> 3;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033651 true false

