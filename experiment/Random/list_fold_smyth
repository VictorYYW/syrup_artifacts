list_fold
(countOdd,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.166523 false false

(countOdd,2,[0,0,2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.214367 false false

(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 0 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.129888 false false

(countOdd,2,[3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.252971 false false

(countOdd,1,[1,2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.199253 false false

(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.294454 false false

(countOdd,0,[3,1]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.186769 false false

(add,3,[1,3,0]) -> 7;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 7 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.484953 false false

(add,1,[1,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.205968 false false

(countOdd,1,[2,3,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.198946 false false

(countOdd,1,[3,0,0]) -> 2;
(add,1,[3,1,2]) -> 7;

=================================
NOSOL

(add,0,[2,2,2]) -> 6;
(countOdd,2,[2,3,1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (S (S (S (f 0 (S (S acc)))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.413441 false false

(add,2,[0,3]) -> 5;
(countOdd,1,[1]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (S (f 0 (S acc))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.326563 false false

(add,3,[0,2]) -> 5;
(add,1,[3]) -> 4;

=================================
NOSOL

(countOdd,3,[1]) -> 4;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> countOdd acc acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.335093 false false

(add,3,[]) -> 3;
(countOdd,2,[2,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (S (countOdd 0 acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.344749 false false

(countOdd,2,[0,1]) -> 3;
(countOdd,1,[2,3,2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (S (countOdd 0 (S acc))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.29985 false false

(countOdd,0,[3,0]) -> 1;
(countOdd,3,[1,2,1]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (countOdd acc acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.237292 false false

(countOdd,0,[3,0]) -> 1;
(add,3,[2]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (countOdd acc acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.245175 false false

(countOdd,0,[1,3,0]) -> 2;
(countOdd,2,[0,3,1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (S acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.286631 false false

(countOdd,3,[3]) -> 4;
(countOdd,2,[2,1,2]) -> 3;
(add,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        1

      Cons y1 -> 
        S (S (S (countOdd 0 acc))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.436018 false false

(add,2,[]) -> 2;
(countOdd,3,[3,2]) -> 4;
(countOdd,2,[1]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        2

      Cons y1 -> 
        S (S (S (countOdd 0 acc))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        2

      Cons y1 -> 
        S (S (S (countOdd 0 (fixListFold (#2.2 y1))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.536041 false false

(add,1,[]) -> 1;
(add,3,[2,3,0]) -> 8;
(add,3,[0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        1

      Cons y1 -> 
        S (S (countOdd (fixListFold (#2.2 y1)) (#2.1 y1))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        1

      Cons y1 -> 
        S (S (countOdd (fixListFold (#2.2 y1)) (#2.1 y1))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.860516 false false

(add,1,[0,1]) -> 2;
(countOdd,2,[]) -> 2;
(add,3,[0,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.670355 false false

(add,3,[1]) -> 4;
(add,1,[0]) -> 1;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        add acc (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.305468 false false

(add,0,[]) -> 0;
(add,2,[]) -> 2;
(countOdd,2,[3,1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.230213 false false

(countOdd,0,[0]) -> 0;
(add,2,[3,2,0]) -> 7;
(add,0,[2,3,0]) -> 5;

=================================
None
(countOdd,0,[0,3]) -> 1;
(add,3,[3]) -> 6;
(countOdd,2,[0,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> S (f acc 2) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.327275 false false

(countOdd,0,[0,3]) -> 1;
(countOdd,1,[1,1]) -> 3;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        2

      Cons y1 -> 
        S (add acc acc) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.312159 false false

(add,2,[]) -> 2;
(add,2,[3]) -> 5;
(countOdd,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        S (countOdd (Z y1) (S acc))

      Cons y1 -> 
        S (S (S acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        S (countOdd (Z y1) (S acc))

      Cons y1 -> 
        S (S (S (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.355433 false false

(countOdd,0,[]) -> 0;
(countOdd,3,[2,2,3]) -> 4;
(add,2,[1]) -> 3;
(add,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.316892 false false

(countOdd,0,[]) -> 0;
(add,1,[2,2]) -> 5;
(add,2,[2,3,0]) -> 7;
(countOdd,2,[0,3,3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.349684 true true

(countOdd,1,[1]) -> 2;
(add,1,[2]) -> 3;
(add,3,[3,3,0]) -> 9;
(countOdd,3,[3,2]) -> 4;

=================================
NOSOL

(add,2,[0]) -> 2;
(add,1,[3,0]) -> 4;
(countOdd,2,[2]) -> 2;
(add,1,[0]) -> 1;

=================================
None
(countOdd,3,[1]) -> 4;
(add,2,[0]) -> 2;
(add,3,[1,0,0]) -> 4;
(add,1,[3,1]) -> 5;

=================================
None
(countOdd,3,[3]) -> 4;
(countOdd,2,[2,0]) -> 2;
(countOdd,1,[3]) -> 2;
(add,1,[0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case countOdd 0 acc of
      Z y1 -> 
        2

      S y1 -> 
        case f y1 (S acc) of
          Z y2 -> 
            S acc

          S y2 -> 
            1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.418761 false false

(countOdd,3,[2,0]) -> 3;
(countOdd,2,[2,2,2]) -> 2;
(add,1,[0,0,1]) -> 2;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.18862 false false

(add,2,[1]) -> 3;
(add,3,[3]) -> 6;
(add,0,[]) -> 0;
(countOdd,3,[3,3,1]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.505261 false false

(add,0,[0,3]) -> 3;
(countOdd,0,[1,3,2]) -> 2;
(countOdd,0,[3,1]) -> 2;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        2

      Cons y1 -> 
        S (S (countOdd acc (S (#2.1 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.535841 false false

(countOdd,0,[0,3]) -> 1;
(add,2,[2,2]) -> 6;
(add,3,[0,3,2]) -> 8;
(countOdd,0,[0,2,1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case acc of
      Z y1 -> 
        1

      S y1 -> 
        S (S (add acc acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.395819 false false

(add,0,[3,3,3]) -> 9;
(countOdd,3,[]) -> 3;
(add,2,[1]) -> 3;
(add,2,[3,2,1]) -> 8;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.638002 false false

(countOdd,1,[3,3]) -> 3;
(countOdd,2,[1,1]) -> 4;
(countOdd,3,[2,1]) -> 4;
(add,1,[3,3,0]) -> 7;
(countOdd,3,[2,0,1]) -> 4;

=================================
None
(add,2,[]) -> 2;
(add,1,[1]) -> 2;
(add,0,[]) -> 0;
(add,3,[]) -> 3;
(countOdd,0,[3]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.305976 false false

(countOdd,0,[2,3,1]) -> 2;
(countOdd,0,[1]) -> 1;
(add,2,[1,0,3]) -> 6;
(add,2,[2,3,3]) -> 10;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.010088 true true

(countOdd,0,[0]) -> 0;
(add,1,[2,0]) -> 3;
(countOdd,3,[2]) -> 3;
(add,2,[]) -> 2;
(add,0,[0,3,3]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.310476 true true

(countOdd,2,[1,0]) -> 3;
(add,3,[0,2,3]) -> 8;
(countOdd,3,[]) -> 3;
(countOdd,2,[1,2]) -> 3;
(countOdd,2,[0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.455393 true true

(countOdd,2,[]) -> 2;
(add,0,[1,3]) -> 4;
(countOdd,2,[1,0]) -> 3;
(countOdd,2,[1]) -> 3;
(countOdd,2,[1,1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.40718 false false

(countOdd,0,[3,0]) -> 1;
(countOdd,2,[2]) -> 2;
(countOdd,2,[2,0]) -> 2;
(add,3,[1,3,0]) -> 7;
(countOdd,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.915907 true true

(add,2,[0]) -> 2;
(countOdd,2,[]) -> 2;
(add,0,[0,1]) -> 1;
(add,2,[]) -> 2;
(countOdd,3,[0,3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.735529 false false

(countOdd,0,[2,0]) -> 0;
(countOdd,1,[1,2,1]) -> 3;
(add,0,[]) -> 0;
(add,0,[1,2]) -> 3;
(add,1,[3,3,0]) -> 7;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.289185 true true

(countOdd,2,[]) -> 2;
(add,3,[2,2,2]) -> 9;
(add,2,[1,3,1]) -> 7;
(countOdd,3,[]) -> 3;
(countOdd,3,[0,2]) -> 3;
(countOdd,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.776088 true true

(countOdd,3,[1]) -> 4;
(countOdd,1,[1,1,2]) -> 3;
(countOdd,1,[2]) -> 1;
(add,2,[]) -> 2;
(countOdd,3,[0,1,2]) -> 4;
(countOdd,0,[0]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.524391 false false

(add,2,[1,3]) -> 6;
(countOdd,1,[2,2]) -> 1;
(countOdd,2,[]) -> 2;
(add,3,[3]) -> 6;
(countOdd,3,[0]) -> 3;
(add,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.783954 true true

(countOdd,3,[]) -> 3;
(countOdd,0,[0]) -> 0;
(countOdd,2,[0]) -> 2;
(add,1,[]) -> 1;
(add,2,[2]) -> 4;
(add,0,[2,0,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add acc (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.327716 false false

(countOdd,3,[0]) -> 3;
(add,2,[1]) -> 3;
(add,3,[0,2]) -> 5;
(countOdd,3,[1]) -> 4;
(add,0,[3,0]) -> 3;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.358992 false false

(countOdd,3,[]) -> 3;
(countOdd,3,[1,1]) -> 5;
(add,2,[1,2,3]) -> 8;
(add,2,[]) -> 2;
(add,3,[]) -> 3;
(add,3,[0,3]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.28208 false false

(add,0,[2,2,2]) -> 6;
(add,0,[1]) -> 1;
(countOdd,2,[2]) -> 2;
(countOdd,1,[0,2,3]) -> 2;
(add,2,[0,0]) -> 2;
(add,2,[1,3,0]) -> 6;

=================================
None
(countOdd,2,[3,0,0]) -> 3;
(add,2,[3,0,1]) -> 6;
(add,2,[2,2]) -> 6;
(countOdd,2,[0,3]) -> 3;
(add,1,[2]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
4.040602 true true

(add,1,[0,0]) -> 1;
(add,2,[1,0]) -> 3;
(add,3,[]) -> 3;
(add,2,[]) -> 2;
(add,0,[]) -> 0;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (add (#2.1 y1) (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (countOdd (#2.1 y1) (fixListFold (#2.2 y1))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.340489 false false

(add,3,[2,0]) -> 5;
(countOdd,0,[]) -> 0;
(add,0,[2,2]) -> 4;
(add,1,[3,2]) -> 6;
(add,2,[2]) -> 4;
(countOdd,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) acc)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd (#2.1 y1) (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.530538 false false

(add,1,[1,0]) -> 2;
(add,2,[3]) -> 5;
(add,0,[1]) -> 1;
(add,3,[3,0]) -> 6;
(countOdd,3,[1,0]) -> 4;
(add,0,[]) -> 0;
(countOdd,3,[2,2]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        f acc (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.794885 false true

(countOdd,2,[]) -> 2;
(add,3,[3,0]) -> 6;
(add,0,[]) -> 0;
(countOdd,0,[1,3]) -> 2;
(countOdd,3,[1]) -> 4;
(countOdd,3,[]) -> 3;
(countOdd,2,[2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.562875 true true

(countOdd,0,[3,0]) -> 1;
(countOdd,1,[2,1,2]) -> 2;
(countOdd,2,[3,2,1]) -> 4;
(add,3,[0]) -> 3;
(add,1,[1,2]) -> 4;
(add,2,[2]) -> 4;
(countOdd,0,[3,2,0]) -> 1;

=================================
None
(countOdd,3,[2,0]) -> 3;
(add,0,[]) -> 0;
(countOdd,3,[1]) -> 4;
(add,3,[1]) -> 4;
(countOdd,1,[1,2,0]) -> 2;
(countOdd,0,[3]) -> 1;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd acc (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.527933 false false

(add,0,[1,1,0]) -> 2;
(add,1,[]) -> 1;
(countOdd,1,[3,2,3]) -> 3;
(countOdd,2,[2]) -> 2;
(add,3,[]) -> 3;
(add,3,[1,2]) -> 6;
(add,2,[1,3,3]) -> 9;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.491185 true true

(countOdd,0,[1,0]) -> 1;
(add,3,[1,2]) -> 6;
(countOdd,2,[]) -> 2;
(countOdd,3,[]) -> 3;
(countOdd,0,[3,3]) -> 2;
(countOdd,2,[2]) -> 2;
(countOdd,3,[3,1]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.879582 true true

(countOdd,2,[1,2]) -> 3;
(countOdd,0,[]) -> 0;
(add,1,[3,0,2]) -> 6;
(add,1,[3]) -> 4;
(add,2,[3]) -> 5;
(add,0,[0,2]) -> 2;
(add,2,[3,1,1]) -> 7;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.520483 true true

(countOdd,0,[0,1,2]) -> 1;
(countOdd,0,[0,0]) -> 0;
(countOdd,3,[1]) -> 4;
(countOdd,1,[2,1,1]) -> 3;
(countOdd,1,[0]) -> 1;
(add,1,[3,1]) -> 5;
(add,2,[0,1,0]) -> 3;

=================================
None
(add,0,[]) -> 0;
(countOdd,2,[]) -> 2;
(add,0,[2,2,1]) -> 5;
(add,2,[]) -> 2;
(countOdd,0,[1,2,2]) -> 1;
(countOdd,3,[]) -> 3;
(add,3,[2]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (#2.1 y1) (S (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.486959 false true

(add,2,[]) -> 2;
(add,2,[2,2]) -> 6;
(add,0,[0,2]) -> 2;
(add,3,[1,1,3]) -> 8;
(add,1,[]) -> 1;
(countOdd,3,[]) -> 3;
(add,3,[1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.2012 false false

(countOdd,3,[]) -> 3;
(add,3,[]) -> 3;
(add,0,[1]) -> 1;
(add,3,[0,0,3]) -> 6;
(countOdd,3,[2]) -> 3;
(add,0,[3,2,2]) -> 7;
(add,0,[3,0,1]) -> 4;
(countOdd,3,[0,1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.1478 true true

(countOdd,2,[0]) -> 2;
(add,3,[3,3]) -> 9;
(add,3,[]) -> 3;
(add,2,[]) -> 2;
(add,2,[1,1,1]) -> 5;
(add,0,[]) -> 0;
(add,3,[3]) -> 6;
(countOdd,3,[3,3,1]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.271688 true true

(add,2,[2,1,0]) -> 5;
(countOdd,2,[2]) -> 2;
(add,3,[]) -> 3;
(add,0,[1]) -> 1;
(countOdd,0,[0,1]) -> 1;
(countOdd,0,[0,3,0]) -> 1;
(add,2,[0]) -> 2;
(add,2,[1,0,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.912878 true true

(countOdd,1,[]) -> 1;
(countOdd,0,[1,3]) -> 2;
(countOdd,2,[]) -> 2;
(add,2,[2,2]) -> 6;
(countOdd,1,[0]) -> 1;
(countOdd,2,[2]) -> 2;
(add,3,[2,0,1]) -> 6;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.121058 true true

(add,2,[2]) -> 4;
(add,1,[0]) -> 1;
(countOdd,1,[2,2]) -> 1;
(countOdd,1,[2,3]) -> 2;
(add,0,[3,1,0]) -> 4;
(add,0,[2,2]) -> 4;
(add,3,[2,2]) -> 7;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.872103 true true

(countOdd,0,[]) -> 0;
(countOdd,2,[0,2,3]) -> 3;
(add,3,[1,0,2]) -> 6;
(add,3,[3]) -> 6;
(countOdd,2,[]) -> 2;
(add,2,[2]) -> 4;
(add,3,[2,2,0]) -> 7;
(countOdd,3,[0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.959166 true true

(add,0,[0,1,0]) -> 1;
(add,2,[0,0,2]) -> 4;
(add,3,[0]) -> 3;
(countOdd,3,[1]) -> 4;
(countOdd,0,[]) -> 0;
(add,0,[1]) -> 1;
(countOdd,3,[0]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.640071 false false

(countOdd,1,[1,1]) -> 3;
(countOdd,2,[]) -> 2;
(add,1,[3,2,2]) -> 8;
(add,1,[]) -> 1;
(add,0,[0,2]) -> 2;
(countOdd,0,[3,1]) -> 2;
(countOdd,3,[0]) -> 3;
(add,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.26811 true true

(add,2,[0]) -> 2;
(countOdd,3,[3,3,2]) -> 5;
(add,0,[]) -> 0;
(countOdd,1,[]) -> 1;
(countOdd,0,[1,1]) -> 2;
(countOdd,0,[2,1,3]) -> 2;
(add,1,[2,2]) -> 5;
(add,0,[3,2,3]) -> 8;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.026866 true true

(add,0,[3]) -> 3;
(add,2,[3]) -> 5;
(add,3,[0,3,1]) -> 7;
(add,3,[1]) -> 4;
(countOdd,0,[0,3,2]) -> 1;
(countOdd,3,[]) -> 3;
(countOdd,0,[3]) -> 1;
(countOdd,2,[1]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.299234 true true

(countOdd,0,[2]) -> 0;
(add,1,[]) -> 1;
(add,0,[2,1,1]) -> 4;
(add,1,[0]) -> 1;
(countOdd,3,[3,0]) -> 4;
(add,3,[]) -> 3;
(add,2,[0]) -> 2;
(add,2,[1,0]) -> 3;
(countOdd,0,[3,0,0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.466245 true true

(countOdd,3,[2]) -> 3;
(countOdd,1,[]) -> 1;
(countOdd,0,[1,3,3]) -> 3;
(add,1,[]) -> 1;
(countOdd,1,[1]) -> 2;
(add,3,[0,2]) -> 5;
(add,3,[0,2,1]) -> 6;
(add,2,[2,0]) -> 4;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.028985 true true

(add,1,[0,1,2]) -> 4;
(countOdd,1,[2,1,1]) -> 3;
(add,2,[1]) -> 3;
(add,0,[1,3,2]) -> 6;
(countOdd,2,[1,3,1]) -> 5;
(countOdd,1,[2]) -> 1;
(add,1,[3,1]) -> 5;
(add,2,[2,0,3]) -> 7;
(countOdd,2,[0,0,0]) -> 2;

=================================
None
(countOdd,3,[0,1]) -> 4;
(countOdd,2,[]) -> 2;
(countOdd,3,[0,3,1]) -> 5;
(countOdd,1,[]) -> 1;
(countOdd,0,[3]) -> 1;
(countOdd,3,[1]) -> 4;
(countOdd,3,[]) -> 3;
(countOdd,3,[2]) -> 3;
(add,3,[3,2]) -> 8;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.573012 true true

(add,2,[1,0,2]) -> 5;
(add,3,[3]) -> 6;
(add,1,[1,2]) -> 4;
(add,1,[3,3]) -> 7;
(add,3,[3,3,3]) -> 12;
(add,2,[2,3]) -> 7;
(countOdd,0,[1,1]) -> 2;
(add,0,[0,2,0]) -> 2;
(countOdd,1,[2,1]) -> 2;

=================================
None
(countOdd,1,[1]) -> 2;
(countOdd,3,[2,0,1]) -> 4;
(add,2,[]) -> 2;
(countOdd,2,[0,1]) -> 3;
(add,3,[0]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,1,[2]) -> 1;
(add,2,[2]) -> 4;
(countOdd,3,[0,0,3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.030497 true true

(countOdd,0,[]) -> 0;
(countOdd,3,[2,1,2]) -> 4;
(add,0,[0,2,3]) -> 5;
(add,3,[]) -> 3;
(countOdd,1,[2,2,2]) -> 1;
(add,1,[3,3,0]) -> 7;
(countOdd,1,[0,1]) -> 2;
(countOdd,0,[0]) -> 0;
(countOdd,1,[2,3,2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.469887 true true

(add,2,[1,0]) -> 3;
(add,3,[2,1,2]) -> 8;
(countOdd,1,[]) -> 1;
(countOdd,0,[2]) -> 0;
(add,3,[0,3,1]) -> 7;
(add,3,[0,1,0]) -> 4;
(add,1,[3]) -> 4;
(add,0,[0,0,1]) -> 1;
(add,1,[2]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.496886 true true

(add,2,[2,2]) -> 6;
(add,0,[2,2,3]) -> 7;
(add,0,[3,2]) -> 5;
(countOdd,2,[3,2,3]) -> 4;
(add,3,[0,2,1]) -> 6;
(add,2,[0,3,3]) -> 8;
(countOdd,2,[]) -> 2;
(countOdd,0,[2]) -> 0;
(countOdd,2,[1,1,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.500742 true true

(countOdd,1,[3,1,1]) -> 4;
(countOdd,0,[]) -> 0;
(countOdd,1,[1,2,2]) -> 2;
(countOdd,2,[1,3,3]) -> 5;
(add,3,[0]) -> 3;
(countOdd,2,[]) -> 2;
(add,3,[3,0,3]) -> 9;
(countOdd,2,[2,3,0]) -> 3;
(add,2,[0,1]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.94798 true true

(countOdd,0,[]) -> 0;
(add,2,[2]) -> 4;
(add,0,[2]) -> 2;
(add,2,[1,2,1]) -> 6;
(add,1,[]) -> 1;
(add,3,[]) -> 3;
(countOdd,1,[2,2]) -> 1;
(countOdd,0,[2,2,3]) -> 1;
(countOdd,0,[3,1]) -> 2;
(countOdd,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.668103 true true

(add,2,[]) -> 2;
(countOdd,2,[1,3]) -> 4;
(add,1,[3,0]) -> 4;
(countOdd,2,[3,1,1]) -> 5;
(add,0,[0]) -> 0;
(countOdd,3,[0,2,0]) -> 3;
(add,3,[0,2,1]) -> 6;
(countOdd,0,[]) -> 0;
(countOdd,1,[3,1,0]) -> 3;
(add,3,[3,3,3]) -> 12;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.019171 true true

(add,1,[3]) -> 4;
(countOdd,2,[1]) -> 3;
(countOdd,2,[0]) -> 2;
(add,0,[]) -> 0;
(countOdd,2,[]) -> 2;
(add,3,[]) -> 3;
(add,3,[3]) -> 6;
(add,1,[0,3,3]) -> 7;
(countOdd,3,[1,0,3]) -> 5;
(add,1,[2,2]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.367825 true true

(add,0,[2,3,1]) -> 6;
(add,1,[3,3,1]) -> 8;
(add,2,[3]) -> 5;
(add,2,[]) -> 2;
(add,1,[0]) -> 1;
(countOdd,1,[3]) -> 2;
(add,0,[1,2,2]) -> 5;
(add,1,[3,1]) -> 5;
(countOdd,0,[]) -> 0;
(countOdd,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.664205 true true

(countOdd,1,[]) -> 1;
(countOdd,3,[]) -> 3;
(add,0,[]) -> 0;
(countOdd,2,[1,2,3]) -> 4;
(add,2,[1,1]) -> 4;
(add,1,[1]) -> 2;
(countOdd,1,[2,2]) -> 1;
(countOdd,0,[3]) -> 1;
(countOdd,2,[3,1]) -> 4;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.652598 false false

(countOdd,2,[]) -> 2;
(countOdd,2,[0,2]) -> 2;
(add,1,[0,3]) -> 4;
(add,2,[2]) -> 4;
(add,1,[0]) -> 1;
(countOdd,0,[]) -> 0;
(add,3,[1]) -> 4;
(countOdd,0,[3,0,1]) -> 2;
(countOdd,3,[3]) -> 4;
(add,1,[2,3,1]) -> 7;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.800517 true true

(countOdd,3,[]) -> 3;
(add,1,[3,0,0]) -> 4;
(add,3,[0,0]) -> 3;
(add,1,[0,2,3]) -> 6;
(countOdd,2,[]) -> 2;
(countOdd,3,[0,3]) -> 4;
(add,0,[]) -> 0;
(countOdd,1,[2,2]) -> 1;
(add,1,[]) -> 1;
(countOdd,3,[0,3,2]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.953144 true true

(countOdd,0,[3]) -> 1;
(countOdd,3,[0,2,3]) -> 4;
(countOdd,2,[3]) -> 3;
(countOdd,3,[1]) -> 4;
(add,2,[]) -> 2;
(add,1,[]) -> 1;
(add,1,[2,3,2]) -> 8;
(countOdd,0,[]) -> 0;
(add,0,[]) -> 0;
(countOdd,1,[2]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.674182 true true

(countOdd,3,[]) -> 3;
(countOdd,3,[2,1,1]) -> 5;
(add,3,[]) -> 3;
(countOdd,3,[1]) -> 4;
(add,1,[0,2]) -> 3;
(countOdd,1,[2,3,3]) -> 3;
(countOdd,2,[2,1]) -> 3;
(countOdd,0,[2]) -> 0;
(countOdd,1,[]) -> 1;
(add,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.515314 true true

(countOdd,1,[1]) -> 2;
(countOdd,3,[1]) -> 4;
(add,0,[]) -> 0;
(countOdd,3,[2,3,2]) -> 4;
(countOdd,3,[2,3]) -> 4;
(countOdd,2,[3,1,0]) -> 4;
(countOdd,2,[]) -> 2;
(add,2,[1,3,0]) -> 6;
(countOdd,1,[0]) -> 1;
(countOdd,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.014165 true true

(add,1,[3,2]) -> 6;
(add,3,[3]) -> 6;
(add,0,[3,3]) -> 6;
(add,0,[]) -> 0;
(countOdd,3,[1]) -> 4;
(add,2,[]) -> 2;
(countOdd,2,[0,1]) -> 3;
(add,1,[]) -> 1;
(countOdd,1,[0]) -> 1;
(countOdd,2,[0,0,0]) -> 2;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.715346 false false

(countOdd,2,[]) -> 2;
(countOdd,1,[0,1,0]) -> 2;
(countOdd,2,[1,2]) -> 3;
(countOdd,0,[0,2]) -> 0;
(add,0,[0,1]) -> 1;
(add,1,[]) -> 1;
(add,0,[]) -> 0;
(add,3,[1,3,1]) -> 8;
(add,2,[]) -> 2;
(add,0,[3,3]) -> 6;
(countOdd,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.522397 true true

(add,3,[]) -> 3;
(add,3,[1,2,0]) -> 6;
(add,2,[]) -> 2;
(add,2,[1]) -> 3;
(countOdd,3,[]) -> 3;
(add,2,[1,2]) -> 5;
(countOdd,0,[]) -> 0;
(countOdd,1,[]) -> 1;
(countOdd,3,[2,0]) -> 3;
(add,1,[2,2,0]) -> 5;
(add,3,[1,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.46348 true true

(countOdd,0,[3]) -> 1;
(add,3,[]) -> 3;
(countOdd,2,[3]) -> 3;
(add,0,[3]) -> 3;
(add,2,[3]) -> 5;
(add,3,[2,0,1]) -> 6;
(countOdd,0,[0,1,0]) -> 1;
(countOdd,0,[1,0]) -> 1;
(add,1,[3]) -> 4;
(countOdd,2,[]) -> 2;
(countOdd,0,[2]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.533449 true true

(add,3,[]) -> 3;
(add,3,[2,0]) -> 5;
(add,0,[]) -> 0;
(countOdd,2,[0,2]) -> 2;
(countOdd,0,[]) -> 0;
(countOdd,2,[0,0]) -> 2;
(countOdd,3,[0,3]) -> 4;
(add,0,[1,1]) -> 2;
(add,2,[]) -> 2;
(countOdd,2,[]) -> 2;
(add,0,[0]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.555262 true true

(add,2,[2]) -> 4;
(add,2,[]) -> 2;
(add,1,[3,2]) -> 6;
(countOdd,2,[1,2]) -> 3;
(countOdd,1,[]) -> 1;
(add,0,[2,3]) -> 5;
(add,0,[]) -> 0;
(countOdd,2,[1,1,2]) -> 4;
(add,2,[0,0]) -> 2;
(countOdd,0,[1]) -> 1;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.732394 true true

(countOdd,0,[]) -> 0;
(add,3,[]) -> 3;
(countOdd,3,[0,3]) -> 4;
(add,1,[3,0]) -> 4;
(add,0,[3]) -> 3;
(add,1,[]) -> 1;
(countOdd,3,[]) -> 3;
(add,2,[]) -> 2;
(countOdd,1,[3,1,3]) -> 4;
(add,2,[0,1,0]) -> 3;
(countOdd,0,[1,0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.707951 true true

(countOdd,0,[2,0]) -> 0;
(add,2,[1,2]) -> 5;
(add,1,[0,3]) -> 4;
(add,1,[0]) -> 1;
(countOdd,0,[3,1,1]) -> 3;
(add,1,[2]) -> 3;
(add,0,[]) -> 0;
(countOdd,3,[0,2]) -> 3;
(add,3,[]) -> 3;
(countOdd,2,[2]) -> 2;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.543195 true true

(add,2,[1,2,3]) -> 8;
(countOdd,0,[]) -> 0;
(add,1,[1]) -> 2;
(countOdd,2,[]) -> 2;
(add,0,[2,1]) -> 3;
(add,2,[0]) -> 2;
(add,1,[]) -> 1;
(countOdd,1,[3]) -> 2;
(add,3,[0]) -> 3;
(countOdd,1,[]) -> 1;
(add,3,[2,2,2]) -> 9;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.900366 true true

(countOdd,3,[0,2]) -> 3;
(countOdd,1,[2,2]) -> 1;
(add,0,[2]) -> 2;
(add,2,[]) -> 2;
(countOdd,0,[2,0]) -> 0;
(countOdd,1,[]) -> 1;
(countOdd,1,[0]) -> 1;
(add,1,[3,1,3]) -> 8;
(add,2,[0,1,0]) -> 3;
(add,2,[2,0,3]) -> 7;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.559992 true true

(countOdd,2,[3]) -> 3;
(add,3,[2,1]) -> 6;
(add,3,[1,0,2]) -> 6;
(countOdd,2,[0]) -> 2;
(add,2,[2]) -> 4;
(countOdd,3,[2,0]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,1,[3]) -> 2;
(countOdd,1,[1,0,1]) -> 3;
(countOdd,3,[]) -> 3;
(add,3,[]) -> 3;
(add,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.87721 true true

(countOdd,2,[0,0]) -> 2;
(add,1,[0]) -> 1;
(add,3,[1,0]) -> 4;
(countOdd,1,[]) -> 1;
(countOdd,3,[3,2,1]) -> 5;
(countOdd,1,[2,2]) -> 1;
(countOdd,2,[0]) -> 2;
(countOdd,3,[2,1]) -> 4;
(countOdd,0,[1,0,3]) -> 2;
(countOdd,3,[2]) -> 3;
(add,2,[]) -> 2;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.04866 false false

(countOdd,0,[3,1]) -> 2;
(add,2,[1,1]) -> 4;
(add,3,[3,2,1]) -> 9;
(add,0,[]) -> 0;
(add,1,[]) -> 1;
(countOdd,1,[]) -> 1;
(add,2,[]) -> 2;
(countOdd,0,[0]) -> 0;
(add,1,[1,2]) -> 4;
(countOdd,1,[2,1,3]) -> 3;
(countOdd,2,[1]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.601889 true true

(add,3,[2,0]) -> 5;
(countOdd,1,[2]) -> 1;
(add,2,[1]) -> 3;
(add,0,[]) -> 0;
(add,1,[]) -> 1;
(add,0,[1]) -> 1;
(countOdd,0,[]) -> 0;
(add,2,[3]) -> 5;
(countOdd,2,[3,0]) -> 3;
(countOdd,0,[1]) -> 1;
(countOdd,1,[1,3]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.727434 true true

(add,3,[3,1,0]) -> 7;
(add,3,[1,3,2]) -> 9;
(countOdd,1,[2,0]) -> 1;
(countOdd,0,[3]) -> 1;
(countOdd,1,[]) -> 1;
(add,1,[0]) -> 1;
(countOdd,1,[1,2]) -> 2;
(add,1,[]) -> 1;
(countOdd,0,[3,1]) -> 2;
(countOdd,3,[0]) -> 3;
(countOdd,1,[0,0]) -> 1;
(countOdd,0,[1,1]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.050906 true true

(countOdd,2,[3]) -> 3;
(add,2,[2]) -> 4;
(add,2,[]) -> 2;
(add,1,[1,3]) -> 5;
(add,1,[2,3]) -> 6;
(add,3,[]) -> 3;
(add,3,[2,3,2]) -> 10;
(add,2,[2,0]) -> 4;
(countOdd,0,[]) -> 0;
(add,1,[2]) -> 3;
(add,1,[]) -> 1;
(add,1,[3,0,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.620729 true true

(add,0,[]) -> 0;
(add,3,[1,2,0]) -> 6;
(countOdd,2,[1,0,0]) -> 3;
(countOdd,2,[0]) -> 2;
(countOdd,3,[3,2]) -> 4;
(add,2,[2,0,0]) -> 4;
(add,1,[]) -> 1;
(countOdd,3,[1,3,0]) -> 5;
(countOdd,2,[0,1,0]) -> 3;
(add,3,[]) -> 3;
(add,3,[0,2]) -> 5;
(countOdd,1,[2]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.40924 true true

(add,1,[0,1,0]) -> 2;
(countOdd,0,[2,0]) -> 0;
(add,1,[1,2,0]) -> 4;
(add,0,[2,0]) -> 2;
(add,1,[3,3,1]) -> 8;
(countOdd,1,[2]) -> 1;
(add,1,[]) -> 1;
(add,2,[1,3]) -> 6;
(add,2,[3,2,3]) -> 10;
(countOdd,2,[3,0,0]) -> 3;
(countOdd,3,[]) -> 3;
(add,1,[1]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.610353 true true

(countOdd,1,[3,1,1]) -> 4;
(add,2,[]) -> 2;
(countOdd,1,[3,0]) -> 2;
(countOdd,2,[]) -> 2;
(countOdd,1,[3]) -> 2;
(add,0,[0,0,1]) -> 1;
(add,0,[2]) -> 2;
(add,0,[]) -> 0;
(add,3,[2,2,1]) -> 8;
(add,0,[2,3]) -> 5;
(add,0,[1]) -> 1;
(add,0,[0,1,0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.83016 true true

(countOdd,2,[]) -> 2;
(countOdd,3,[3]) -> 4;
(add,0,[3]) -> 3;
(countOdd,2,[2,2]) -> 2;
(add,0,[]) -> 0;
(add,0,[0,0]) -> 0;
(countOdd,1,[3,3,0]) -> 3;
(add,1,[1,2,1]) -> 5;
(countOdd,1,[1]) -> 2;
(countOdd,0,[0]) -> 0;
(countOdd,0,[3,2]) -> 1;
(add,3,[3,3,2]) -> 11;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.605235 true true

(add,1,[0]) -> 1;
(countOdd,1,[]) -> 1;
(countOdd,2,[2,1,2]) -> 3;
(countOdd,0,[2]) -> 0;
(countOdd,0,[]) -> 0;
(countOdd,2,[2,1]) -> 3;
(add,2,[0]) -> 2;
(add,0,[2]) -> 2;
(countOdd,2,[3,2]) -> 3;
(add,1,[3,3,2]) -> 9;
(add,1,[0,2,1]) -> 4;
(countOdd,3,[]) -> 3;
(countOdd,2,[2,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.653406 true true

(countOdd,2,[]) -> 2;
(add,0,[1,1]) -> 2;
(add,1,[1]) -> 2;
(countOdd,1,[]) -> 1;
(countOdd,3,[3,3,1]) -> 6;
(countOdd,0,[0,1,3]) -> 2;
(add,2,[2,0,2]) -> 6;
(add,0,[1,3]) -> 4;
(add,2,[2,2,3]) -> 9;
(add,2,[1]) -> 3;
(countOdd,2,[1,1]) -> 4;
(countOdd,0,[]) -> 0;
(countOdd,0,[2,2,3]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.026496 true true

(countOdd,2,[3,2,1]) -> 4;
(countOdd,0,[]) -> 0;
(countOdd,3,[3]) -> 4;
(countOdd,2,[3,3]) -> 4;
(countOdd,0,[3]) -> 1;
(countOdd,0,[0,3]) -> 1;
(add,0,[0,3]) -> 3;
(countOdd,0,[2,3]) -> 1;
(countOdd,1,[3,2]) -> 2;
(countOdd,3,[0]) -> 3;
(countOdd,3,[2,0,2]) -> 3;
(add,3,[3,3]) -> 9;
(countOdd,2,[2,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.780755 true true

(add,0,[1,0]) -> 1;
(countOdd,2,[]) -> 2;
(add,0,[]) -> 0;
(countOdd,1,[1]) -> 2;
(countOdd,3,[3,2]) -> 4;
(countOdd,1,[3,2,1]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,1,[1,2,0]) -> 2;
(add,3,[2]) -> 5;
(countOdd,3,[]) -> 3;
(countOdd,0,[2,3,3]) -> 2;
(add,2,[0]) -> 2;
(add,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.858954 true true

(add,3,[2]) -> 5;
(add,0,[2]) -> 2;
(add,3,[2,0]) -> 5;
(add,0,[1,2,1]) -> 4;
(countOdd,3,[0,0]) -> 3;
(add,0,[]) -> 0;
(add,1,[]) -> 1;
(countOdd,0,[2,2]) -> 0;
(add,2,[1,1]) -> 4;
(countOdd,1,[]) -> 1;
(countOdd,0,[3,3]) -> 2;
(countOdd,2,[2,1,0]) -> 3;
(add,2,[0,2,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.630187 true true

(add,0,[]) -> 0;
(countOdd,2,[1,2]) -> 3;
(add,3,[]) -> 3;
(add,3,[2,2,3]) -> 10;
(add,0,[3,1,1]) -> 5;
(add,2,[2,3]) -> 7;
(countOdd,3,[3]) -> 4;
(add,2,[2,1,3]) -> 8;
(countOdd,1,[0]) -> 1;
(add,1,[0,2,0]) -> 3;
(add,0,[1,0,1]) -> 2;
(countOdd,3,[]) -> 3;
(add,1,[3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.967668 true true

(countOdd,1,[0,2]) -> 1;
(countOdd,0,[0]) -> 0;
(add,1,[]) -> 1;
(add,2,[2]) -> 4;
(countOdd,0,[1,1]) -> 2;
(add,3,[3]) -> 6;
(countOdd,3,[0,3,0]) -> 4;
(add,2,[0]) -> 2;
(add,0,[0,3,2]) -> 5;
(countOdd,3,[1,2]) -> 4;
(add,0,[0]) -> 0;
(countOdd,1,[3]) -> 2;
(add,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.612297 true true

(countOdd,0,[]) -> 0;
(add,3,[1]) -> 4;
(add,0,[1,1,1]) -> 3;
(add,0,[0]) -> 0;
(countOdd,1,[3]) -> 2;
(add,1,[]) -> 1;
(add,0,[1]) -> 1;
(countOdd,3,[3]) -> 4;
(add,0,[3]) -> 3;
(add,1,[3,2,2]) -> 8;
(countOdd,0,[0]) -> 0;
(countOdd,0,[3]) -> 1;
(countOdd,2,[1,2]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.579827 true true

(countOdd,1,[3,1]) -> 3;
(add,3,[0,2,3]) -> 8;
(countOdd,0,[0,2]) -> 0;
(add,1,[]) -> 1;
(add,0,[3,3,0]) -> 6;
(countOdd,0,[0,0]) -> 0;
(add,2,[]) -> 2;
(add,2,[3,3,2]) -> 10;
(countOdd,2,[0]) -> 2;
(countOdd,3,[3]) -> 4;
(countOdd,3,[2,1,2]) -> 4;
(add,2,[3,1,0]) -> 6;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.652593 true true

(add,3,[2]) -> 5;
(add,1,[3,1,3]) -> 8;
(countOdd,1,[2]) -> 1;
(add,3,[3,1]) -> 7;
(countOdd,0,[]) -> 0;
(countOdd,2,[]) -> 2;
(add,2,[0,1,2]) -> 5;
(add,3,[0,0]) -> 3;
(add,3,[3,0]) -> 6;
(countOdd,0,[1,0,1]) -> 2;
(add,0,[0]) -> 0;
(countOdd,0,[1,0]) -> 1;
(countOdd,2,[2,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.646664 true true

(add,1,[]) -> 1;
(add,0,[1]) -> 1;
(countOdd,2,[2,3]) -> 3;
(countOdd,1,[0]) -> 1;
(countOdd,0,[2,3]) -> 1;
(countOdd,1,[]) -> 1;
(countOdd,1,[1]) -> 2;
(add,3,[3,3]) -> 9;
(countOdd,2,[]) -> 2;
(countOdd,0,[0,3,1]) -> 2;
(add,0,[]) -> 0;
(countOdd,3,[0,2]) -> 3;
(countOdd,3,[]) -> 3;
(add,3,[2,0,0]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.939109 true true

(countOdd,2,[]) -> 2;
(countOdd,1,[2,0]) -> 1;
(add,2,[2,3]) -> 7;
(add,3,[]) -> 3;
(countOdd,3,[1,3]) -> 5;
(add,3,[2,0]) -> 5;
(countOdd,1,[1]) -> 2;
(countOdd,1,[1,0]) -> 2;
(countOdd,0,[0,3]) -> 1;
(countOdd,2,[3]) -> 3;
(countOdd,3,[2,3]) -> 4;
(add,2,[3]) -> 5;
(countOdd,3,[]) -> 3;
(add,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.17154 true true

(add,0,[]) -> 0;
(add,3,[0,1,3]) -> 7;
(countOdd,2,[3,3,3]) -> 5;
(add,3,[1,0,2]) -> 6;
(add,3,[2,1,1]) -> 7;
(countOdd,2,[1]) -> 3;
(add,3,[]) -> 3;
(countOdd,1,[0,0]) -> 1;
(countOdd,0,[]) -> 0;
(countOdd,2,[1,2]) -> 3;
(countOdd,1,[3,0,0]) -> 2;
(add,3,[1,2,3]) -> 9;
(countOdd,2,[]) -> 2;
(countOdd,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.14139 true true

(countOdd,2,[0,0,2]) -> 2;
(add,3,[2,2]) -> 7;
(add,1,[]) -> 1;
(add,1,[3,3,3]) -> 10;
(add,2,[0,2]) -> 4;
(countOdd,3,[3]) -> 4;
(countOdd,3,[1]) -> 4;
(add,3,[3,2,0]) -> 8;
(countOdd,2,[3,3,1]) -> 5;
(countOdd,0,[]) -> 0;
(add,3,[2]) -> 5;
(add,0,[2,0]) -> 2;
(add,3,[1,0]) -> 4;
(countOdd,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.799129 true true

(countOdd,3,[]) -> 3;
(add,2,[3,0]) -> 5;
(add,3,[]) -> 3;
(add,2,[1,0,1]) -> 4;
(countOdd,2,[3,2,3]) -> 4;
(add,0,[1]) -> 1;
(countOdd,0,[2,2]) -> 0;
(add,0,[0,3,0]) -> 3;
(add,1,[1,0]) -> 2;
(countOdd,3,[0,1]) -> 4;
(countOdd,2,[2]) -> 2;
(add,2,[0]) -> 2;
(countOdd,0,[]) -> 0;
(add,2,[2,1,1]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.680459 true true

(countOdd,0,[0,3]) -> 1;
(countOdd,3,[3,1]) -> 5;
(countOdd,2,[2]) -> 2;
(add,1,[2,2]) -> 5;
(countOdd,1,[]) -> 1;
(countOdd,2,[1,1,0]) -> 4;
(add,1,[]) -> 1;
(add,0,[1,1]) -> 2;
(add,3,[]) -> 3;
(add,1,[0,1]) -> 2;
(countOdd,3,[3,2]) -> 4;
(countOdd,1,[0,3,2]) -> 2;
(countOdd,3,[3]) -> 4;
(add,0,[1,0,3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.776254 true true

(countOdd,1,[]) -> 1;
(add,1,[2,3]) -> 6;
(countOdd,2,[1,1]) -> 4;
(add,0,[3,3,1]) -> 7;
(countOdd,3,[]) -> 3;
(countOdd,0,[1,0]) -> 1;
(countOdd,2,[2]) -> 2;
(countOdd,2,[]) -> 2;
(add,3,[1,3,2]) -> 9;
(countOdd,2,[1]) -> 3;
(countOdd,1,[1,2,0]) -> 2;
(add,0,[]) -> 0;
(add,1,[0,1,3]) -> 5;
(add,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.930873 true true

(countOdd,1,[3,2]) -> 2;
(add,2,[3,0,1]) -> 6;
(add,2,[0,3]) -> 5;
(countOdd,1,[2,1]) -> 2;
(countOdd,0,[2]) -> 0;
(add,2,[2,2,0]) -> 6;
(countOdd,1,[]) -> 1;
(countOdd,3,[1,0,3]) -> 5;
(add,1,[3,0]) -> 4;
(add,3,[0]) -> 3;
(countOdd,3,[1,0]) -> 4;
(add,0,[0,2]) -> 2;
(countOdd,0,[1]) -> 1;
(add,0,[2,0,2]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.671246 true true

(countOdd,2,[3]) -> 3;
(add,0,[]) -> 0;
(add,3,[2,0,1]) -> 6;
(add,2,[1,1]) -> 4;
(add,2,[1,0]) -> 3;
(add,2,[0,0,3]) -> 5;
(add,3,[3,1]) -> 7;
(add,0,[3,0]) -> 3;
(add,2,[0,3]) -> 5;
(add,3,[2]) -> 5;
(add,3,[3,3]) -> 9;
(countOdd,3,[0,2,1]) -> 4;
(add,2,[]) -> 2;
(add,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.101927 true true

(add,0,[3]) -> 3;
(countOdd,2,[0,2,2]) -> 2;
(add,1,[0,3,2]) -> 6;
(countOdd,2,[]) -> 2;
(countOdd,0,[1,3,2]) -> 2;
(add,0,[0,3]) -> 3;
(add,2,[2,3]) -> 7;
(add,0,[1,3,3]) -> 7;
(add,3,[2]) -> 5;
(add,3,[3]) -> 6;
(add,0,[]) -> 0;
(countOdd,1,[0,1,0]) -> 2;
(add,1,[]) -> 1;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.265374 true true

(countOdd,0,[0,1]) -> 1;
(countOdd,2,[3,0]) -> 3;
(add,0,[2,3,0]) -> 5;
(countOdd,1,[2,3]) -> 2;
(add,0,[]) -> 0;
(countOdd,0,[3]) -> 1;
(countOdd,2,[]) -> 2;
(countOdd,3,[3,3,0]) -> 5;
(add,3,[3,3,2]) -> 11;
(add,0,[2,3,1]) -> 6;
(add,3,[2]) -> 5;
(countOdd,0,[2,1]) -> 1;
(countOdd,3,[0,1]) -> 4;
(add,2,[1]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.035766 true true

(countOdd,3,[3,3]) -> 5;
(add,2,[0,1]) -> 3;
(add,2,[]) -> 2;
(add,3,[]) -> 3;
(countOdd,2,[1,2,1]) -> 4;
(add,2,[2,2]) -> 6;
(countOdd,0,[1]) -> 1;
(add,0,[1]) -> 1;
(countOdd,1,[3]) -> 2;
(countOdd,3,[3]) -> 4;
(countOdd,1,[3,2]) -> 2;
(add,3,[0]) -> 3;
(countOdd,3,[1,0]) -> 4;
(countOdd,1,[]) -> 1;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.028806 true true

(add,1,[2]) -> 3;
(countOdd,0,[2,1]) -> 1;
(add,1,[0,2,3]) -> 6;
(add,3,[3,2,1]) -> 9;
(countOdd,0,[3,0,3]) -> 2;
(countOdd,2,[3]) -> 3;
(add,2,[1,2,3]) -> 8;
(countOdd,3,[0,3]) -> 4;
(countOdd,1,[3,3,1]) -> 4;
(countOdd,3,[3,2]) -> 4;
(countOdd,0,[3,2]) -> 1;
(add,1,[0,1,2]) -> 4;
(countOdd,3,[]) -> 3;
(add,3,[]) -> 3;
(countOdd,1,[3,2]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.192621 true true

(countOdd,0,[2]) -> 0;
(add,1,[]) -> 1;
(add,3,[]) -> 3;
(add,0,[2,2,3]) -> 7;
(add,2,[2]) -> 4;
(countOdd,3,[2]) -> 3;
(add,3,[3]) -> 6;
(countOdd,2,[]) -> 2;
(add,0,[]) -> 0;
(add,1,[0,0]) -> 1;
(countOdd,0,[]) -> 0;
(add,2,[0]) -> 2;
(countOdd,3,[3]) -> 4;
(countOdd,0,[3,3,3]) -> 3;
(countOdd,1,[0,2]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.674642 true true

(countOdd,0,[]) -> 0;
(add,3,[2]) -> 5;
(countOdd,3,[0]) -> 3;
(add,1,[]) -> 1;
(add,3,[]) -> 3;
(add,3,[1]) -> 4;
(countOdd,1,[1]) -> 2;
(add,1,[3,3]) -> 7;
(add,0,[]) -> 0;
(countOdd,1,[0]) -> 1;
(countOdd,1,[1,0]) -> 2;
(countOdd,2,[]) -> 2;
(countOdd,2,[0]) -> 2;
(countOdd,1,[2,2,0]) -> 1;
(add,0,[1,0,0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.907421 true true

(countOdd,0,[0,1,1]) -> 2;
(add,3,[1,1,2]) -> 7;
(add,2,[2,2,2]) -> 8;
(add,0,[3]) -> 3;
(countOdd,3,[3,0,1]) -> 5;
(countOdd,1,[2]) -> 1;
(countOdd,0,[1,3,1]) -> 3;
(countOdd,3,[2,3]) -> 4;
(countOdd,3,[]) -> 3;
(countOdd,1,[1,1]) -> 3;
(add,0,[]) -> 0;
(countOdd,0,[]) -> 0;
(add,0,[3,1]) -> 4;
(add,3,[1,1]) -> 5;
(countOdd,0,[1,3]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.102244 true true

(countOdd,3,[3,2]) -> 4;
(countOdd,2,[3,3]) -> 4;
(add,1,[]) -> 1;
(add,2,[2,2]) -> 6;
(add,1,[1,3]) -> 5;
(add,1,[3,3]) -> 7;
(add,0,[2,2,1]) -> 5;
(add,3,[1,3]) -> 7;
(countOdd,3,[1]) -> 4;
(countOdd,3,[1,1]) -> 5;
(countOdd,3,[]) -> 3;
(add,0,[1]) -> 1;
(countOdd,3,[3,0,1]) -> 5;
(add,2,[3]) -> 5;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.056847 true true

(add,3,[2]) -> 5;
(add,0,[0]) -> 0;
(add,3,[1]) -> 4;
(countOdd,0,[]) -> 0;
(countOdd,3,[1,2]) -> 4;
(countOdd,0,[0,1]) -> 1;
(add,2,[2,3]) -> 7;
(countOdd,3,[1,1]) -> 5;
(countOdd,0,[3]) -> 1;
(add,3,[3,3]) -> 9;
(countOdd,2,[1,1,1]) -> 5;
(countOdd,1,[1,0]) -> 2;
(countOdd,3,[1,3]) -> 5;
(add,2,[0,2]) -> 4;
(add,2,[3,1,0]) -> 6;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.777959 true true

(add,0,[0,3,1]) -> 4;
(add,0,[]) -> 0;
(add,2,[2,3,0]) -> 7;
(add,0,[1,0,3]) -> 4;
(countOdd,3,[0]) -> 3;
(add,3,[2,0,3]) -> 8;
(countOdd,0,[]) -> 0;
(add,3,[2,1,1]) -> 7;
(countOdd,1,[]) -> 1;
(countOdd,2,[1]) -> 3;
(add,1,[3,2]) -> 6;
(add,0,[3,0]) -> 3;
(add,3,[]) -> 3;
(countOdd,1,[3,1,1]) -> 4;
(countOdd,2,[1,3,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.095641 true true

(add,2,[0,0,0]) -> 2;
(countOdd,1,[3,3,2]) -> 3;
(countOdd,1,[3,3,0]) -> 3;
(add,0,[0]) -> 0;
(add,3,[]) -> 3;
(countOdd,3,[0]) -> 3;
(countOdd,1,[2]) -> 1;
(add,0,[3]) -> 3;
(add,3,[2,0,1]) -> 6;
(add,2,[3,1]) -> 6;
(countOdd,1,[]) -> 1;
(add,1,[1]) -> 2;
(add,2,[3,2]) -> 7;
(countOdd,2,[0,3]) -> 3;
(add,3,[2]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.749072 true true

(add,1,[1,0,1]) -> 3;
(countOdd,1,[0,0]) -> 1;
(countOdd,1,[2]) -> 1;
(countOdd,2,[1,0,3]) -> 4;
(add,2,[]) -> 2;
(add,3,[3,3]) -> 9;
(add,0,[2,2]) -> 4;
(add,1,[0,3,3]) -> 7;
(add,1,[1,1]) -> 3;
(add,0,[1]) -> 1;
(countOdd,0,[0]) -> 0;
(countOdd,1,[]) -> 1;
(add,3,[2,2,2]) -> 9;
(add,2,[1]) -> 3;
(countOdd,0,[1,0]) -> 1;
(add,0,[3,2]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.720682 true true

(countOdd,1,[2,1]) -> 2;
(add,2,[1,2,0]) -> 5;
(countOdd,0,[]) -> 0;
(countOdd,1,[]) -> 1;
(add,3,[0]) -> 3;
(add,3,[]) -> 3;
(add,3,[2,1,2]) -> 8;
(add,1,[3,3,0]) -> 7;
(add,3,[1,3,3]) -> 10;
(countOdd,0,[2,3,3]) -> 2;
(add,3,[0,2,1]) -> 6;
(add,3,[0,0,2]) -> 5;
(countOdd,2,[1,2,2]) -> 3;
(add,1,[]) -> 1;
(add,0,[0,3]) -> 3;
(countOdd,1,[3]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.825842 true true

(add,3,[2,1]) -> 6;
(countOdd,2,[1,0]) -> 3;
(add,1,[]) -> 1;
(add,2,[0]) -> 2;
(countOdd,3,[0,1]) -> 4;
(add,1,[0,1]) -> 2;
(add,2,[3,3,0]) -> 8;
(add,1,[2,2,3]) -> 8;
(add,3,[1,3]) -> 7;
(countOdd,3,[2,3]) -> 4;
(countOdd,2,[]) -> 2;
(add,3,[0,3,2]) -> 8;
(add,3,[0,2]) -> 5;
(add,3,[0,3]) -> 6;
(countOdd,0,[1,3,0]) -> 2;
(add,0,[2,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
3.446568 true true

(add,1,[]) -> 1;
(add,0,[]) -> 0;
(countOdd,3,[0]) -> 3;
(countOdd,2,[0,2]) -> 2;
(add,3,[1]) -> 4;
(countOdd,0,[]) -> 0;
(add,0,[2,1]) -> 3;
(add,2,[3,2,2]) -> 9;
(add,3,[]) -> 3;
(add,1,[0,0]) -> 1;
(countOdd,2,[1]) -> 3;
(add,3,[0,1]) -> 4;
(add,3,[0,2,2]) -> 7;
(countOdd,0,[1]) -> 1;
(countOdd,3,[2,1,1]) -> 5;
(countOdd,2,[0,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.194059 true true

(add,0,[3,3,1]) -> 7;
(countOdd,2,[2,3]) -> 3;
(add,0,[1,3,2]) -> 6;
(countOdd,1,[1,0]) -> 2;
(add,3,[2,0]) -> 5;
(add,0,[1,2]) -> 3;
(add,2,[0,3,3]) -> 8;
(countOdd,0,[1,0,1]) -> 2;
(add,1,[]) -> 1;
(countOdd,1,[]) -> 1;
(countOdd,3,[]) -> 3;
(add,1,[0,0]) -> 1;
(countOdd,0,[3,0]) -> 1;
(countOdd,3,[3,0,0]) -> 4;
(countOdd,1,[3,2,1]) -> 3;
(countOdd,2,[0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.072653 true true

(countOdd,1,[1,3]) -> 3;
(add,1,[2,2]) -> 5;
(add,3,[0,3,3]) -> 9;
(countOdd,0,[2,3,0]) -> 1;
(countOdd,3,[2,3,2]) -> 4;
(add,0,[]) -> 0;
(add,3,[1]) -> 4;
(countOdd,1,[]) -> 1;
(add,1,[2]) -> 3;
(countOdd,3,[3,1]) -> 5;
(countOdd,2,[2]) -> 2;
(add,2,[1,2]) -> 5;
(countOdd,2,[]) -> 2;
(countOdd,3,[1]) -> 4;
(add,3,[1,1]) -> 5;
(add,2,[1,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.132105 true true

(countOdd,0,[1,1]) -> 2;
(countOdd,2,[0]) -> 2;
(countOdd,0,[1,0]) -> 1;
(add,3,[3,0]) -> 6;
(add,0,[1,1,0]) -> 2;
(countOdd,2,[]) -> 2;
(add,0,[1]) -> 1;
(countOdd,3,[1,0,3]) -> 5;
(add,2,[3,0,2]) -> 7;
(countOdd,0,[2,3,0]) -> 1;
(countOdd,1,[1,1]) -> 3;
(add,0,[]) -> 0;
(countOdd,3,[1]) -> 4;
(countOdd,2,[0,0]) -> 2;
(add,0,[2]) -> 2;
(countOdd,3,[3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.225447 true true

(add,3,[2]) -> 5;
(countOdd,3,[2,0]) -> 3;
(countOdd,2,[3]) -> 3;
(add,3,[2,3,3]) -> 11;
(countOdd,2,[]) -> 2;
(countOdd,3,[]) -> 3;
(countOdd,2,[2,0,3]) -> 3;
(add,2,[3,1,0]) -> 6;
(countOdd,1,[]) -> 1;
(countOdd,1,[0]) -> 1;
(add,0,[2,1,0]) -> 3;
(countOdd,2,[2,3,0]) -> 3;
(countOdd,0,[3,2]) -> 1;
(countOdd,2,[0]) -> 2;
(countOdd,3,[0,3,3]) -> 5;
(countOdd,2,[0,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.33427 true true

(add,1,[2]) -> 3;
(add,1,[0]) -> 1;
(add,3,[1,3,3]) -> 10;
(add,0,[0]) -> 0;
(add,0,[3]) -> 3;
(add,1,[3,0,3]) -> 7;
(countOdd,3,[2,0,1]) -> 4;
(add,1,[2,3,1]) -> 7;
(countOdd,1,[0]) -> 1;
(countOdd,3,[3]) -> 4;
(add,3,[2,2,0]) -> 7;
(countOdd,1,[3,3,0]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,1,[]) -> 1;
(add,3,[2]) -> 5;
(countOdd,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.768128 true true

(countOdd,0,[0]) -> 0;
(countOdd,1,[3,1]) -> 3;
(countOdd,2,[3]) -> 3;
(countOdd,2,[]) -> 2;
(countOdd,0,[0,0,0]) -> 0;
(add,0,[3,0]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,0,[3,3]) -> 2;
(countOdd,2,[0]) -> 2;
(countOdd,2,[2,3]) -> 3;
(countOdd,3,[2]) -> 3;
(countOdd,0,[0,0]) -> 0;
(countOdd,2,[3,2,0]) -> 3;
(countOdd,1,[]) -> 1;
(countOdd,3,[1]) -> 4;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.682855 true true

(add,1,[]) -> 1;
(add,2,[]) -> 2;
(add,2,[1,2]) -> 5;
(add,1,[2,0]) -> 3;
(countOdd,1,[2]) -> 1;
(countOdd,0,[]) -> 0;
(countOdd,0,[0,3]) -> 1;
(add,3,[2]) -> 5;
(countOdd,2,[1]) -> 3;
(countOdd,0,[1]) -> 1;
(add,0,[1,1]) -> 2;
(add,3,[2,1]) -> 6;
(countOdd,3,[]) -> 3;
(add,1,[1,3]) -> 5;
(countOdd,2,[3,0]) -> 3;
(countOdd,1,[1,0]) -> 2;
(add,2,[2,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.0237 true true

(add,0,[0,3,1]) -> 4;
(add,0,[3]) -> 3;
(countOdd,1,[3]) -> 2;
(countOdd,3,[2]) -> 3;
(add,1,[2]) -> 3;
(countOdd,2,[1,1]) -> 4;
(countOdd,1,[1,2,1]) -> 3;
(add,1,[1,1]) -> 3;
(countOdd,2,[2]) -> 2;
(add,2,[3,0,3]) -> 8;
(countOdd,0,[0,3,1]) -> 2;
(countOdd,2,[3,1,1]) -> 5;
(add,0,[3,3]) -> 6;
(add,2,[3,1,0]) -> 6;
(add,0,[2,3,2]) -> 7;
(countOdd,2,[3,1]) -> 4;
(add,3,[3,3,3]) -> 12;

=================================
None
(countOdd,0,[0,2,2]) -> 0;
(countOdd,0,[2,2,0]) -> 0;
(countOdd,0,[3]) -> 1;
(add,1,[1,2,2]) -> 6;
(countOdd,0,[1,1,0]) -> 2;
(countOdd,1,[]) -> 1;
(add,0,[1]) -> 1;
(countOdd,0,[]) -> 0;
(countOdd,2,[3]) -> 3;
(add,1,[3,0]) -> 4;
(countOdd,1,[1,1]) -> 3;
(add,0,[3,3]) -> 6;
(add,0,[0,0,2]) -> 2;
(countOdd,3,[3,1]) -> 5;
(add,2,[0]) -> 2;
(countOdd,1,[3]) -> 2;
(countOdd,0,[1,3]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.711025 true true

(add,1,[0,2,1]) -> 4;
(countOdd,2,[]) -> 2;
(countOdd,1,[]) -> 1;
(add,2,[0]) -> 2;
(add,2,[3]) -> 5;
(add,2,[2,3,0]) -> 7;
(countOdd,1,[1]) -> 2;
(add,0,[]) -> 0;
(countOdd,1,[0]) -> 1;
(countOdd,3,[0,3,2]) -> 4;
(countOdd,3,[1,2,1]) -> 5;
(add,3,[1,1,2]) -> 7;
(add,3,[3]) -> 6;
(add,1,[1,2,1]) -> 5;
(countOdd,2,[1]) -> 3;
(add,3,[1,2,2]) -> 8;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.697774 true true

(countOdd,3,[3,2]) -> 4;
(add,3,[2]) -> 5;
(countOdd,3,[3]) -> 4;
(countOdd,2,[1,1,0]) -> 4;
(add,3,[3,0,2]) -> 8;
(add,1,[0,3,0]) -> 4;
(add,2,[1,0,3]) -> 6;
(add,2,[]) -> 2;
(countOdd,0,[1,2]) -> 1;
(add,1,[3,1,2]) -> 7;
(countOdd,0,[]) -> 0;
(add,3,[1]) -> 4;
(add,1,[0]) -> 1;
(add,3,[]) -> 3;
(add,1,[2,1]) -> 4;
(countOdd,0,[2,2,0]) -> 0;
(add,1,[]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.82541 true true

(add,3,[2]) -> 5;
(countOdd,3,[3,1]) -> 5;
(add,3,[3,3]) -> 9;
(countOdd,0,[0,3]) -> 1;
(add,0,[0,3,2]) -> 5;
(countOdd,2,[0,0]) -> 2;
(add,3,[0,2,3]) -> 8;
(add,1,[2]) -> 3;
(add,0,[1]) -> 1;
(add,0,[]) -> 0;
(countOdd,2,[2,2,1]) -> 3;
(add,1,[1,2,2]) -> 6;
(countOdd,3,[3,3,3]) -> 6;
(add,2,[]) -> 2;
(add,3,[3]) -> 6;
(add,1,[3,0]) -> 4;
(countOdd,1,[0,0]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.37953 true true

(add,1,[3,0,3]) -> 7;
(add,2,[]) -> 2;
(add,3,[1,1,0]) -> 5;
(countOdd,1,[2,1]) -> 2;
(countOdd,1,[]) -> 1;
(add,3,[]) -> 3;
(countOdd,2,[2,3,1]) -> 4;
(countOdd,1,[0]) -> 1;
(countOdd,2,[]) -> 2;
(add,2,[0,1,0]) -> 3;
(add,3,[2,2,3]) -> 10;
(add,1,[2,2]) -> 5;
(countOdd,2,[2]) -> 2;
(add,2,[0]) -> 2;
(countOdd,1,[2,1,0]) -> 2;
(countOdd,1,[1,3,2]) -> 3;
(countOdd,1,[0,2,3]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.323912 true true

(add,0,[1,3,2]) -> 6;
(countOdd,3,[2,3]) -> 4;
(add,2,[]) -> 2;
(add,3,[2]) -> 5;
(countOdd,3,[0,3]) -> 4;
(add,2,[2]) -> 4;
(add,2,[3]) -> 5;
(countOdd,2,[1]) -> 3;
(countOdd,3,[]) -> 3;
(add,1,[]) -> 1;
(countOdd,3,[2,2]) -> 3;
(add,0,[2,3]) -> 5;
(countOdd,2,[3,2]) -> 3;
(countOdd,3,[0]) -> 3;
(countOdd,0,[2,3]) -> 1;
(add,3,[]) -> 3;
(add,2,[2,1,3]) -> 8;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.939013 true true

(add,2,[0]) -> 2;
(countOdd,2,[3,1]) -> 4;
(add,0,[]) -> 0;
(add,0,[3]) -> 3;
(add,3,[2]) -> 5;
(countOdd,2,[1,3]) -> 4;
(countOdd,3,[1,0,0]) -> 4;
(add,2,[3]) -> 5;
(add,2,[2,0,1]) -> 5;
(countOdd,3,[]) -> 3;
(countOdd,0,[2,2]) -> 0;
(add,3,[0,0]) -> 3;
(countOdd,1,[]) -> 1;
(add,2,[2,3]) -> 7;
(countOdd,2,[0,3,1]) -> 4;
(countOdd,2,[1,0]) -> 3;
(countOdd,2,[3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.825569 true true

(add,1,[]) -> 1;
(countOdd,3,[3]) -> 4;
(countOdd,0,[]) -> 0;
(add,2,[0,3]) -> 5;
(countOdd,2,[2,1]) -> 3;
(countOdd,2,[3,2]) -> 3;
(add,0,[3,0]) -> 3;
(add,1,[1,2,0]) -> 4;
(add,1,[0,3,0]) -> 4;
(countOdd,1,[3]) -> 2;
(countOdd,1,[]) -> 1;
(countOdd,3,[1]) -> 4;
(add,3,[1]) -> 4;
(add,1,[3,1,3]) -> 8;
(countOdd,3,[0,0,2]) -> 3;
(add,0,[3]) -> 3;
(add,3,[]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.580842 true true

(add,3,[3,1]) -> 7;
(add,1,[0,0,3]) -> 4;
(add,0,[3,1,3]) -> 7;
(countOdd,3,[0,0]) -> 3;
(countOdd,1,[0]) -> 1;
(countOdd,1,[1,2]) -> 2;
(add,1,[0,0,2]) -> 3;
(countOdd,2,[1,1,0]) -> 4;
(add,0,[0,0,2]) -> 2;
(add,2,[1,2]) -> 5;
(countOdd,2,[1]) -> 3;
(countOdd,0,[2]) -> 0;
(add,0,[2,1,3]) -> 6;
(add,1,[1]) -> 2;
(add,2,[]) -> 2;
(add,0,[1,2,2]) -> 5;
(add,2,[2,3,3]) -> 10;
(add,0,[2,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.801542 true true

(add,1,[]) -> 1;
(add,3,[]) -> 3;
(countOdd,0,[1]) -> 1;
(add,3,[2,0]) -> 5;
(add,0,[2,1,2]) -> 5;
(countOdd,3,[1,0,3]) -> 5;
(countOdd,2,[2,3]) -> 3;
(add,1,[3,0,3]) -> 7;
(countOdd,3,[]) -> 3;
(countOdd,1,[]) -> 1;
(countOdd,0,[2]) -> 0;
(add,3,[3,3,2]) -> 11;
(countOdd,3,[3,1,2]) -> 5;
(add,1,[2,0,3]) -> 6;
(add,1,[2,2,2]) -> 7;
(add,3,[1,2,2]) -> 8;
(countOdd,2,[]) -> 2;
(countOdd,0,[2,1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.857628 true true

(countOdd,2,[]) -> 2;
(add,2,[]) -> 2;
(countOdd,2,[3,1,0]) -> 4;
(add,2,[1,3]) -> 6;
(add,1,[]) -> 1;
(countOdd,3,[2,3]) -> 4;
(countOdd,0,[]) -> 0;
(add,2,[3]) -> 5;
(countOdd,3,[1,3]) -> 5;
(add,0,[0,3,3]) -> 6;
(add,0,[]) -> 0;
(countOdd,0,[1]) -> 1;
(add,1,[3,0]) -> 4;
(add,0,[0]) -> 0;
(countOdd,0,[1,0]) -> 1;
(countOdd,2,[2,2,1]) -> 3;
(countOdd,1,[0]) -> 1;
(add,2,[0,0,1]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.782191 true true

(add,2,[3]) -> 5;
(add,3,[0]) -> 3;
(countOdd,3,[1,3]) -> 5;
(add,2,[3,0,2]) -> 7;
(countOdd,1,[0,3]) -> 2;
(countOdd,2,[3,0]) -> 3;
(add,0,[1,1]) -> 2;
(add,1,[2]) -> 3;
(add,1,[2,1,3]) -> 7;
(add,1,[]) -> 1;
(add,0,[2]) -> 2;
(countOdd,0,[2,3]) -> 1;
(countOdd,3,[]) -> 3;
(add,1,[0]) -> 1;
(add,1,[3]) -> 4;
(add,2,[2,0,3]) -> 7;
(countOdd,2,[2,0,1]) -> 3;
(countOdd,2,[2,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.183852 true true

(add,0,[1,1,2]) -> 4;
(countOdd,1,[1,0,2]) -> 2;
(add,3,[2]) -> 5;
(countOdd,2,[3]) -> 3;
(add,2,[]) -> 2;
(add,0,[3,0,0]) -> 3;
(countOdd,0,[2,3,3]) -> 2;
(countOdd,0,[3]) -> 1;
(add,0,[0,2,3]) -> 5;
(countOdd,3,[]) -> 3;
(add,2,[0]) -> 2;
(countOdd,1,[1,3]) -> 3;
(add,2,[1]) -> 3;
(add,0,[3,0,2]) -> 5;
(countOdd,1,[0,3]) -> 2;
(add,0,[2,2,1]) -> 5;
(add,3,[3,3,0]) -> 9;
(add,3,[1,2,2]) -> 8;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
2.372691 true true

(countOdd,0,[1]) -> 1;
(countOdd,2,[3,0,1]) -> 4;
(add,0,[3]) -> 3;
(add,3,[2]) -> 5;
(countOdd,3,[0,3]) -> 4;
(add,2,[]) -> 2;
(add,3,[0,2]) -> 5;
(add,2,[0,0]) -> 2;
(countOdd,3,[0]) -> 3;
(countOdd,2,[0,3,0]) -> 3;
(add,0,[1]) -> 1;
(add,1,[3,3,2]) -> 9;
(countOdd,1,[1]) -> 2;
(add,1,[2]) -> 3;
(add,2,[3]) -> 5;
(countOdd,2,[0,1,0]) -> 3;
(add,0,[]) -> 0;
(countOdd,2,[3,0,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.461081 true true

(add,3,[1]) -> 4;
(countOdd,2,[]) -> 2;
(countOdd,1,[0,2]) -> 1;
(countOdd,0,[]) -> 0;
(countOdd,3,[3]) -> 4;
(add,2,[1,0,2]) -> 5;
(countOdd,0,[3,3]) -> 2;
(countOdd,0,[0,0,1]) -> 1;
(countOdd,3,[]) -> 3;
(add,3,[]) -> 3;
(add,0,[1,2]) -> 3;
(countOdd,1,[0,2,1]) -> 2;
(add,3,[3,2,0]) -> 8;
(countOdd,0,[0]) -> 0;
(countOdd,1,[0,1,2]) -> 2;
(add,3,[0,2,0]) -> 5;
(add,3,[2,2]) -> 7;
(countOdd,0,[1,0,2]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.899851 true true

(add,3,[3,0]) -> 6;
(add,0,[2,3,0]) -> 5;
(countOdd,1,[0]) -> 1;
(countOdd,2,[3,3,1]) -> 5;
(add,2,[0]) -> 2;
(countOdd,0,[]) -> 0;
(add,1,[2,3,0]) -> 6;
(countOdd,2,[3]) -> 3;
(countOdd,3,[3,2,3]) -> 5;
(add,1,[]) -> 1;
(add,0,[2]) -> 2;
(countOdd,0,[1,3]) -> 2;
(countOdd,1,[2]) -> 1;
(add,0,[3,2]) -> 5;
(add,3,[]) -> 3;
(add,3,[1]) -> 4;
(countOdd,2,[]) -> 2;
(add,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.146262 true true

(add,2,[2]) -> 4;
(add,2,[]) -> 2;
(countOdd,0,[2]) -> 0;
(countOdd,0,[0,1]) -> 1;
(countOdd,0,[]) -> 0;
(add,3,[0,0]) -> 3;
(countOdd,3,[]) -> 3;
(add,0,[2,2,0]) -> 4;
(countOdd,1,[3,3,2]) -> 3;
(add,2,[2,0,2]) -> 6;
(add,1,[]) -> 1;
(add,1,[3,0]) -> 4;
(add,2,[1,2]) -> 5;
(countOdd,0,[0,3]) -> 1;
(add,0,[1,3]) -> 4;
(add,1,[1,0,1]) -> 3;
(countOdd,3,[0]) -> 3;
(add,1,[1,1,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.797365 true true

(countOdd,1,[0]) -> 1;
(add,2,[1,1,3]) -> 7;
(add,2,[2,0]) -> 4;
(countOdd,0,[]) -> 0;
(add,1,[]) -> 1;
(add,2,[1,1,2]) -> 6;
(countOdd,3,[1,3]) -> 5;
(add,0,[]) -> 0;
(countOdd,2,[1,1]) -> 4;
(add,0,[1,0,2]) -> 3;
(countOdd,3,[1,0]) -> 4;
(add,3,[3,0]) -> 6;
(countOdd,2,[1]) -> 3;
(countOdd,0,[3,3,2]) -> 2;
(countOdd,0,[3,3]) -> 2;
(add,1,[3,1,2]) -> 7;
(add,3,[3]) -> 6;
(add,1,[3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.464318 true true

(countOdd,2,[]) -> 2;
(add,0,[1]) -> 1;
(add,0,[2,1,0]) -> 3;
(countOdd,1,[1,1,3]) -> 4;
(countOdd,2,[1,1,3]) -> 5;
(countOdd,1,[2]) -> 1;
(countOdd,2,[2,2]) -> 2;
(countOdd,1,[2,0]) -> 1;
(add,3,[1,1,0]) -> 5;
(add,0,[]) -> 0;
(countOdd,2,[3]) -> 3;
(countOdd,3,[1]) -> 4;
(countOdd,3,[2]) -> 3;
(countOdd,2,[3,2]) -> 3;
(countOdd,0,[1,3]) -> 2;
(add,3,[2,1,2]) -> 8;
(countOdd,1,[0,3]) -> 2;
(countOdd,0,[3,0,2]) -> 1;
(add,3,[2,2,3]) -> 10;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.496755 true true

(countOdd,3,[0,0,3]) -> 4;
(add,1,[0]) -> 1;
(add,3,[3,1,1]) -> 8;
(countOdd,1,[3,0,0]) -> 2;
(add,0,[3]) -> 3;
(countOdd,0,[3,2,1]) -> 2;
(countOdd,0,[1,0,0]) -> 1;
(countOdd,1,[]) -> 1;
(add,0,[0]) -> 0;
(countOdd,0,[1,1]) -> 2;
(countOdd,1,[2,2]) -> 1;
(countOdd,2,[]) -> 2;
(countOdd,0,[]) -> 0;
(countOdd,3,[3,1,2]) -> 5;
(countOdd,1,[1,1,0]) -> 3;
(add,1,[2]) -> 3;
(countOdd,2,[1,2]) -> 3;
(countOdd,1,[0,0,2]) -> 1;
(countOdd,3,[1,1]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.829648 true true

(countOdd,1,[2]) -> 1;
(countOdd,2,[0,3,3]) -> 4;
(countOdd,3,[2]) -> 3;
(add,2,[1]) -> 3;
(countOdd,2,[2]) -> 2;
(countOdd,1,[1]) -> 2;
(countOdd,2,[3]) -> 3;
(add,2,[3,0]) -> 5;
(add,3,[]) -> 3;
(add,1,[0,2]) -> 3;
(countOdd,1,[]) -> 1;
(countOdd,0,[0,2]) -> 0;
(add,3,[0,1,0]) -> 4;
(countOdd,2,[3,0,3]) -> 4;
(add,3,[2,2]) -> 7;
(countOdd,2,[1,3,3]) -> 5;
(add,1,[1]) -> 2;
(countOdd,1,[2,0]) -> 1;
(countOdd,2,[]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.402518 true true

(countOdd,2,[1,2]) -> 3;
(add,3,[]) -> 3;
(add,1,[2]) -> 3;
(add,1,[2,2,3]) -> 8;
(add,2,[0,0]) -> 2;
(add,2,[0,0,3]) -> 5;
(add,3,[1,2]) -> 6;
(add,1,[2,0,1]) -> 4;
(add,1,[0]) -> 1;
(countOdd,2,[]) -> 2;
(countOdd,3,[2,1]) -> 4;
(add,2,[3]) -> 5;
(add,0,[0]) -> 0;
(countOdd,1,[0]) -> 1;
(countOdd,2,[0,0]) -> 2;
(add,1,[0,3,2]) -> 6;
(countOdd,3,[]) -> 3;
(countOdd,2,[3,1]) -> 4;
(countOdd,3,[0,3,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.394091 true true

(add,0,[0,0,0]) -> 0;
(countOdd,1,[0,3]) -> 2;
(add,3,[1,0]) -> 4;
(countOdd,3,[2,1,2]) -> 4;
(countOdd,1,[2,3,3]) -> 3;
(countOdd,0,[3]) -> 1;
(add,3,[0,2]) -> 5;
(countOdd,3,[1,3]) -> 5;
(add,3,[2,1]) -> 6;
(countOdd,1,[2,1,3]) -> 3;
(countOdd,2,[3,1,1]) -> 5;
(add,0,[]) -> 0;
(add,2,[]) -> 2;
(add,1,[1,3,2]) -> 7;
(countOdd,0,[0,1]) -> 1;
(countOdd,3,[1]) -> 4;
(add,2,[1,3]) -> 6;
(add,3,[0,1,3]) -> 7;
(countOdd,3,[0,3,0]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.922697 true true

(countOdd,1,[3,0,3]) -> 3;
(countOdd,2,[3]) -> 3;
(add,3,[]) -> 3;
(add,1,[2,3,1]) -> 7;
(add,0,[]) -> 0;
(countOdd,0,[]) -> 0;
(add,0,[0]) -> 0;
(countOdd,0,[3]) -> 1;
(countOdd,2,[2]) -> 2;
(countOdd,1,[3,1,1]) -> 4;
(add,1,[2,2,3]) -> 8;
(countOdd,0,[0,2]) -> 0;
(countOdd,1,[]) -> 1;
(add,0,[1,2,3]) -> 6;
(countOdd,2,[2,1,2]) -> 3;
(countOdd,3,[1,1]) -> 5;
(countOdd,2,[]) -> 2;
(add,3,[0]) -> 3;
(add,2,[3,0]) -> 5;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.875167 true true

(countOdd,3,[]) -> 3;
(countOdd,2,[]) -> 2;
(add,0,[]) -> 0;
(add,2,[2]) -> 4;
(add,3,[]) -> 3;
(add,1,[]) -> 1;
(add,1,[3,0]) -> 4;
(countOdd,3,[2]) -> 3;
(countOdd,2,[1,1]) -> 4;
(countOdd,1,[3]) -> 2;
(countOdd,3,[2,2,3]) -> 4;
(countOdd,0,[2]) -> 0;
(add,2,[0,0]) -> 2;
(countOdd,2,[1,3,3]) -> 5;
(add,3,[3,1,2]) -> 9;
(add,3,[2,2,3]) -> 10;
(add,3,[1,3]) -> 7;
(add,2,[3,0]) -> 5;
(countOdd,2,[3,3]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.422106 true true

(add,3,[2,1,3]) -> 9;
(countOdd,0,[3]) -> 1;
(countOdd,1,[3,0]) -> 2;
(add,1,[1,3,1]) -> 6;
(countOdd,3,[]) -> 3;
(countOdd,0,[]) -> 0;
(countOdd,0,[0,2]) -> 0;
(add,2,[1,2,3]) -> 8;
(countOdd,1,[1,0]) -> 2;
(add,2,[3,3,0]) -> 8;
(countOdd,0,[0,1]) -> 1;
(add,0,[]) -> 0;
(countOdd,1,[1,2,0]) -> 2;
(add,1,[3]) -> 4;
(countOdd,1,[]) -> 1;
(add,3,[0,1,3]) -> 7;
(countOdd,0,[2,0]) -> 0;
(countOdd,1,[1,3]) -> 3;
(countOdd,0,[2]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.798899 true true

(countOdd,0,[1,2]) -> 1;
(add,2,[2,1,1]) -> 6;
(countOdd,1,[]) -> 1;
(add,3,[1]) -> 4;
(countOdd,0,[2]) -> 0;
(add,0,[0]) -> 0;
(countOdd,2,[0]) -> 2;
(add,1,[3,3]) -> 7;
(add,1,[]) -> 1;
(countOdd,3,[]) -> 3;
(countOdd,0,[3,1]) -> 2;
(add,1,[1,0]) -> 2;
(countOdd,1,[3,0]) -> 2;
(add,0,[1,2,3]) -> 6;
(add,0,[1,2]) -> 3;
(countOdd,0,[3,3,2]) -> 2;
(countOdd,1,[1,1,1]) -> 4;
(add,1,[1]) -> 2;
(countOdd,1,[1,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.841821 true true

(add,2,[1,0,3]) -> 6;
(countOdd,0,[]) -> 0;
(countOdd,2,[2,3,2]) -> 3;
(countOdd,1,[0]) -> 1;
(countOdd,2,[2]) -> 2;
(add,0,[1,3]) -> 4;
(countOdd,2,[0,0]) -> 2;
(countOdd,0,[2,3,2]) -> 1;
(countOdd,3,[2]) -> 3;
(add,1,[]) -> 1;
(countOdd,3,[1,1]) -> 5;
(countOdd,1,[1]) -> 2;
(add,2,[]) -> 2;
(countOdd,0,[0,3]) -> 1;
(add,3,[1,1,0]) -> 5;
(add,3,[3]) -> 6;
(add,0,[3,0]) -> 3;
(countOdd,1,[3,1,0]) -> 3;
(countOdd,1,[1,0]) -> 2;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.412281 true true

(add,3,[]) -> 3;
(add,0,[0,0]) -> 0;
(add,0,[0]) -> 0;
(add,2,[0,2]) -> 4;
(add,2,[1]) -> 3;
(add,1,[2,2]) -> 5;
(add,2,[0,3,1]) -> 6;
(countOdd,2,[2]) -> 2;
(add,0,[3]) -> 3;
(add,1,[]) -> 1;
(add,1,[0,0]) -> 1;
(countOdd,1,[]) -> 1;
(add,3,[2]) -> 5;
(countOdd,2,[3,3,2]) -> 4;
(countOdd,0,[]) -> 0;
(countOdd,2,[0]) -> 2;
(add,0,[2]) -> 2;
(add,3,[3,2]) -> 8;
(countOdd,2,[3,0,2]) -> 3;
(add,1,[0,2]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.87482 true true

(countOdd,3,[1,0]) -> 4;
(add,2,[]) -> 2;
(countOdd,1,[]) -> 1;
(countOdd,3,[0]) -> 3;
(countOdd,1,[0,1]) -> 2;
(add,3,[2]) -> 5;
(add,3,[0,1]) -> 4;
(add,1,[0,2]) -> 3;
(countOdd,2,[0]) -> 2;
(add,1,[2,0,2]) -> 5;
(add,3,[3,1]) -> 7;
(add,0,[2]) -> 2;
(countOdd,3,[0,0,1]) -> 4;
(countOdd,0,[0]) -> 0;
(add,1,[]) -> 1;
(countOdd,2,[]) -> 2;
(add,2,[3]) -> 5;
(add,3,[0]) -> 3;
(countOdd,1,[3,2]) -> 2;
(add,1,[0,2,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.017796 true true

(countOdd,2,[2,3,1]) -> 4;
(countOdd,2,[3]) -> 3;
(add,3,[1]) -> 4;
(countOdd,0,[]) -> 0;
(add,2,[2]) -> 4;
(countOdd,1,[2,2,3]) -> 2;
(add,3,[0,3]) -> 6;
(countOdd,2,[2]) -> 2;
(add,3,[3,3,3]) -> 12;
(countOdd,0,[1,0,0]) -> 1;
(add,0,[3,3,2]) -> 8;
(countOdd,2,[1]) -> 3;
(add,0,[]) -> 0;
(countOdd,3,[]) -> 3;
(countOdd,0,[1]) -> 1;
(add,0,[0,2]) -> 2;
(countOdd,2,[1,1]) -> 4;
(countOdd,1,[1]) -> 2;
(countOdd,2,[0,3,0]) -> 3;
(countOdd,2,[2,3]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.371474 true true

(countOdd,3,[]) -> 3;
(add,0,[]) -> 0;
(countOdd,0,[1,2]) -> 1;
(countOdd,0,[2,0]) -> 0;
(countOdd,2,[0,0]) -> 2;
(add,0,[1,0]) -> 1;
(countOdd,2,[3,3,3]) -> 5;
(countOdd,0,[1]) -> 1;
(add,0,[0,3]) -> 3;
(countOdd,3,[0]) -> 3;
(add,1,[0,3,2]) -> 6;
(add,3,[1,3]) -> 7;
(countOdd,0,[2,0,3]) -> 1;
(countOdd,2,[]) -> 2;
(countOdd,3,[0,3]) -> 4;
(countOdd,1,[2]) -> 1;
(add,3,[]) -> 3;
(add,2,[3]) -> 5;
(countOdd,2,[0,3,0]) -> 3;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.880274 true true

(add,3,[3,2,3]) -> 11;
(add,2,[]) -> 2;
(add,1,[1,0,2]) -> 4;
(countOdd,1,[3]) -> 2;
(countOdd,1,[3,3]) -> 3;
(countOdd,0,[1]) -> 1;
(add,3,[1,3,3]) -> 10;
(countOdd,0,[]) -> 0;
(add,0,[1,1,0]) -> 2;
(countOdd,2,[2,3,1]) -> 4;
(countOdd,2,[1]) -> 3;
(countOdd,2,[3]) -> 3;
(add,0,[2,1]) -> 3;
(add,3,[0,3]) -> 6;
(countOdd,0,[0,1]) -> 1;
(countOdd,2,[0,3]) -> 3;
(countOdd,3,[1,2,3]) -> 5;
(add,0,[2]) -> 2;
(countOdd,1,[]) -> 1;
(add,2,[2]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.426436 true true

(add,2,[]) -> 2;
(add,3,[2,0]) -> 5;
(countOdd,0,[0]) -> 0;
(countOdd,2,[2,2]) -> 2;
(add,1,[1,0,3]) -> 5;
(add,3,[]) -> 3;
(add,3,[0,2,3]) -> 8;
(add,1,[2]) -> 3;
(countOdd,3,[0,3]) -> 4;
(countOdd,2,[1,1,2]) -> 4;
(add,0,[1]) -> 1;
(add,3,[3,1,3]) -> 10;
(add,0,[3]) -> 3;
(countOdd,1,[2,1]) -> 2;
(countOdd,1,[]) -> 1;
(countOdd,3,[1,3]) -> 5;
(add,2,[1,0]) -> 3;
(add,1,[]) -> 1;
(countOdd,2,[1,2]) -> 3;
(countOdd,0,[]) -> 0;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.971774 true true

(countOdd,3,[2,2,0]) -> 3;
(countOdd,1,[3,1]) -> 3;
(add,0,[]) -> 0;
(add,3,[3,2,1]) -> 9;
(add,3,[3,0]) -> 6;
(countOdd,3,[2]) -> 3;
(add,2,[1,0]) -> 3;
(add,2,[0,2,1]) -> 5;
(add,2,[1,0,0]) -> 3;
(countOdd,0,[0]) -> 0;
(countOdd,2,[3]) -> 3;
(countOdd,0,[0,1]) -> 1;
(add,0,[0,1]) -> 1;
(add,2,[]) -> 2;
(add,0,[3,3]) -> 6;
(countOdd,1,[1,1]) -> 3;
(countOdd,2,[3,2,3]) -> 4;
(add,0,[0,3,2]) -> 5;
(countOdd,2,[]) -> 2;
(countOdd,0,[1]) -> 1;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.904467 true true

(countOdd,2,[2]) -> 2;
(countOdd,3,[2,3,1]) -> 5;
(add,1,[]) -> 1;
(countOdd,1,[0]) -> 1;
(countOdd,0,[0,0,3]) -> 1;
(add,3,[]) -> 3;
(add,3,[3]) -> 6;
(countOdd,1,[1,1]) -> 3;
(countOdd,3,[1,0,0]) -> 4;
(countOdd,1,[]) -> 1;
(countOdd,1,[1,1,1]) -> 4;
(add,2,[1,1]) -> 4;
(countOdd,1,[1,2]) -> 2;
(add,0,[0]) -> 0;
(countOdd,3,[0,2,0]) -> 3;
(countOdd,1,[3,2]) -> 2;
(countOdd,0,[]) -> 0;
(countOdd,3,[3]) -> 4;
(add,2,[]) -> 2;
(countOdd,2,[1,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.933199 true true

(countOdd,2,[3,3,2]) -> 4;
(add,3,[]) -> 3;
(add,1,[3,2,2]) -> 8;
(countOdd,0,[3,0,0]) -> 1;
(add,2,[3]) -> 5;
(countOdd,3,[1,0,2]) -> 4;
(countOdd,1,[2,3,2]) -> 2;
(add,2,[0,0]) -> 2;
(add,0,[1,1]) -> 2;
(add,1,[0,2]) -> 3;
(countOdd,1,[2,3]) -> 2;
(countOdd,0,[2]) -> 0;
(add,2,[0,3]) -> 5;
(add,1,[3,0]) -> 4;
(countOdd,3,[0,2,2]) -> 3;
(countOdd,0,[]) -> 0;
(add,2,[2,1]) -> 5;
(countOdd,3,[3,3]) -> 5;
(countOdd,2,[1,0,3]) -> 4;
(countOdd,3,[1]) -> 4;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.956002 true true

(add,0,[]) -> 0;
(countOdd,3,[]) -> 3;
(countOdd,1,[1,1,2]) -> 3;
(add,0,[0,1,0]) -> 1;
(add,1,[]) -> 1;
(countOdd,3,[0]) -> 3;
(add,2,[1,3,2]) -> 8;
(add,2,[3,2]) -> 7;
(add,2,[]) -> 2;
(countOdd,2,[]) -> 2;
(add,3,[3]) -> 6;
(countOdd,2,[0,1]) -> 3;
(add,3,[]) -> 3;
(add,1,[1,3,1]) -> 6;
(countOdd,1,[0]) -> 1;
(add,3,[1]) -> 4;
(countOdd,0,[0,1,0]) -> 1;
(countOdd,1,[]) -> 1;
(countOdd,1,[3,1,1]) -> 4;
(add,0,[3,0,0]) -> 3;

=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
1.279599 true true

