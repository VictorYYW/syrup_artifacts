list_map
(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.210274 false false

(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0280170000001 false false

(zero,[3,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.190906 false false

(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.028251 false false

(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.148056 false false

(inc,[0,1,2]) -> [1,2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [1, 2, 3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.301126 false false

(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.106055 false false

(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.14819 false false

(inc,[1,0,2]) -> [2,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [2, 1, 3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.309266 false false

(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.106606 false false

(zero,[0,3,1]) -> [0,0,0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041678 false false

(zero,[3]) -> [0];
(zero,[1,2,2]) -> [0,0,0];

=================================
NOSOL

(zero,[]) -> [];
(inc,[0,2,0]) -> [1,3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1, 3, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0451909999999 false false

(zero,[1,1]) -> [0,0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0, 0]

      S y1 -> 
        [4] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.226206 false false

(inc,[2,1]) -> [3,2];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0]

      S y1 -> 
        [3, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.233272 false false

(zero,[3,1,0]) -> [0,0,0];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0, 0, 0]

      S y1 -> 
        [3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.245184 false false

(inc,[0]) -> [1];
(inc,[2,2,3]) -> [3,3,4];

=================================
NOSOL

(inc,[3,2]) -> [4,3];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case f 0 of
      Z y1 -> 
        [0]

      S y1 -> 
        [4, 3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.232196 false false

(inc,[0,0,2]) -> [1,1,3];
(inc,[1]) -> [2];

=================================
NOSOL

(zero,[1,1]) -> [0,0];
(zero,[1,1,1]) -> [0,0,0];

=================================
NOSOL

(zero,[3]) -> [0];
(zero,[3,2,2]) -> [0,0,0];
(zero,[0,1,3]) -> [0,0,0];

=================================
NOSOL

(zero,[]) -> [];
(zero,[2,1,1]) -> [0,0,0];
(inc,[1,0]) -> [2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.127676 true true

(zero,[2,3]) -> [0,0];
(zero,[]) -> [];
(zero,[0,2,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.57616 false false

(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[3,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042612 false false

(inc,[1,2]) -> [2,3];
(inc,[1,3,3]) -> [2,4,4];
(zero,[2]) -> [0];

=================================
None
(zero,[]) -> [];
(zero,[0,3,2]) -> [0,0,0];
(inc,[0,0,2]) -> [1,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [ f (#2.1 y1)
        , f (#2.1 y1)
        , f (S (S (#2.1 y1)))
        ] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0432699999999 false false

(zero,[3,2,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0384959999999 true true

(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0473549999999 false false

(inc,[1,2]) -> [2,3];
(zero,[1,3]) -> [0,0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0418500000001 true true

(zero,[3,1,0]) -> [0,0,0];
(zero,[3,0,2]) -> [0,0,0];
(zero,[2,2,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.385913 false false

(inc,[3]) -> [4];
(zero,[3,1,0]) -> [0,0,0];
(inc,[]) -> [];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0373629999999 true true

(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[3,3]) -> [4,4];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0372 true true

(zero,[]) -> [];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[1,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0368060000001 true true

(zero,[1,3]) -> [0,0];
(zero,[3,2,1]) -> [0,0,0];
(zero,[2,1]) -> [0,0];
(zero,[0]) -> [0];

=================================
NOSOL

(inc,[]) -> [];
(zero,[2,1,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0383159999999 false false

(inc,[3,1,3]) -> [4,2,4];
(inc,[0]) -> [1];
(zero,[0,0,3]) -> [0,0,0];
(zero,[3,3,2]) -> [0,0,0];

=================================
NOSOL

(zero,[3,1,0]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0395109999999 true true

(zero,[1]) -> [0];
(inc,[3]) -> [4];
(inc,[3,2]) -> [4,3];
(inc,[2,1]) -> [3,2];

=================================
NOSOL

(inc,[2,1,3]) -> [3,2,4];
(inc,[1,2,0]) -> [2,3,1];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041768 true true

(zero,[1,3,0]) -> [0,0,0];
(zero,[2,2,0]) -> [0,0,0];
(inc,[2,0]) -> [3,1];
(zero,[3,0]) -> [0,0];

=================================
None
(inc,[3,2,2]) -> [4,3,3];
(inc,[2,2]) -> [3,3];
(zero,[1]) -> [0];
(zero,[]) -> [];
(zero,[0,3,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0396699999999 true true

(inc,[1,2,3]) -> [2,3,4];
(inc,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[1]) -> [0];
(inc,[2,0,2]) -> [3,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039113 true true

(inc,[2]) -> [3];
(inc,[0,1]) -> [1,2];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0386880000001 true true

(inc,[3,3,0]) -> [4,4,1];
(inc,[0,1,2]) -> [1,2,3];
(inc,[2]) -> [3];
(zero,[1,2]) -> [0,0];
(inc,[1,3,2]) -> [2,4,3];

=================================
NOSOL

(zero,[2]) -> [0];
(inc,[1,0,3]) -> [2,1,4];
(inc,[]) -> [];
(zero,[0,0]) -> [0,0];
(inc,[3,3,3]) -> [4,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0382549999999 true true

(inc,[0]) -> [1];
(zero,[2,1,2]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[1,3]) -> [2,4];
(zero,[1,0]) -> [0,0];

=================================
NOSOL

(zero,[0,2]) -> [0,0];
(zero,[1,2]) -> [0,0];
(zero,[3,3,0]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042899 false false

(inc,[0]) -> [1];
(inc,[1,3,3]) -> [2,4,4];
(zero,[0]) -> [0];
(zero,[]) -> [];
(zero,[0,2,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.038444 true true

(inc,[1,2,0]) -> [2,3,1];
(inc,[2,2]) -> [3,3];
(zero,[]) -> [];
(inc,[1,0]) -> [2,1];
(inc,[2,2,3]) -> [3,3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0745629999999 false false

(zero,[]) -> [];
(inc,[2]) -> [3];
(inc,[1]) -> [2];
(zero,[3,3]) -> [0,0];
(zero,[0,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0390179999999 true true

(inc,[1]) -> [2];
(zero,[3,0,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.038779 false true

(zero,[2]) -> [0];
(inc,[]) -> [];
(zero,[1]) -> [0];
(inc,[2,3,3]) -> [3,4,4];
(inc,[1,0,1]) -> [2,1,2];
(inc,[2,1,3]) -> [3,2,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039679 true true

(inc,[3,2]) -> [4,3];
(inc,[3,0]) -> [4,1];
(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[2]) -> [0];
(inc,[2,1]) -> [3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0399359999999 true true

(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[1,1]) -> [0,0];
(zero,[1,2]) -> [0,0];
(inc,[3]) -> [4];
(zero,[2,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0410870000001 true true

(inc,[1,0,2]) -> [2,1,3];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(zero,[1,2]) -> [0,0];
(zero,[]) -> [];
(inc,[0,2]) -> [1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039548 true true

(inc,[]) -> [];
(inc,[2,0]) -> [3,1];
(zero,[]) -> [];
(inc,[1,0]) -> [2,1];
(zero,[1,3,1]) -> [0,0,0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0388949999999 true true

(inc,[2,3]) -> [3,4];
(inc,[0,1,3]) -> [1,2,4];
(zero,[0,0,0]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[0]) -> [1];
(zero,[1,3]) -> [0,0];

=================================
NOSOL

(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[3]) -> [0];
(zero,[]) -> [];
(inc,[1,1,2]) -> [2,2,3];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040086 true true

(inc,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0423229999999 true true

(inc,[2]) -> [3];
(inc,[3,2]) -> [4,3];
(zero,[2,3,3]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[1]) -> [2];
(inc,[0,2,0]) -> [1,3,1];

=================================
NOSOL

(inc,[]) -> [];
(inc,[0,1]) -> [1,2];
(zero,[]) -> [];
(zero,[3,2]) -> [0,0];
(inc,[3,1]) -> [4,2];
(zero,[1,2,0]) -> [0,0,0];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042066 true true

(inc,[]) -> [];
(inc,[3,0,3]) -> [4,1,4];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0398620000001 true true

(inc,[]) -> [];
(inc,[1,0,1]) -> [2,1,2];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(inc,[3]) -> [4];
(zero,[2,1,3]) -> [0,0,0];
(inc,[2,2]) -> [3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0408970000001 true true

(zero,[0,0]) -> [0,0];
(zero,[3]) -> [0];
(zero,[0,3,2]) -> [0,0,0];
(inc,[0,0]) -> [1,1];
(zero,[1]) -> [0];
(zero,[]) -> [];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0444930000001 true true

(zero,[2]) -> [0];
(zero,[1,0,2]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(zero,[0,1,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043735 false false

(zero,[3]) -> [0];
(zero,[3,0]) -> [0,0];
(zero,[0,3]) -> [0,0];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042119 true true

(zero,[2]) -> [0];
(zero,[0,2]) -> [0,0];
(zero,[3]) -> [0];
(zero,[1,3,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,2]) -> [0,0];
(zero,[2,0,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0461459999999 false false

(inc,[0,2,0]) -> [1,3,1];
(zero,[3]) -> [0];
(zero,[1,1]) -> [0,0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[]) -> [];
(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044846 true true

(inc,[]) -> [];
(zero,[1,0]) -> [0,0];
(inc,[2,2]) -> [3,3];
(inc,[3,0,0]) -> [4,1,1];
(inc,[1,0,0]) -> [2,1,1];
(inc,[3,2,0]) -> [4,3,1];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0409099999999 true true

(zero,[]) -> [];
(inc,[1]) -> [2];
(zero,[0,1]) -> [0,0];
(inc,[]) -> [];
(inc,[0,3,0]) -> [1,4,1];
(zero,[3]) -> [0];
(inc,[1,3,3]) -> [2,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0405800000001 true true

(zero,[]) -> [];
(inc,[2,1,2]) -> [3,2,3];
(zero,[0,0]) -> [0,0];
(zero,[3,0]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[3,1,1]) -> [4,2,2];
(inc,[3,1,0]) -> [4,2,1];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042314 true true

(zero,[0,2]) -> [0,0];
(inc,[3,0]) -> [4,1];
(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[0,1]) -> [0,0];
(zero,[]) -> [];
(inc,[1,0,3]) -> [2,1,4];
(inc,[3,1]) -> [4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041367 true true

(zero,[2,1,0]) -> [0,0,0];
(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[2,0]) -> [3,1];
(inc,[]) -> [];
(zero,[2,2]) -> [0,0];
(zero,[3,3]) -> [0,0];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0415270000001 true true

(inc,[1,3,1]) -> [2,4,2];
(zero,[2,2]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[2]) -> [0];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[3]) -> [0];
(inc,[2,1,1]) -> [3,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0423880000001 true true

(zero,[]) -> [];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[1,3]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[0]) -> [1];
(inc,[0,1,1]) -> [1,2,2];
(inc,[1,2]) -> [2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0414820000001 true true

(zero,[2,2,2]) -> [0,0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[0,0]) -> [1,1];
(zero,[3]) -> [0];
(inc,[3,1]) -> [4,2];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0421779999999 true true

(zero,[2]) -> [0];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(zero,[0,0,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[1,2]) -> [0,0];
(zero,[1,3,2]) -> [0,0,0];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0422550000001 true true

(zero,[1,0]) -> [0,0];
(zero,[]) -> [];
(zero,[0,2]) -> [0,0];
(inc,[0,2]) -> [1,3];
(inc,[3,0,0]) -> [4,1,1];
(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(inc,[1,0,2]) -> [2,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042154 true true

(zero,[1,2,0]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(inc,[3]) -> [4];
(inc,[1,1,2]) -> [2,2,3];
(zero,[1,2]) -> [0,0];
(inc,[0,3]) -> [1,4];
(zero,[]) -> [];
(zero,[2,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0422249999999 true true

(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[3,1]) -> [0,0];
(inc,[1,0,3]) -> [2,1,4];
(zero,[1]) -> [0];
(inc,[3]) -> [4];
(zero,[]) -> [];
(zero,[0,1,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041473 true true

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[1,0,0]) -> [2,1,1];
(inc,[0,3,1]) -> [1,4,2];
(inc,[1,3,1]) -> [2,4,2];
(zero,[1]) -> [0];
(inc,[2,3]) -> [3,4];
(inc,[1,3]) -> [2,4];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04267 true true

(zero,[]) -> [];
(zero,[0]) -> [0];
(zero,[3,3,1]) -> [0,0,0];
(inc,[2,3,3]) -> [3,4,4];
(zero,[0,2,0]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(zero,[2,1,3]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0483180000001 true true

(zero,[]) -> [];
(zero,[0,2]) -> [0,0];
(zero,[0,1,1]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(inc,[]) -> [];
(zero,[0]) -> [0];
(inc,[1]) -> [2];
(zero,[2,0,0]) -> [0,0,0];
(zero,[3,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0457759999999 true true

(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[3,0]) -> [0,0];
(inc,[2,2]) -> [3,3];
(zero,[3]) -> [0];
(zero,[2,2]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[1,1,2]) -> [2,2,3];
(inc,[3]) -> [4];

=================================
NOSOL

(zero,[]) -> [];
(inc,[0,3,0]) -> [1,4,1];
(zero,[3,2]) -> [0,0];
(inc,[1]) -> [2];
(inc,[1,2,1]) -> [2,3,2];
(inc,[3,3,1]) -> [4,4,2];
(inc,[2]) -> [3];
(zero,[2]) -> [0];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045081 true true

(zero,[]) -> [];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,2,1]) -> [1,3,2];
(inc,[1,0]) -> [2,1];
(inc,[1,2]) -> [2,3];
(inc,[3,1]) -> [4,2];
(zero,[3,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0436769999999 true true

(zero,[2]) -> [0];
(zero,[0,1,1]) -> [0,0,0];
(zero,[]) -> [];
(inc,[1,0,0]) -> [2,1,1];
(inc,[]) -> [];
(zero,[2,3]) -> [0,0];
(zero,[3,1]) -> [0,0];
(zero,[2,2,3]) -> [0,0,0];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046016 true true

(inc,[1,0,2]) -> [2,1,3];
(zero,[]) -> [];
(inc,[0,2]) -> [1,3];
(zero,[3,1]) -> [0,0];
(inc,[1,0]) -> [2,1];
(inc,[2]) -> [3];
(zero,[1]) -> [0];
(inc,[]) -> [];
(zero,[3,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0423579999999 true true

(zero,[3]) -> [0];
(zero,[]) -> [];
(inc,[2,1]) -> [3,2];
(zero,[2,2,3]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[2,1,0]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(zero,[2]) -> [0];
(zero,[1,1,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044161 true true

(inc,[3,2]) -> [4,3];
(inc,[]) -> [];
(inc,[2]) -> [3];
(inc,[3,2,0]) -> [4,3,1];
(inc,[3,0,2]) -> [4,1,3];
(inc,[1,2,1]) -> [2,3,2];
(inc,[1]) -> [2];
(zero,[]) -> [];
(inc,[0,0,1]) -> [1,1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.057084 false false

(zero,[]) -> [];
(zero,[2,3]) -> [0,0];
(inc,[1,1,0]) -> [2,2,1];
(zero,[1,2,0]) -> [0,0,0];
(inc,[1,3,2]) -> [2,4,3];
(zero,[2,1]) -> [0,0];
(inc,[]) -> [];
(zero,[3,3]) -> [0,0];
(inc,[2,2,2]) -> [3,3,3];
(inc,[2,0,1]) -> [3,1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0538429999999 true true

(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[1,1,1]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,0,1]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[1,2,2]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[0]) -> [1];
(inc,[3,2,2]) -> [4,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044255 true true

(inc,[0,1,2]) -> [1,2,3];
(zero,[2,2]) -> [0,0];
(zero,[0]) -> [0];
(zero,[3,3]) -> [0,0];
(inc,[2,0,3]) -> [3,1,4];
(inc,[0,1]) -> [1,2];
(inc,[1]) -> [2];
(inc,[3,1]) -> [4,2];
(zero,[2,1]) -> [0,0];
(inc,[3]) -> [4];

=================================
NOSOL

(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[1]) -> [0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[2]) -> [0];
(inc,[0,1]) -> [1,2];
(zero,[1,2]) -> [0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0434319999999 true true

(zero,[0,0]) -> [0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[3,3]) -> [0,0];
(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[0,0,1]) -> [0,0,0];
(zero,[0,3,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047969 true true

(zero,[0,1]) -> [0,0];
(inc,[0,0,2]) -> [1,1,3];
(inc,[]) -> [];
(inc,[3,3]) -> [4,4];
(zero,[2,1,1]) -> [0,0,0];
(inc,[0,0]) -> [1,1];
(zero,[0]) -> [0];
(zero,[2,2,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,3,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0448280000001 true true

(inc,[1]) -> [2];
(zero,[]) -> [];
(zero,[2]) -> [0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[3,2]) -> [4,3];
(zero,[0,0]) -> [0,0];
(zero,[0]) -> [0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[]) -> [];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0435179999999 true true

(zero,[1]) -> [0];
(zero,[2]) -> [0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[3,0]) -> [4,1];
(inc,[0,0,3]) -> [1,1,4];
(inc,[2,3,1]) -> [3,4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0440450000001 true true

(inc,[0,1,1]) -> [1,2,2];
(inc,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(zero,[2,3,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,1]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc,[2,1,0]) -> [3,2,1];
(inc,[2,1]) -> [3,2];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0430229999999 true true

(inc,[3]) -> [4];
(zero,[0,2]) -> [0,0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(inc,[1,1,1]) -> [2,2,2];
(inc,[1,0]) -> [2,1];
(zero,[0]) -> [0];
(inc,[2,2,2]) -> [3,3,3];
(zero,[1,1,3]) -> [0,0,0];
(inc,[1,2]) -> [2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044789 true true

(zero,[]) -> [];
(inc,[2,3,3]) -> [3,4,4];
(inc,[1,3]) -> [2,4];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[2]) -> [3];
(inc,[0,0,1]) -> [1,1,2];
(inc,[2,0]) -> [3,1];
(zero,[2,3,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044617 true true

(inc,[3,1]) -> [4,2];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[0,3,1]) -> [1,4,2];
(zero,[1]) -> [0];
(zero,[0,3,1]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(inc,[2]) -> [3];
(zero,[2,2,1]) -> [0,0,0];
(inc,[1]) -> [2];
(zero,[2,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0446850000001 true true

(inc,[3,2]) -> [4,3];
(inc,[2,1,0]) -> [3,2,1];
(zero,[1,1,2]) -> [0,0,0];
(inc,[1,0,2]) -> [2,1,3];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[0,0,2]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0,3]) -> [0,0];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044674 true true

(zero,[3,0]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[0,2]) -> [1,3];
(inc,[2,0,2]) -> [3,1,3];
(inc,[3]) -> [4];
(inc,[0,1,0]) -> [1,2,1];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[0]) -> [0];
(inc,[0]) -> [1];
(inc,[1,3,1]) -> [2,4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046073 true true

(inc,[1]) -> [2];
(zero,[1,3]) -> [0,0];
(zero,[3,3,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[3]) -> [0];
(inc,[1,1,0]) -> [2,2,1];
(zero,[0,1,1]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(inc,[0]) -> [1];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0449169999999 true true

(zero,[]) -> [];
(inc,[]) -> [];
(inc,[1,0,1]) -> [2,1,2];
(zero,[1,1]) -> [0,0];
(inc,[3]) -> [4];
(inc,[1,1]) -> [2,2];
(zero,[3,1,0]) -> [0,0,0];
(zero,[3,1,1]) -> [0,0,0];
(inc,[3,3]) -> [4,4];
(zero,[1,3,2]) -> [0,0,0];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0451889999999 true true

(inc,[3,1,3]) -> [4,2,4];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[0,3,1]) -> [0,0,0];
(inc,[1,2]) -> [2,3];
(inc,[2]) -> [3];
(zero,[0]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[3]) -> [4];
(inc,[]) -> [];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0443949999999 true true

(inc,[]) -> [];
(zero,[2,0,0]) -> [0,0,0];
(inc,[0,0]) -> [1,1];
(zero,[]) -> [];
(zero,[0,1]) -> [0,0];
(zero,[3,1]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(zero,[3]) -> [0];
(zero,[3,2]) -> [0,0];
(inc,[3,0,0]) -> [4,1,1];
(zero,[1,0,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044388 true true

(zero,[]) -> [];
(zero,[0,3,1]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(zero,[0,3,2]) -> [0,0,0];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[3]) -> [0];
(inc,[1,0,2]) -> [2,1,3];
(inc,[1]) -> [2];
(zero,[3,3,3]) -> [0,0,0];
(inc,[1,3,3]) -> [2,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045576 true true

(inc,[3,0]) -> [4,1];
(zero,[3,2,3]) -> [0,0,0];
(zero,[3,2,0]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[2]) -> [3];
(inc,[]) -> [];
(zero,[1,2]) -> [0,0];
(inc,[0,2,2]) -> [1,3,3];
(zero,[]) -> [];
(inc,[0,3]) -> [1,4];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0453829999999 true true

(zero,[3,3]) -> [0,0];
(inc,[]) -> [];
(zero,[0,3,2]) -> [0,0,0];
(zero,[0,2,3]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[3,1]) -> [0,0];
(zero,[2,0]) -> [0,0];
(zero,[2,1]) -> [0,0];
(zero,[1]) -> [0];
(inc,[1]) -> [2];
(zero,[2]) -> [0];
(zero,[0,0,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0469189999999 true true

(inc,[1,3,0]) -> [2,4,1];
(inc,[1,1]) -> [2,2];
(zero,[0,1,0]) -> [0,0,0];
(zero,[0,3]) -> [0,0];
(zero,[1]) -> [0];
(inc,[]) -> [];
(zero,[3,0,1]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(inc,[0,0]) -> [1,1];
(zero,[1,1]) -> [0,0];
(inc,[3,3]) -> [4,4];
(inc,[2,1]) -> [3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046947 true true

(inc,[0,3,1]) -> [1,4,2];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[3,0,1]) -> [0,0,0];
(zero,[0,1,3]) -> [0,0,0];
(zero,[]) -> [];
(inc,[3,1,2]) -> [4,2,3];
(inc,[2,1,3]) -> [3,2,4];
(inc,[3,3,0]) -> [4,4,1];
(zero,[1,2]) -> [0,0];
(zero,[3]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0464649999999 true true

(inc,[0,2]) -> [1,3];
(inc,[0]) -> [1];
(zero,[1,0]) -> [0,0];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(inc,[3]) -> [4];
(zero,[3,1]) -> [0,0];
(zero,[1,1,3]) -> [0,0,0];
(zero,[0,3,3]) -> [0,0,0];
(inc,[3,0,1]) -> [4,1,2];
(inc,[0,2,2]) -> [1,3,3];
(inc,[3,0]) -> [4,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0489009999999 true true

(inc,[]) -> [];
(inc,[2,2]) -> [3,3];
(inc,[1]) -> [2];
(zero,[3,2]) -> [0,0];
(zero,[0]) -> [0];
(zero,[0,0]) -> [0,0];
(inc,[2,3]) -> [3,4];
(zero,[2]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[2,3]) -> [0,0];
(zero,[3,1,0]) -> [0,0,0];
(inc,[3]) -> [4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046832 true true

(inc,[2]) -> [3];
(inc,[3]) -> [4];
(zero,[3]) -> [0];
(zero,[2,0,0]) -> [0,0,0];
(zero,[]) -> [];
(zero,[1,1,3]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[0]) -> [1];
(inc,[1]) -> [2];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0470439999999 true true

(zero,[1]) -> [0];
(inc,[3,0,0]) -> [4,1,1];
(zero,[3,0]) -> [0,0];
(zero,[0]) -> [0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[2,3]) -> [0,0];
(inc,[3]) -> [4];
(inc,[1,1]) -> [2,2];
(inc,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(inc,[0,1,0]) -> [1,2,1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0456349999999 true true

(inc,[]) -> [];
(inc,[0,0,1]) -> [1,1,2];
(inc,[3,2]) -> [4,3];
(inc,[2]) -> [3];
(inc,[3,2,1]) -> [4,3,2];
(zero,[1]) -> [0];
(inc,[2,3]) -> [3,4];
(zero,[]) -> [];
(inc,[0,2,0]) -> [1,3,1];
(zero,[0,2,2]) -> [0,0,0];
(inc,[0,3,1]) -> [1,4,2];
(inc,[2,2,2]) -> [3,3,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047916 true true

(inc,[]) -> [];
(inc,[0,0,2]) -> [1,1,3];
(zero,[3]) -> [0];
(inc,[2,1]) -> [3,2];
(zero,[1,3,0]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(inc,[2,1,3]) -> [3,2,4];
(inc,[0,1]) -> [1,2];
(zero,[1,0]) -> [0,0];
(inc,[3,1]) -> [4,2];
(zero,[]) -> [];
(zero,[3,1,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046304 true true

(inc,[]) -> [];
(zero,[1,1,1]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[3,2,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[0,3,1]) -> [1,4,2];
(inc,[3,2,3]) -> [4,3,4];
(inc,[3,3]) -> [4,4];
(zero,[1,2]) -> [0,0];
(zero,[1,2,3]) -> [0,0,0];
(zero,[1,3,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050452 true true

(inc,[3,1]) -> [4,2];
(inc,[0,3,1]) -> [1,4,2];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[]) -> [];
(zero,[0,1]) -> [0,0];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[2,1]) -> [0,0];
(zero,[2]) -> [0];
(inc,[2]) -> [3];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0474160000001 true true

(zero,[2,1,3]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[3,0]) -> [0,0];
(inc,[1,0]) -> [2,1];
(inc,[2,3]) -> [3,4];
(zero,[]) -> [];
(zero,[2,2]) -> [0,0];
(inc,[2]) -> [3];
(inc,[]) -> [];
(zero,[1,1]) -> [0,0];
(zero,[0,1]) -> [0,0];
(inc,[2,0]) -> [3,1];
(zero,[0,0,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047278 true true

(inc,[3,2]) -> [4,3];
(inc,[3]) -> [4];
(zero,[1,3]) -> [0,0];
(zero,[2,3]) -> [0,0];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(inc,[0,3,2]) -> [1,4,3];
(inc,[3,0]) -> [4,1];
(inc,[2,0]) -> [3,1];
(zero,[1,2]) -> [0,0];
(inc,[1,2]) -> [2,3];
(zero,[1,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0483959999999 true true

(zero,[3,3]) -> [0,0];
(zero,[2]) -> [0];
(inc,[0,0]) -> [1,1];
(zero,[0]) -> [0];
(zero,[1]) -> [0];
(inc,[0,2,3]) -> [1,3,4];
(inc,[3]) -> [4];
(zero,[2,2]) -> [0,0];
(inc,[3,2,0]) -> [4,3,1];
(inc,[1]) -> [2];
(inc,[]) -> [];
(inc,[0]) -> [1];
(zero,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046908 true true

(inc,[3]) -> [4];
(inc,[0,3,3]) -> [1,4,4];
(inc,[3,3,0]) -> [4,4,1];
(zero,[]) -> [];
(inc,[]) -> [];
(zero,[3,1]) -> [0,0];
(inc,[2,3,1]) -> [3,4,2];
(zero,[1,2]) -> [0,0];
(inc,[1]) -> [2];
(zero,[3,2,0]) -> [0,0,0];
(zero,[3,0,0]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(zero,[3,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0484409999999 true true

(inc,[2,2,2]) -> [3,3,3];
(inc,[]) -> [];
(zero,[1]) -> [0];
(inc,[2]) -> [3];
(zero,[]) -> [];
(zero,[2]) -> [0];
(zero,[3,1]) -> [0,0];
(inc,[2,0,1]) -> [3,1,2];
(zero,[2,0]) -> [0,0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[3]) -> [4];
(zero,[2,1,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0476490000001 true true

(inc,[3,1,3]) -> [4,2,4];
(zero,[]) -> [];
(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[1,1,2]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc,[0,3]) -> [1,4];
(zero,[1,2]) -> [0,0];
(zero,[0,1]) -> [0,0];
(inc,[1,1]) -> [2,2];
(zero,[2,2,1]) -> [0,0,0];
(zero,[3,0,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0473030000001 true true

(zero,[3,0]) -> [0,0];
(zero,[2]) -> [0];
(inc,[1,2,1]) -> [2,3,2];
(zero,[3,2,0]) -> [0,0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[1,0,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[2]) -> [3];
(zero,[0]) -> [0];
(inc,[3,1,1]) -> [4,2,2];
(zero,[3,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046983 true true

(inc,[2]) -> [3];
(zero,[]) -> [];
(zero,[3]) -> [0];
(inc,[1,1,3]) -> [2,2,4];
(inc,[2,3,1]) -> [3,4,2];
(inc,[1]) -> [2];
(inc,[2,3,2]) -> [3,4,3];
(inc,[2,1]) -> [3,2];
(inc,[]) -> [];
(zero,[1]) -> [0];
(zero,[0,1,0]) -> [0,0,0];
(inc,[3,1,2]) -> [4,2,3];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0468739999999 true true

(zero,[0,0,3]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[1,0]) -> [0,0];
(inc,[1,1,0]) -> [2,2,1];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[3,0]) -> [0,0];
(zero,[2,3]) -> [0,0];
(zero,[0,3,1]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[1,2]) -> [2,3];
(inc,[0]) -> [1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0503020000001 true true

(inc,[3]) -> [4];
(zero,[3,2,3]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[1]) -> [0];
(zero,[3,2]) -> [0,0];
(inc,[3,1]) -> [4,2];
(zero,[3,1]) -> [0,0];
(inc,[2,0,3]) -> [3,1,4];
(zero,[2]) -> [0];
(inc,[0,2,3]) -> [1,3,4];
(inc,[1,0]) -> [2,1];
(zero,[1,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0486519999999 true true

(inc,[1]) -> [2];
(zero,[2,1]) -> [0,0];
(inc,[2]) -> [3];
(zero,[]) -> [];
(zero,[3,3]) -> [0,0];
(zero,[2]) -> [0];
(zero,[1,0,3]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(inc,[1,2,3]) -> [2,3,4];
(zero,[3,1,3]) -> [0,0,0];
(inc,[3,2,3]) -> [4,3,4];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc,[2,0]) -> [3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049411 true true

(inc,[2,3]) -> [3,4];
(inc,[0,0,2]) -> [1,1,3];
(inc,[3]) -> [4];
(zero,[0,0]) -> [0,0];
(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[0,2,2]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[1]) -> [0];
(zero,[]) -> [];
(inc,[2,2,0]) -> [3,3,1];
(inc,[1,0]) -> [2,1];
(inc,[1,0,0]) -> [2,1,1];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0483449999999 true true

(inc,[2,0]) -> [3,1];
(zero,[3]) -> [0];
(inc,[3,2,2]) -> [4,3,3];
(inc,[]) -> [];
(zero,[0,0,3]) -> [0,0,0];
(zero,[]) -> [];
(inc,[0,2,3]) -> [1,3,4];
(zero,[0,2,1]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[3]) -> [4];
(inc,[0]) -> [1];
(zero,[0,2,3]) -> [0,0,0];
(inc,[0,3]) -> [1,4];
(inc,[3,2,1]) -> [4,3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050281 true true

(inc,[3]) -> [4];
(zero,[]) -> [];
(zero,[3,1,3]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[0,0,2]) -> [0,0,0];
(inc,[1,3]) -> [2,4];
(zero,[3,3]) -> [0,0];
(inc,[3,1]) -> [4,2];
(inc,[3,3]) -> [4,4];
(zero,[2,3,1]) -> [0,0,0];
(zero,[1,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[]) -> [];
(inc,[3,0]) -> [4,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0500239999999 true true

(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[3,1,3]) -> [4,2,4];
(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(zero,[]) -> [];
(zero,[2,0,2]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(zero,[1]) -> [0];
(zero,[0,0,3]) -> [0,0,0];
(inc,[0,2,3]) -> [1,3,4];
(zero,[1,0]) -> [0,0];
(inc,[0,3]) -> [1,4];
(zero,[2,3,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048207 true true

(zero,[1,2,3]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,0]) -> [0,0];
(zero,[3,1,2]) -> [0,0,0];
(inc,[2,2,0]) -> [3,3,1];
(inc,[0]) -> [1];
(inc,[1,1,0]) -> [2,2,1];
(zero,[1,3,3]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[0,0,3]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[]) -> [];
(inc,[0,1,0]) -> [1,2,1];
(inc,[3,2]) -> [4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050389 true true

(zero,[]) -> [];
(inc,[1,1,0]) -> [2,2,1];
(zero,[2]) -> [0];
(inc,[3]) -> [4];
(zero,[3,2,1]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[]) -> [];
(inc,[0,1,2]) -> [1,2,3];
(inc,[2,2]) -> [3,3];
(zero,[3,0,3]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[1,3,1]) -> [0,0,0];
(inc,[3,2,1]) -> [4,3,2];
(inc,[1,1]) -> [2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048677 true true

(inc,[0,1]) -> [1,2];
(inc,[1,2,3]) -> [2,3,4];
(zero,[0,3]) -> [0,0];
(inc,[2,0,0]) -> [3,1,1];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(inc,[2,0,2]) -> [3,1,3];
(inc,[1,1]) -> [2,2];
(inc,[3,0]) -> [4,1];
(zero,[0,1,3]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[2,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0493650000001 true true

(zero,[3,0]) -> [0,0];
(zero,[1]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[3]) -> [4];
(zero,[2,3]) -> [0,0];
(inc,[3,0,0]) -> [4,1,1];
(zero,[0,2,2]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[1]) -> [2];
(inc,[2,0,2]) -> [3,1,3];
(inc,[2,3]) -> [3,4];
(zero,[0,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0483819999999 true true

(zero,[2,0]) -> [0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(zero,[3,2,3]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(zero,[2]) -> [0];
(inc,[3,2]) -> [4,3];
(inc,[2]) -> [3];
(zero,[1]) -> [0];
(zero,[2,2]) -> [0,0];
(inc,[0,3,0]) -> [1,4,1];
(zero,[2,2,0]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[1]) -> [2];
(inc,[3,1,0]) -> [4,2,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0497170000001 true true

(inc,[0,3,1]) -> [1,4,2];
(inc,[3]) -> [4];
(zero,[]) -> [];
(zero,[2,1]) -> [0,0];
(zero,[0,2]) -> [0,0];
(inc,[1,2]) -> [2,3];
(inc,[2]) -> [3];
(inc,[]) -> [];
(inc,[3,1,3]) -> [4,2,4];
(zero,[0]) -> [0];
(inc,[0,3]) -> [1,4];
(zero,[1]) -> [0];
(inc,[1,3]) -> [2,4];
(zero,[3,1]) -> [0,0];
(inc,[3,3]) -> [4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0492549999999 true true

(inc,[0]) -> [1];
(zero,[1,0,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(inc,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[1]) -> [0];
(inc,[2,3,2]) -> [3,4,3];
(zero,[2,1]) -> [0,0];
(inc,[2]) -> [3];
(zero,[3,1,2]) -> [0,0,0];
(zero,[]) -> [];
(zero,[2,0,1]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[2,1]) -> [3,2];
(zero,[3,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0491830000001 true true

(inc,[2]) -> [3];
(zero,[2,3,2]) -> [0,0,0];
(zero,[2,1]) -> [0,0];
(zero,[0]) -> [0];
(inc,[3,1,3]) -> [4,2,4];
(inc,[3,2]) -> [4,3];
(inc,[]) -> [];
(inc,[1,1,0]) -> [2,2,1];
(inc,[0,1,2]) -> [1,2,3];
(inc,[0]) -> [1];
(zero,[1,1]) -> [0,0];
(inc,[1]) -> [2];
(zero,[]) -> [];
(inc,[3,1,2]) -> [4,2,3];
(inc,[3,1,1]) -> [4,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0492939999999 true true

(zero,[3,1,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[2,2,0]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1,0]) -> [2,1];
(zero,[1,0,3]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[1,2,0]) -> [2,3,1];
(zero,[3,3]) -> [0,0];
(inc,[0]) -> [1];
(inc,[3,1]) -> [4,2];
(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[1,2]) -> [2,3];
(zero,[2,2,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049659 true true

(zero,[]) -> [];
(inc,[2,3]) -> [3,4];
(inc,[0]) -> [1];
(inc,[3]) -> [4];
(zero,[3,3,1]) -> [0,0,0];
(inc,[2,1,0]) -> [3,2,1];
(inc,[]) -> [];
(zero,[1,1,3]) -> [0,0,0];
(zero,[2]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[2,2,1]) -> [3,3,2];
(zero,[2,3]) -> [0,0];
(zero,[3,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0494779999999 true true

(inc,[0,2]) -> [1,3];
(inc,[1,0]) -> [2,1];
(zero,[0,0,0]) -> [0,0,0];
(zero,[0,1,2]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[3,3,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,2,1]) -> [0,0,0];
(zero,[0,0,3]) -> [0,0,0];
(inc,[0,1,1]) -> [1,2,2];
(zero,[0,1,3]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(zero,[3,0,3]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[2,1]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052498 true true

(inc,[3,0]) -> [4,1];
(inc,[3,1,3]) -> [4,2,4];
(zero,[1,3]) -> [0,0];
(zero,[2]) -> [0];
(zero,[1]) -> [0];
(inc,[1]) -> [2];
(inc,[3,1,2]) -> [4,2,3];
(zero,[3]) -> [0];
(zero,[1,0,0]) -> [0,0,0];
(inc,[0,2,3]) -> [1,3,4];
(inc,[]) -> [];
(inc,[2,2,3]) -> [3,3,4];
(zero,[3,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[3,2,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0510879999999 true true

(zero,[3,1]) -> [0,0];
(zero,[1]) -> [0];
(zero,[]) -> [];
(inc,[3,0,0]) -> [4,1,1];
(zero,[1,0]) -> [0,0];
(inc,[0,0,0]) -> [1,1,1];
(inc,[0,2]) -> [1,3];
(zero,[3,0,1]) -> [0,0,0];
(zero,[0,2,0]) -> [0,0,0];
(inc,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[2]) -> [0];
(zero,[0,3,1]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(zero,[2,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049088 true true

(zero,[2,3,1]) -> [0,0,0];
(inc,[3,0,2]) -> [4,1,3];
(zero,[]) -> [];
(inc,[2]) -> [3];
(zero,[1]) -> [0];
(inc,[1]) -> [2];
(inc,[3,0]) -> [4,1];
(zero,[2,3,0]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(zero,[1,3,3]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,0]) -> [0,0];
(inc,[]) -> [];
(zero,[0,3]) -> [0,0];
(zero,[3,2,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049767 true true

(zero,[]) -> [];
(zero,[0,0]) -> [0,0];
(inc,[2]) -> [3];
(inc,[0,0]) -> [1,1];
(inc,[1,2]) -> [2,3];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[3]) -> [4];
(inc,[0,3,1]) -> [1,4,2];
(inc,[]) -> [];
(inc,[2,0]) -> [3,1];
(inc,[2,1,2]) -> [3,2,3];
(zero,[2,0]) -> [0,0];
(inc,[2,3,2]) -> [3,4,3];
(zero,[1,2]) -> [0,0];
(inc,[0,3]) -> [1,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050902 true true

(inc,[0]) -> [1];
(zero,[2,0]) -> [0,0];
(inc,[1,0,2]) -> [2,1,3];
(inc,[]) -> [];
(zero,[0,2]) -> [0,0];
(zero,[]) -> [];
(zero,[2,2]) -> [0,0];
(inc,[0,2]) -> [1,3];
(inc,[0,1,0]) -> [1,2,1];
(inc,[3,1]) -> [4,2];
(inc,[0,2,0]) -> [1,3,1];
(inc,[2]) -> [3];
(inc,[1,3,1]) -> [2,4,2];
(zero,[2,1]) -> [0,0];
(zero,[2]) -> [0];
(zero,[0]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0510529999999 true true

(zero,[3,3,3]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[3,0,0]) -> [4,1,1];
(zero,[2,0]) -> [0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(zero,[3,1]) -> [0,0];
(zero,[1,2]) -> [0,0];
(inc,[2]) -> [3];
(inc,[2,1,0]) -> [3,2,1];
(zero,[2,3,3]) -> [0,0,0];
(zero,[3]) -> [0];
(inc,[3]) -> [4];
(inc,[2,2]) -> [3,3];
(zero,[2]) -> [0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0515230000001 true true

(zero,[3]) -> [0];
(inc,[]) -> [];
(zero,[3,1]) -> [0,0];
(zero,[2]) -> [0];
(inc,[2,1,3]) -> [3,2,4];
(inc,[0]) -> [1];
(zero,[0,2,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];
(zero,[1,2,2]) -> [0,0,0];
(zero,[0,0,0]) -> [0,0,0];
(inc,[0,0,3]) -> [1,1,4];
(zero,[0,1,0]) -> [0,0,0];
(inc,[0,3]) -> [1,4];
(zero,[1,2]) -> [0,0];
(zero,[0,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0507620000001 true true

(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[0,1]) -> [0,0];
(inc,[3,3]) -> [4,4];
(zero,[0]) -> [0];
(zero,[1,3,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[3,2]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc,[1,2]) -> [2,3];
(zero,[2,2]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[0,0]) -> [0,0];
(inc,[3]) -> [4];
(inc,[2]) -> [3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0504169999999 true true

(zero,[]) -> [];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(zero,[2,3]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[2,3]) -> [3,4];
(zero,[1,2,3]) -> [0,0,0];
(inc,[3,0,1]) -> [4,1,2];
(inc,[]) -> [];
(zero,[2,0,2]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[1,1]) -> [0,0];
(inc,[3,3]) -> [4,4];
(zero,[2,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0531329999999 true true

(zero,[2]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[]) -> [];
(zero,[0,2]) -> [0,0];
(inc,[1,0,3]) -> [2,1,4];
(inc,[2,3,1]) -> [3,4,2];
(zero,[0]) -> [0];
(inc,[]) -> [];
(inc,[3]) -> [4];
(inc,[2,2]) -> [3,3];
(inc,[2,0,3]) -> [3,1,4];
(inc,[2,2,3]) -> [3,3,4];
(zero,[0,0,1]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(zero,[3]) -> [0];
(zero,[2,1,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0511300000001 true true

(zero,[1,0,1]) -> [0,0,0];
(inc,[3,1,2]) -> [4,2,3];
(inc,[1,3,2]) -> [2,4,3];
(zero,[1,3,1]) -> [0,0,0];
(inc,[1,2,1]) -> [2,3,2];
(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(zero,[2,0]) -> [0,0];
(zero,[1]) -> [0];
(inc,[3,2,0]) -> [4,3,1];
(inc,[1,1,2]) -> [2,2,3];
(zero,[3,0,2]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[0,1,3]) -> [0,0,0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052537 true true

(zero,[]) -> [];
(inc,[0]) -> [1];
(inc,[1,1]) -> [2,2];
(zero,[2,0,2]) -> [0,0,0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[3]) -> [4];
(inc,[2,2,3]) -> [3,3,4];
(zero,[3]) -> [0];
(zero,[3,0,3]) -> [0,0,0];
(zero,[2,0]) -> [0,0];
(inc,[]) -> [];
(zero,[0,3,3]) -> [0,0,0];
(inc,[0,3]) -> [1,4];
(inc,[1,3,0]) -> [2,4,1];
(inc,[3,2,0]) -> [4,3,1];
(inc,[2,0]) -> [3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051772 true true

(inc,[2,1]) -> [3,2];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[2,0,3]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[1]) -> [2];
(inc,[2,2,3]) -> [3,3,4];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[0,2]) -> [1,3];
(inc,[0,3,3]) -> [1,4,4];
(inc,[2,1,2]) -> [3,2,3];
(inc,[3,0,2]) -> [4,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0508629999999 true true

(inc,[1,2,3]) -> [2,3,4];
(inc,[3,3]) -> [4,4];
(zero,[1,1,0]) -> [0,0,0];
(inc,[1,0,3]) -> [2,1,4];
(zero,[1,0]) -> [0,0];
(zero,[]) -> [];
(zero,[1,0,3]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[3]) -> [0];
(inc,[3,1,1]) -> [4,2,2];
(zero,[0,2,1]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[3,3]) -> [0,0];
(inc,[]) -> [];
(zero,[0,0,1]) -> [0,0,0];
(inc,[2,3,3]) -> [3,4,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0534990000001 true true

(inc,[3,3,1]) -> [4,4,2];
(zero,[2,2,1]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[0,3,2]) -> [1,4,3];
(inc,[0]) -> [1];
(zero,[]) -> [];
(inc,[2]) -> [3];
(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[1,1]) -> [0,0];
(inc,[1,3]) -> [2,4];
(inc,[1,1]) -> [2,2];
(zero,[1,3,3]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(zero,[3,2]) -> [0,0];
(zero,[0,3]) -> [0,0];
(inc,[2,1,2]) -> [3,2,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052136 true true

(zero,[3,0]) -> [0,0];
(inc,[1]) -> [2];
(zero,[]) -> [];
(inc,[0,0,3]) -> [1,1,4];
(zero,[2,1]) -> [0,0];
(zero,[1,1,3]) -> [0,0,0];
(inc,[2,3]) -> [3,4];
(zero,[2,1,2]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc,[3,0]) -> [4,1];
(inc,[0,0]) -> [1,1];
(zero,[2,3]) -> [0,0];
(zero,[0,3]) -> [0,0];
(zero,[1,1,1]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(zero,[1,2,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0531100000001 true true

(zero,[]) -> [];
(inc,[2,0,0]) -> [3,1,1];
(zero,[2,0]) -> [0,0];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[1,2]) -> [2,3];
(inc,[0]) -> [1];
(zero,[3]) -> [0];
(inc,[1,2,0]) -> [2,3,1];
(zero,[0,2]) -> [0,0];
(zero,[0,3]) -> [0,0];
(inc,[2,2]) -> [3,3];
(inc,[1]) -> [2];
(zero,[1,0,3]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(inc,[2]) -> [3];
(zero,[3,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.052101 true true

(inc,[1,2,1]) -> [2,3,2];
(inc,[]) -> [];
(inc,[0]) -> [1];
(inc,[1,2,2]) -> [2,3,3];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(zero,[1,1,1]) -> [0,0,0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[2]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[0,0,3]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0]) -> [0];
(inc,[1]) -> [2];
(zero,[0,0]) -> [0,0];
(inc,[2]) -> [3];
(zero,[3,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05258 true true

(zero,[]) -> [];
(inc,[1,0]) -> [2,1];
(inc,[1,0,3]) -> [2,1,4];
(zero,[1,0]) -> [0,0];
(zero,[3,0,1]) -> [0,0,0];
(inc,[0,1]) -> [1,2];
(inc,[2]) -> [3];
(zero,[2,1]) -> [0,0];
(inc,[1]) -> [2];
(zero,[3]) -> [0];
(inc,[]) -> [];
(inc,[3]) -> [4];
(zero,[2,0,3]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(zero,[2,3,1]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0515849999999 true true

(zero,[0]) -> [0];
(inc,[3,0]) -> [4,1];
(inc,[0]) -> [1];
(zero,[2,2,0]) -> [0,0,0];
(inc,[3,2,2]) -> [4,3,3];
(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[]) -> [];
(inc,[1]) -> [2];
(zero,[1,2]) -> [0,0];
(zero,[3]) -> [0];
(zero,[2,0,3]) -> [0,0,0];
(zero,[3,1,0]) -> [0,0,0];
(inc,[3,3]) -> [4,4];
(inc,[0,0]) -> [1,1];
(inc,[0,1,1]) -> [1,2,2];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0540559999999 true true

(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[3,0,1]) -> [4,1,2];
(zero,[0]) -> [0];
(inc,[1,1,2]) -> [2,2,3];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(zero,[3]) -> [0];
(zero,[1,3,3]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[0,1,2]) -> [1,2,3];
(zero,[3,1,2]) -> [0,0,0];
(inc,[0,1]) -> [1,2];
(inc,[3,2,3]) -> [4,3,4];
(zero,[0,2,1]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(inc,[3,3,1]) -> [4,4,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053807 true true

(inc,[1,2,0]) -> [2,3,1];
(zero,[2,2]) -> [0,0];
(inc,[3]) -> [4];
(zero,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[0]) -> [0];
(zero,[3,2,0]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[]) -> [];
(zero,[0,2,0]) -> [0,0,0];
(zero,[0,3,2]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(zero,[2,2,1]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,0]) -> [0,0];
(zero,[1]) -> [0];
(inc,[2,1]) -> [3,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.051929 true true

(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[2,1]) -> [3,2];
(inc,[0,1,0]) -> [1,2,1];
(inc,[3]) -> [4];
(zero,[3,0]) -> [0,0];
(inc,[0,0]) -> [1,1];
(inc,[]) -> [];
(inc,[0,1,3]) -> [1,2,4];
(inc,[2,0]) -> [3,1];
(zero,[3]) -> [0];
(zero,[2,0,2]) -> [0,0,0];
(inc,[2,1,3]) -> [3,2,4];
(inc,[1,2,1]) -> [2,3,2];
(zero,[0,1,2]) -> [0,0,0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[1,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05313 true true

(zero,[]) -> [];
(inc,[0]) -> [1];
(inc,[2,1]) -> [3,2];
(zero,[3,1]) -> [0,0];
(zero,[2,3]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc,[3,0]) -> [4,1];
(inc,[]) -> [];
(zero,[2,1,1]) -> [0,0,0];
(inc,[2,2,1]) -> [3,3,2];
(zero,[1,1]) -> [0,0];
(zero,[2,2,2]) -> [0,0,0];
(inc,[1,1]) -> [2,2];
(zero,[3]) -> [0];
(inc,[0,0]) -> [1,1];
(zero,[0,2,2]) -> [0,0,0];
(inc,[0,2,1]) -> [1,3,2];
(zero,[2,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0533379999999 true true

(zero,[0,2,0]) -> [0,0,0];
(zero,[]) -> [];
(inc,[0,3]) -> [1,4];
(inc,[]) -> [];
(inc,[2]) -> [3];
(inc,[2,3,0]) -> [3,4,1];
(zero,[1,3]) -> [0,0];
(zero,[0,0]) -> [0,0];
(inc,[3,2]) -> [4,3];
(zero,[3,1,0]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[1]) -> [0];
(inc,[3]) -> [4];
(zero,[0,3,0]) -> [0,0,0];
(zero,[2,0,2]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[1,3]) -> [2,4];
(inc,[2,3,2]) -> [3,4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0537959999999 true true

(zero,[1,1]) -> [0,0];
(zero,[]) -> [];
(zero,[3,0,0]) -> [0,0,0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(inc,[2]) -> [3];
(inc,[1,2]) -> [2,3];
(inc,[1]) -> [2];
(inc,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[1,3]) -> [0,0];
(inc,[2,3,3]) -> [3,4,4];
(zero,[3]) -> [0];
(inc,[2,0,2]) -> [3,1,3];
(zero,[1,1,3]) -> [0,0,0];
(inc,[3,3,1]) -> [4,4,2];
(inc,[3]) -> [4];
(zero,[1,2,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0549860000001 true true

(inc,[3,1,3]) -> [4,2,4];
(zero,[2]) -> [0];
(inc,[0]) -> [1];
(zero,[1,1]) -> [0,0];
(inc,[0,1,3]) -> [1,2,4];
(zero,[]) -> [];
(zero,[2,3,0]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(inc,[1]) -> [2];
(zero,[1,3,2]) -> [0,0,0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,0,0]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(zero,[0]) -> [0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[2,2,0]) -> [0,0,0];
(inc,[]) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053551 true true

(inc,[2,2]) -> [3,3];
(zero,[2]) -> [0];
(zero,[1,0]) -> [0,0];
(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[1,2]) -> [0,0];
(zero,[]) -> [];
(inc,[3]) -> [4];
(inc,[0,2]) -> [1,3];
(inc,[2]) -> [3];
(inc,[0,1]) -> [1,2];
(zero,[3,0]) -> [0,0];
(zero,[0]) -> [0];
(inc,[0,3]) -> [1,4];
(inc,[2,1,3]) -> [3,2,4];
(zero,[1,0,0]) -> [0,0,0];
(zero,[3,2,0]) -> [0,0,0];
(inc,[3,2]) -> [4,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053189 true true

(zero,[2]) -> [0];
(zero,[3,1]) -> [0,0];
(zero,[]) -> [];
(inc,[]) -> [];
(inc,[2]) -> [3];
(inc,[0,1]) -> [1,2];
(inc,[1,0,0]) -> [2,1,1];
(zero,[0,2,1]) -> [0,0,0];
(inc,[2,3]) -> [3,4];
(zero,[3,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[2,1]) -> [3,2];
(zero,[3]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[3,1,3]) -> [4,2,4];
(inc,[0,0,2]) -> [1,1,3];
(inc,[1]) -> [2];
(zero,[0,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0535600000001 true true

(inc,[]) -> [];
(zero,[]) -> [];
(inc,[3,0]) -> [4,1];
(zero,[3]) -> [0];
(zero,[1,2]) -> [0,0];
(zero,[3,1]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[1]) -> [2];
(zero,[0,2,0]) -> [0,0,0];
(zero,[2,1,1]) -> [0,0,0];
(zero,[3,1,3]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(zero,[3,3]) -> [0,0];
(zero,[2,2]) -> [0,0];
(zero,[1,1]) -> [0,0];
(zero,[3,1,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0529630000001 true true

(zero,[3,2]) -> [0,0];
(zero,[]) -> [];
(zero,[2]) -> [0];
(zero,[3]) -> [0];
(inc,[0]) -> [1];
(inc,[2,2]) -> [3,3];
(inc,[3,1,0]) -> [4,2,1];
(zero,[3,1]) -> [0,0];
(inc,[2]) -> [3];
(zero,[0,1]) -> [0,0];
(inc,[2,2,0]) -> [3,3,1];
(inc,[]) -> [];
(inc,[2,0,1]) -> [3,1,2];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(inc,[1,3,1]) -> [2,4,2];
(zero,[3,1,3]) -> [0,0,0];
(inc,[3,0,0]) -> [4,1,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053676 true true

(zero,[]) -> [];
(inc,[0,2]) -> [1,3];
(inc,[3,3]) -> [4,4];
(inc,[]) -> [];
(inc,[3,1]) -> [4,2];
(zero,[3,3]) -> [0,0];
(zero,[3,1,0]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[1,1]) -> [0,0];
(zero,[1,3,1]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[3,3,1]) -> [4,4,2];
(zero,[1]) -> [0];
(zero,[0]) -> [0];
(zero,[2,1]) -> [0,0];
(zero,[2,2,3]) -> [0,0,0];
(inc,[0,2,1]) -> [1,3,2];
(zero,[0,3,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053903 true true

(inc,[1,2,0]) -> [2,3,1];
(inc,[]) -> [];
(zero,[2,2]) -> [0,0];
(inc,[0]) -> [1];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[2,3]) -> [3,4];
(zero,[0,0,0]) -> [0,0,0];
(zero,[1,3,0]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[3,1,2]) -> [4,2,3];
(inc,[1]) -> [2];
(zero,[1,3,1]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[0,2]) -> [1,3];
(zero,[0,2]) -> [0,0];
(zero,[2]) -> [0];
(inc,[1,1,1]) -> [2,2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053326 true true

(inc,[1,0,2]) -> [2,1,3];
(inc,[0]) -> [1];
(zero,[0,3]) -> [0,0];
(zero,[2,2,3]) -> [0,0,0];
(inc,[]) -> [];
(inc,[2,3]) -> [3,4];
(zero,[0,1]) -> [0,0];
(inc,[3,2,1]) -> [4,3,2];
(zero,[3,2,3]) -> [0,0,0];
(zero,[0,3,1]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1]) -> [2];
(zero,[1,3]) -> [0,0];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[3]) -> [4];
(zero,[0,3,0]) -> [0,0,0];
(zero,[2,3]) -> [0,0];
(zero,[0,1,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054175 true true

(zero,[3,2]) -> [0,0];
(zero,[]) -> [];
(zero,[0,1,1]) -> [0,0,0];
(zero,[0,3,2]) -> [0,0,0];
(inc,[0,2,0]) -> [1,3,1];
(zero,[1,1]) -> [0,0];
(zero,[3]) -> [0];
(inc,[0,3,2]) -> [1,4,3];
(inc,[1,2]) -> [2,3];
(inc,[0]) -> [1];
(zero,[1]) -> [0];
(inc,[1,0,1]) -> [2,1,2];
(zero,[1,2,3]) -> [0,0,0];
(inc,[1,0,3]) -> [2,1,4];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[1,0]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0543210000001 true true

(inc,[2]) -> [3];
(inc,[3,1]) -> [4,2];
(inc,[2,2]) -> [3,3];
(inc,[0]) -> [1];
(zero,[3,0]) -> [0,0];
(inc,[1,2,0]) -> [2,3,1];
(inc,[1,3,2]) -> [2,4,3];
(inc,[]) -> [];
(inc,[3]) -> [4];
(inc,[2,3,1]) -> [3,4,2];
(zero,[]) -> [];
(inc,[3,3]) -> [4,4];
(zero,[1,0,0]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[3,3]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(zero,[2]) -> [0];
(inc,[1]) -> [2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.053883 true true

(inc,[3,3]) -> [4,4];
(zero,[0,3]) -> [0,0];
(inc,[1,1,0]) -> [2,2,1];
(inc,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[2]) -> [0];
(zero,[3,1,2]) -> [0,0,0];
(zero,[]) -> [];
(inc,[0,1,1]) -> [1,2,2];
(inc,[2,2,2]) -> [3,3,3];
(inc,[1]) -> [2];
(inc,[0,0,3]) -> [1,1,4];
(inc,[0]) -> [1];
(inc,[0,1]) -> [1,2];
(inc,[0,0]) -> [1,1];
(zero,[1,0]) -> [0,0];
(inc,[2,2,3]) -> [3,3,4];
(zero,[2,3,0]) -> [0,0,0];
(zero,[1]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.057014 true true

(inc,[]) -> [];
(zero,[3]) -> [0];
(zero,[1,1]) -> [0,0];
(inc,[2,2]) -> [3,3];
(zero,[]) -> [];
(zero,[2,1]) -> [0,0];
(inc,[0]) -> [1];
(inc,[1]) -> [2];
(inc,[1,2,1]) -> [2,3,2];
(zero,[0]) -> [0];
(zero,[0,2,0]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[0,2]) -> [1,3];
(zero,[2]) -> [0];
(zero,[0,1,3]) -> [0,0,0];
(inc,[1,0]) -> [2,1];
(inc,[2]) -> [3];
(zero,[3,2]) -> [0,0];
(zero,[1,1,2]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054097 true true

(zero,[0,3,3]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(zero,[1]) -> [0];
(zero,[2,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[0,0,3]) -> [0,0,0];
(inc,[1,0]) -> [2,1];
(zero,[1,1,2]) -> [0,0,0];
(zero,[]) -> [];
(zero,[2,2,0]) -> [0,0,0];
(inc,[]) -> [];
(inc,[2,0]) -> [3,1];
(zero,[3]) -> [0];
(zero,[0]) -> [0];
(zero,[0,2]) -> [0,0];
(inc,[1,1,0]) -> [2,2,1];
(zero,[1,3]) -> [0,0];
(inc,[0,1,0]) -> [1,2,1];
(zero,[2]) -> [0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05448 true true

(inc,[]) -> [];
(inc,[3,0,0]) -> [4,1,1];
(zero,[]) -> [];
(inc,[2]) -> [3];
(zero,[0,2]) -> [0,0];
(inc,[3,1,1]) -> [4,2,2];
(zero,[0,0]) -> [0,0];
(zero,[2,1]) -> [0,0];
(zero,[2,1,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[3]) -> [0];
(zero,[3,0]) -> [0,0];
(inc,[1,1]) -> [2,2];
(zero,[3,1,0]) -> [0,0,0];
(inc,[2,2,1]) -> [3,3,2];
(inc,[3,0]) -> [4,1];
(inc,[3,2,2]) -> [4,3,3];
(zero,[2,2,0]) -> [0,0,0];
(inc,[2,3]) -> [3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.054954 true true

(zero,[]) -> [];
(zero,[0]) -> [0];
(inc,[2,2]) -> [3,3];
(inc,[2,2,2]) -> [3,3,3];
(zero,[1,2]) -> [0,0];
(inc,[1]) -> [2];
(zero,[3,2]) -> [0,0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[2,0,1]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[1,3]) -> [2,4];
(inc,[0,0,3]) -> [1,1,4];
(zero,[1]) -> [0];
(inc,[1,3,3]) -> [2,4,4];
(inc,[3]) -> [4];
(zero,[2,0,0]) -> [0,0,0];
(inc,[]) -> [];
(zero,[3,0]) -> [0,0];
(inc,[0,1]) -> [1,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0544809999999 true true

(inc,[1]) -> [2];
(zero,[2,0,3]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[]) -> [];
(inc,[1,3]) -> [2,4];
(zero,[0]) -> [0];
(zero,[]) -> [];
(inc,[2,1,3]) -> [3,2,4];
(zero,[0,0,2]) -> [0,0,0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[1,2,3]) -> [2,3,4];
(inc,[1,3,0]) -> [2,4,1];
(inc,[0,3,2]) -> [1,4,3];
(zero,[2,1]) -> [0,0];
(inc,[3,2,2]) -> [4,3,3];
(inc,[0]) -> [1];
(zero,[2]) -> [0];
(zero,[1]) -> [0];
(zero,[0,1,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055014 true true

(inc,[0,2,3]) -> [1,3,4];
(inc,[0,3]) -> [1,4];
(inc,[0,2]) -> [1,3];
(inc,[0]) -> [1];
(zero,[1,2]) -> [0,0];
(inc,[]) -> [];
(zero,[1,1,1]) -> [0,0,0];
(zero,[1,1,2]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[]) -> [];
(inc,[3,0]) -> [4,1];
(inc,[3]) -> [4];
(inc,[2]) -> [3];
(zero,[0,0,1]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(inc,[2,1]) -> [3,2];
(zero,[2,3,2]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[0,0,2]) -> [1,1,3];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05386 true true

(inc,[]) -> [];
(zero,[3,1]) -> [0,0];
(zero,[2,0]) -> [0,0];
(inc,[1,2]) -> [2,3];
(zero,[]) -> [];
(inc,[0]) -> [1];
(zero,[3]) -> [0];
(inc,[0,2]) -> [1,3];
(zero,[0,0]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[0,1]) -> [1,2];
(zero,[2,0,3]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(zero,[1]) -> [0];
(zero,[1,0]) -> [0,0];
(zero,[3,1,2]) -> [0,0,0];
(zero,[0,0,2]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(inc,[3,2,3]) -> [4,3,4];
(inc,[2,3]) -> [3,4];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0557940000001 true true

(inc,[3,1,3]) -> [4,2,4];
(inc,[2,0,0]) -> [3,1,1];
(zero,[0,1,3]) -> [0,0,0];
(inc,[2,1,0]) -> [3,2,1];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[2,3,3]) -> [3,4,4];
(zero,[1,3]) -> [0,0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[2]) -> [3];
(zero,[1,1,1]) -> [0,0,0];
(inc,[1,1]) -> [2,2];
(zero,[0,0,2]) -> [0,0,0];
(inc,[]) -> [];
(inc,[1,2,1]) -> [2,3,2];
(zero,[1,0]) -> [0,0];
(zero,[2,1,0]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[0,2]) -> [1,3];
(zero,[1,3,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.057663 true true

(inc,[0,2]) -> [1,3];
(inc,[]) -> [];
(zero,[1]) -> [0];
(inc,[0,0]) -> [1,1];
(zero,[]) -> [];
(zero,[2,3,0]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(zero,[1,2,0]) -> [0,0,0];
(zero,[1,1]) -> [0,0];
(inc,[0,1,3]) -> [1,2,4];
(zero,[0]) -> [0];
(inc,[2]) -> [3];
(inc,[2,0]) -> [3,1];
(zero,[2,2,3]) -> [0,0,0];
(zero,[0,0,3]) -> [0,0,0];
(inc,[1,3,2]) -> [2,4,3];
(inc,[3,0]) -> [4,1];
(inc,[1,1,3]) -> [2,2,4];
(inc,[1,0,1]) -> [2,1,2];
(zero,[2,2,0]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0598649999999 true true

(inc,[1]) -> [2];
(zero,[1,3,2]) -> [0,0,0];
(inc,[]) -> [];
(zero,[]) -> [];
(zero,[0,3]) -> [0,0];
(inc,[2,1]) -> [3,2];
(inc,[1,1,1]) -> [2,2,2];
(zero,[3,0,0]) -> [0,0,0];
(zero,[0,1,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[0,2,2]) -> [0,0,0];
(zero,[2,3,0]) -> [0,0,0];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(zero,[3]) -> [0];
(inc,[3,3]) -> [4,4];
(inc,[3]) -> [4];
(zero,[2,2]) -> [0,0];
(zero,[0,2]) -> [0,0];
(zero,[2,0,3]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0566650000001 true true

(inc,[1,3]) -> [2,4];
(zero,[2,2,3]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[]) -> [];
(zero,[]) -> [];
(zero,[3,2,1]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[3,1,1]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[3]) -> [4];
(inc,[2,3]) -> [3,4];
(inc,[0,2,0]) -> [1,3,1];
(inc,[0,2,2]) -> [1,3,3];
(inc,[2,0,1]) -> [3,1,2];
(zero,[3,1]) -> [0,0];
(inc,[0,3]) -> [1,4];
(zero,[1,2]) -> [0,0];
(zero,[0]) -> [0];
(inc,[1,0,2]) -> [2,1,3];
(zero,[0,3]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056272 true true

(inc,[3,1]) -> [4,2];
(inc,[]) -> [];
(zero,[0]) -> [0];
(zero,[]) -> [];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(inc,[2,0]) -> [3,1];
(zero,[2]) -> [0];
(inc,[2,1,0]) -> [3,2,1];
(zero,[3,0]) -> [0,0];
(inc,[1]) -> [2];
(inc,[3]) -> [4];
(zero,[0,2,0]) -> [0,0,0];
(zero,[1,1,2]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(zero,[0,0]) -> [0,0];
(inc,[0,3]) -> [1,4];
(inc,[3,2,0]) -> [4,3,1];
(inc,[2,3]) -> [3,4];
(inc,[1,1]) -> [2,2];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0546260000001 true true

(inc,[]) -> [];
(zero,[1]) -> [0];
(inc,[1]) -> [2];
(zero,[]) -> [];
(zero,[2,1]) -> [0,0];
(inc,[0,3]) -> [1,4];
(zero,[1,2,0]) -> [0,0,0];
(inc,[3,1,0]) -> [4,2,1];
(inc,[3,1,1]) -> [4,2,2];
(zero,[3,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[3]) -> [0];
(inc,[0]) -> [1];
(inc,[3,2]) -> [4,3];
(inc,[0,2]) -> [1,3];
(inc,[3,3]) -> [4,4];
(inc,[2,1,1]) -> [3,2,2];
(inc,[0,3,0]) -> [1,4,1];
(inc,[2,0]) -> [3,1];
(inc,[1,2,0]) -> [2,3,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056425 true true

(zero,[3]) -> [0];
(inc,[0,0]) -> [1,1];
(inc,[1]) -> [2];
(zero,[2,3,1]) -> [0,0,0];
(zero,[3,0]) -> [0,0];
(zero,[2,2,1]) -> [0,0,0];
(zero,[3,3,0]) -> [0,0,0];
(inc,[3,1,0]) -> [4,2,1];
(zero,[1]) -> [0];
(inc,[3,0,1]) -> [4,1,2];
(zero,[]) -> [];
(inc,[0,1]) -> [1,2];
(zero,[0]) -> [0];
(zero,[1,2]) -> [0,0];
(inc,[]) -> [];
(zero,[2]) -> [0];
(zero,[1,0,3]) -> [0,0,0];
(zero,[0,3]) -> [0,0];
(inc,[0,2]) -> [1,3];
(zero,[0,0,1]) -> [0,0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.055758 true true

(zero,[]) -> [];
(inc,[0,2,0]) -> [1,3,1];
(zero,[0,1]) -> [0,0];
(inc,[1,3,1]) -> [2,4,2];
(inc,[1]) -> [2];
(zero,[0]) -> [0];
(inc,[3]) -> [4];
(inc,[0]) -> [1];
(zero,[2]) -> [0];
(zero,[0,2]) -> [0,0];
(inc,[2,1,0]) -> [3,2,1];
(zero,[2,3]) -> [0,0];
(inc,[]) -> [];
(inc,[3,2]) -> [4,3];
(zero,[1,0,0]) -> [0,0,0];
(inc,[2,2]) -> [3,3];
(inc,[1,0]) -> [2,1];
(inc,[2,1,3]) -> [3,2,4];
(inc,[3,2,0]) -> [4,3,1];
(inc,[0,0]) -> [1,1];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0567229999999 true true

(inc,[0,1,0]) -> [1,2,1];
(zero,[2,3]) -> [0,0];
(zero,[2,2,1]) -> [0,0,0];
(zero,[]) -> [];
(zero,[0,2,2]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[3,2]) -> [0,0];
(zero,[0,3,1]) -> [0,0,0];
(inc,[1,3,0]) -> [2,4,1];
(zero,[1,1,1]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[3,1,3]) -> [4,2,4];
(inc,[1,2,2]) -> [2,3,3];
(zero,[1,3,0]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[0]) -> [1];
(inc,[]) -> [];
(zero,[3]) -> [0];
(inc,[1]) -> [2];
(zero,[1,2]) -> [0,0];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.056664 true true

