list_length
[1] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 1 in list_length) : NatList -> Nat)
0.00329499999998 false false

[2,2,3] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 3 in list_length) : NatList -> Nat)
0.00321600000007 false false

[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 0 in list_length) : NatList -> Nat)
0.00312600000007 false false

[0] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 1 in list_length) : NatList -> Nat)
0.00307999999995 false false

[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 0 in list_length) : NatList -> Nat)
0.00317799999993 false false

[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 0 in list_length) : NatList -> Nat)
0.00303600000007 false false

[1,2,3] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 3 in list_length) : NatList -> Nat)
0.00326500000006 false false

[3,2] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 2 in list_length) : NatList -> Nat)
0.00317300000006 false false

[0,2] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 2 in list_length) : NatList -> Nat)
0.00317199999995 false false

[2,0,1] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 3 in list_length) : NatList -> Nat)
0.00317900000005 false false

[1] -> 1;
[2,1,3] -> 3;

=================================
NOSOL

[2] -> 1;
[2,2] -> 2;

=================================
NOSOL

[0,3] -> 2;
[2] -> 1;

=================================
NOSOL

[1,1] -> 2;
[2,1,1] -> 3;

=================================
NOSOL

[0] -> 1;
[0,2] -> 2;

=================================
NOSOL

[] -> 0;
[0,2] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      2 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00416199999995 false true

[0,0,2] -> 3;
[2] -> 1;

=================================
NOSOL

[2,0] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      #2.1 y1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00415300000009 false true

[1,2,0] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (S (#2.1 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00414999999998 false true

[0] -> 1;
[0,3] -> 2;

=================================
NOSOL

[0,2,3] -> 3;
[3,2] -> 2;
[2,0,3] -> 3;

=================================
NOSOL

[] -> 0;
[2] -> 1;
[0,2,3] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00388999999996 true true

[1] -> 1;
[0] -> 1;
[3] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_length = \xs -> 1 in list_length) : NatList -> Nat)
0.00298799999996 false false

[] -> 0;
[0,3] -> 2;
[3] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0039240000001 true true

[1,3,1] -> 3;
[3] -> 1;
[1] -> 1;

=================================
NOSOL

[2] -> 1;
[0,0,1] -> 3;
[3,2] -> 2;

=================================
NOSOL

[2] -> 1;
[2,3,0] -> 3;
[0] -> 1;

=================================
NOSOL

[0,3,2] -> 3;
[1,3] -> 2;
[1] -> 1;

=================================
NOSOL

[2] -> 1;
[] -> 0;
[0,0,1] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00394400000005 true true

[2,1] -> 2;
[] -> 0;
[0] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0039589999999 true true

[1,2] -> 2;
[3,1,0] -> 3;
[] -> 0;
[0,3] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00376499999993 true true

[1,1] -> 2;
[3,3,2] -> 3;
[1] -> 1;
[3,0,0] -> 3;

=================================
NOSOL

[3,3,1] -> 3;
[] -> 0;
[2,2,0] -> 3;
[0,1] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00322499999993 true true

[] -> 0;
[3,3] -> 2;
[0,1] -> 2;
[2,0] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      2 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00386400000002 false true

[0,2,1] -> 3;
[] -> 0;
[2,2] -> 2;
[3,2,0] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0033390000001 true true

[3,0,0] -> 3;
[1,2] -> 2;
[2,3,1] -> 3;
[1,3] -> 2;

=================================
NOSOL

[0,3] -> 2;
[] -> 0;
[2,1] -> 2;
[1] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00383699999998 true true

[2,1,0] -> 3;
[2,3,0] -> 3;
[3] -> 1;
[2,2,1] -> 3;

=================================
NOSOL

[] -> 0;
[3,0] -> 2;
[3,1] -> 2;
[3,1,3] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00326100000007 true true

[2] -> 1;
[0] -> 1;
[1,1,3] -> 3;
[1] -> 1;

=================================
NOSOL

[3,3] -> 2;
[1,1] -> 2;
[3,1,0] -> 3;
[] -> 0;
[1] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003242 true true

[0,2,2] -> 3;
[] -> 0;
[0] -> 1;
[2] -> 1;
[3] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00318700000003 true true

[] -> 0;
[0] -> 1;
[2] -> 1;
[2,1,3] -> 3;
[1] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003242 true true

[2,3,0] -> 3;
[3,0,3] -> 3;
[] -> 0;
[0] -> 1;
[0,0] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00321099999996 true true

[] -> 0;
[0,2,2] -> 3;
[1,3] -> 2;
[0,2] -> 2;
[0,1,2] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00331099999994 true true

[1,1,2] -> 3;
[] -> 0;
[3,3] -> 2;
[2] -> 1;
[1,1,1] -> 3;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00342300000011 true true

[1] -> 1;
[2,2,2] -> 3;
[] -> 0;
[3] -> 1;
[0,0] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0032369999999 true true

[] -> 0;
[1] -> 1;
[2,1] -> 2;
[0,3,0] -> 3;
[2] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00322299999993 true true

[] -> 0;
[0,2] -> 2;
[1,3] -> 2;
[3,3] -> 2;
[3] -> 1;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00320699999997 true true

[0,0] -> 2;
[2,0] -> 2;
[0,0,1] -> 3;
[] -> 0;
[1,3] -> 2;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00327500000003 true true

