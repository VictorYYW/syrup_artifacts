tree_map
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Leaf
      , 0
      , Node (Node (Leaf, 0, Leaf), 0, Leaf)
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.305931 false false

(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Node (Node (Leaf, 2, Leaf), 4, Leaf)
      , 2
      , Leaf
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.694171 false false

(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Node (Leaf, 1, Node (Leaf, 3, Leaf))
      , 1
      , Leaf
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.443086 false false

(inc,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0368739999999 false false

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 2, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.206059 false false

(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 1, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.209998 false false

(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Node (Leaf, 2, Leaf)
      , 3
      , Node (Leaf, 3, Leaf)
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.811763 false false

(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Node (Node (Leaf, 0, Leaf), 1, Leaf)
      , 0
      , Leaf
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.425756 false false

(inc,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0370600000001 false false

(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> Node
      ( Node (Leaf, 3, Node (Leaf, 1, Leaf))
      , 2
      , Leaf
      ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.584805 false false

(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));

=================================
None
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));

=================================
NOSOL

(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0393260000001 false false

(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ());

=================================
NOSOL

(div2,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));

=================================
NOSOL

(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case f 0 of
      Z y1 -> 
        Node
          ( Node (Node (Leaf, 0, Leaf), 1, Leaf)
          , 1
          , Leaf
          )

      S y1 -> 
        Node (Node (Leaf, 4, Leaf), 3, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
1.914526 false false

(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case f 0 of
      Z y1 -> 
        Node
          ( Node (Node (Leaf, 0, Leaf), 1, Leaf)
          , 1
          , Leaf
          )

      S y1 -> 
        Node
          ( Node (Leaf, 3, Leaf)
          , 2
          , Node (Leaf, 2, Leaf)
          ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.86086 false false

(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case f 0 of
      Z y1 -> 
        Node
          ( Node (Leaf, 1, Node (Leaf, 1, Leaf))
          , 0
          , Leaf
          )

      S y1 -> 
        Node
          ( Leaf
          , 1
          , Node (Node (Leaf, 4, Leaf), 3, Leaf)
          ) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.204741 false false

(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Node (Leaf, 0, Node (Leaf, 0, Leaf))
          , 0
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Node
              ( Leaf
              , 0
              , Node (Leaf, 0, fixTreeMap (#3.3 y1))
              )
          , 0
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0862870000001 false false

(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(inc,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.086603 true true

(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
NOSOL

(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));

=================================
NOSOL

(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 4, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.110283 false false

(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0864879999999 false false

(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ()));

=================================
NOSOL

(inc,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.161109 false false

(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));

=================================
NOSOL

(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0862870000001 false false

(inc,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ());

=================================
NOSOL

(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.09032 true true

(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());

=================================
None
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());

=================================
NOSOL

(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0985820000001 true true

(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());

=================================
NOSOL

(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , #3.1 y1
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , #3.1 y1
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.089058 false false

(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.112641 true true

(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));

=================================
NOSOL

(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));

=================================
NOSOL

(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));

=================================
NOSOL

(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));

=================================
NOSOL

(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));

=================================
NOSOL

(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.104912 true true

(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0853460000001 true true

(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));

=================================
NOSOL

(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));

=================================
NOSOL

(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.126975 false false

(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));

=================================
None
(inc,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),4,Leaf ())),2,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());

=================================
NOSOL

(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),3,Leaf ()));

=================================
NOSOL

(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , S (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.133423 false false

(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
NOSOL

(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),4,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),4,Leaf ()),2,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));

=================================
NOSOL

(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.093881 true true

(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0925970000001 true true

(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());

=================================
NOSOL

(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
NOSOL

(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),3,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
NOSOL

(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.090506 true true

(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0984900000001 true true

(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
NOSOL

(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.107065 true true

(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));

=================================
NOSOL

(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0664919999999 true true

(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0729120000001 true true

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),1,Leaf ()));

=================================
NOSOL

(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.064136 true true

(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0676269999999 true true

(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),2,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0720940000001 true true

(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.063789 true true

(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.063136 true true

(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));

=================================
NOSOL

(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),4,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));

=================================
NOSOL

(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(inc,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.118158 true true

(inc,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),4,Leaf ())),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.069837 true true

(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),3,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.071038 true true

(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.074578 true true

(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0715090000001 true true

(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));

=================================
NOSOL

(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.100374 true true

(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.303418 true true

(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),4,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));

=================================
NOSOL

(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.143274 true true

(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0828349999999 true true

(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0809360000001 true true

(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.06591 true true

(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.084157 true true

(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),3,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.108827 true true

(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0790910000001 true true

(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.111184 true true

(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.082236 true true

(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.121161 true true

(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),1,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.137354 true true

(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.137586 true true

(div2,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),3,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.125571 true true

(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));

=================================
NOSOL

(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),2,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0942970000001 true true

(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));

=================================
NOSOL

(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),4,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());

=================================
NOSOL

(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.113382 true true

(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.115627 true true

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),2,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.125457 true true

(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.120951 true true

(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));

=================================
NOSOL

(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.120976 true true

(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),4,Leaf ())),3,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.146292 true true

(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.121906 true true

(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.13407 true true

(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.127036 true true

(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.116279 true true

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),3,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));

=================================
NOSOL

(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.120271 true true

(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));

=================================
NOSOL

(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0943219999999 true true

(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.086444 true true

(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.08942 true true

(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),4,Leaf ())),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.098767 true true

(div2,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.088139 true true

(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0788729999999 true true

(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),2,Leaf ()),2,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.098487 true true

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0796110000001 true true

(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0793200000001 true true

(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.111874 true true

(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.085032 true true

(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),4,Leaf ()),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.093018 true true

(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.085857 true true

(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.091103 true true

(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.076116 true true

(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.096681 true true

(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(div2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),4,Leaf ())),2,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0895439999999 true true

(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),2,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.081101 true true

(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),3,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0882260000001 true true

(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),1,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0836730000001 true true

(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.087726 true true

(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0873730000001 true true

(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.088878 true true

(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0899059999999 true true

(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.11307 true true

(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.081263 true true

(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),3,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.091993 true true

(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0838309999999 true true

(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),4,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0984109999999 true true

(inc,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.105303 true true

(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),4,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0960669999999 true true

(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0941769999999 true true

(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),3,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0998939999999 true true

(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.095178 true true

(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.102761 true true

(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0944810000001 true true

(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.102543 true true

(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0990420000001 true true

(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.094576 true true

(inc,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0967780000001 true true

(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.102091 true true

(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.103899 true true

(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.099236 true true

(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0953489999999 true true

(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),4,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),4,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.090631 true true

(div2,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0996439999999 true true

(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.102948 true true

(inc,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),1,Leaf ()),2,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),4,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.100255 true true

(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0998360000001 true true

(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),2,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.103327 true true

(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),3,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.102292 true true

(inc,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(div2,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.104015 true true

(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),1,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),4,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
NOSOL

(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(inc,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),4,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0978720000001 true true

(inc,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),4,Leaf ()),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.105351 true true

(div2,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Leaf ()) -> Leaf ();

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.094443 true true

(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0966169999999 true true

(div2,Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.104915 true true

(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),2,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),2,Leaf ())));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.10131 true true

(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),3,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.100995 true true

(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),4,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),4,Node (Leaf (),2,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.100934 true true

(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),4,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),4,Leaf ()),4,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),3,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),4,Leaf ());

=================================
NOSOL

(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),4,Leaf ()));
(inc,Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),4,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),4,Leaf ()),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),4,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.104726 true true

(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),3,Leaf ()));
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),3,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(inc,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.119555 true true

(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.108793 true true

(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),4,Leaf ()),2,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.117044 true true

(div2,Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),4,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),2,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),1,Leaf ())),2,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),3,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.101996 true true

(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ())));
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.114136 true true

(inc,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),3,Leaf ());
(div2,Node (Leaf (),2,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),4,Leaf ());
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),4,Leaf ())),2,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(div2,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),4,Node (Leaf (),4,Leaf ())));
(div2,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ());
(inc,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.12343 true true

(div2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.112533 true true

(inc,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),4,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),4,Node (Leaf (),2,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(div2,Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),4,Leaf ());
(inc,Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),3,Node (Leaf (),4,Leaf ())),2,Leaf ());
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.140175 true true

(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ()));
(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ()));
(inc,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ());
(div2,Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),2,Leaf ());
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.116554 true true

(inc,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),2,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ())));
(inc,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),4,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),3,Leaf ()));
(div2,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),3,Leaf ());
(div2,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),1,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),4,Leaf ()));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ()));
(inc,Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ());
(inc,Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ())) -> Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.109404 true true

(inc,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),3,Leaf ()),4,Leaf ());
(inc,Node (Leaf (),3,Leaf ())) -> Node (Leaf (),4,Leaf ());
(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(div2,Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(div2,Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ())));
(div2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),3,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),4,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(inc,Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ())))) -> Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),1,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ());
(inc,Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.108773 true true

(div2,Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ()));
(div2,Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ());
(inc,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),4,Leaf ()),2,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),2,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(inc,Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ());
(div2,Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ());
(div2,Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ());
(div2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> Node (Node (Leaf (),0,Leaf ()),1,Leaf ());
(inc,Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ()))) -> Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ()));
(inc,Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),4,Node (Leaf (),4,Node (Leaf (),4,Leaf ())));
(inc,Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),4,Leaf ())));
(inc,Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ()));
(div2,Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ())) -> Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ());
(div2,Leaf ()) -> Leaf ();
(inc,Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ()))) -> Node (Node (Leaf (),2,Leaf ()),4,Node (Leaf (),2,Leaf ()));
(div2,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.116723 true true

(div2,Node (Leaf (),1,Leaf ())) -> Node (Leaf (),0,Leaf ());
(inc,Node (Leaf (),0,Leaf ())) -> Node (Leaf (),1,Leaf ());
(div2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),1,Leaf ()));
(div2,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()))) -> Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ()));
(inc,Leaf ()) -> Leaf ();
(div2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),1,Node (Leaf (),0,Leaf ()));
(inc,Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ())) -> Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ());
(inc,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> Node (Node (Leaf (),2,Leaf ()),1,Leaf ());
(div2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> Node (Leaf (),0,Node (Leaf (),0,Leaf ()));
(inc,Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),4,Leaf ())));
(div2,Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ()));
(inc,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> Node (Leaf (),3,Node (Leaf (),4,Leaf ()));
(div2,Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ()))) -> Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ()));
(div2,Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ())))) -> Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ())));
(div2,Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ()))) -> Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ()));
(inc,Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ()))) -> Node (Node (Leaf (),4,Leaf ()),1,Node (Leaf (),4,Leaf ()));
(div2,Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ())) -> Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ());

=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.103722 true true

