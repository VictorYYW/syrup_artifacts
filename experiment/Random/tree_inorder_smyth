tree_inorder
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00832500000001 false false

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [3, 3, 0] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00918999999999 false false

Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [0, 2, 0] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00967100000003 false false

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [2,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2, 0, 3] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00947799999994 false false

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [2,3,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2, 3, 0] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00974599999995 false false

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [2,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2, 2, 3] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00960099999998 false false

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2, 1, 2] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00900900000011 false false

Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [1,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [1, 2, 3] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00983900000006 false false

Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2, 2, 3] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.010123 false false

Node (Leaf (),2,Leaf ()) -> [2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder = \xss -> [2] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0146090000001 false false

Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];

=================================
NOSOL

Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [2,3,3];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];

=================================
NOSOL

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [1,3,3];

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [3,0,2];

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [1,2,0];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      [1, #3.2 y1, 0]

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.016938 false false

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [1,0,0];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];

=================================
NOSOL

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [0,3,3];

=================================
NOSOL

Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [2,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      [2, 0, #3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons
        ( 2
        , Cons
            ( 0
            , Cons (#3.2 y1, tree_inorder (#3.3 y1))
            )
        )

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0160040000001 false false

Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [0,2,3];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons (#3.2 y1, tree_inorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons (#3.2 y1, tree_inorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.014459 false false

Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [0,2,0];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Leaf () -> [];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> [0,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.131241 true true

Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [0,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons (#3.2 y1, tree_inorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons (#3.2 y1, tree_inorder (#3.3 y1))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.013471 false false

Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [1,0,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,0];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [0,1,3];

=================================
NOSOL

Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [0,1,3];
Leaf () -> [];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.378952 true true

Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.275157 true true

Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,2];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [0,1,2];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Leaf ()) -> [1];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> [3,0,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.386429 false false

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [2,0,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [3,0,0];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Leaf (),0,Leaf ()) -> [0];

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [2,0,2];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [3,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.333902 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [1,2,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];

=================================
NOSOL

Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [3,1,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Leaf ()) -> [2];

=================================
NOSOL

Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [0,2,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [3,1,2];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,0,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];

=================================
NOSOL

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [2,1,0];

=================================
NOSOL

Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];

=================================
NOSOL

Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [3,2,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [2,3,1];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,2];

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_inorder (#3.1 y1)) (tree_inorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , append (tree_inorder (#3.1 y1)) (tree_inorder (#3.3 y1))
        )

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.231248 false false

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [0,3,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [0,2,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [0,0,1];

=================================
NOSOL

Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [2,1,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.629128 true true

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [3,3,2];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [0,3,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.346689 true true

Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [0,3,1];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.246661 true true

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Leaf (),1,Leaf ()) -> [1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.175887 true true

Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [3,0,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [2,1,1];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.185028 true true

Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [1,1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [2,1,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [3,2,2];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [1,2,1];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.296879 true true

Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [1,3,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [1,0,3];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,2,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.493267 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [2,0,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [1,2,3];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.513999 true true

Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,3,1];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.460155 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [2,1,0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> [3,3,2];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.677729 true true

Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [0,3,2];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.200105 true true

Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [0,3,1];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,2];

=================================
NOSOL

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [2,0,0];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> [3,0,1];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.586102 true true

Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [1,3,2];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];

=================================
NOSOL

Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,2,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.308441 true true

Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Leaf () -> [];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.308948 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,0,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [1,2,0];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [3,2,0];

=================================
NOSOL

Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,3,1];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.338168 true true

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()) -> [0,1,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [0,3,1];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,2,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,0,2];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [2,3,1];
Leaf () -> [];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.284557 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [0,1,3];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [0,1,3];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [2,3,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.314234 true true

Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [3,0,0];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [2,2,2];
Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [0,1,2];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [0,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.362281 true true

Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [0,3,1];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,3,2];

=================================
NOSOL

Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [3,0,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.332759 true true

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,3,0];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [3,0,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.337174 true true

Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,3,1];
Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [3,1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.315994 true true

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Leaf () -> [];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,0,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.360329 true true

Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [0,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,1,3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.394327 true true

Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2,Leaf ()) -> [1,0,2];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.335304 true true

Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,2];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [1,2,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [2,1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.876412 true true

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,3,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [0,3,2];

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> [2,1,0];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [2,2,2];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [3,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [1,3,2];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.479909 true true

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [1,1,2];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [0,3,3];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,0,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.389937 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()) -> [3,3,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [1,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.366162 true true

Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> [2,3,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [0,3,3];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [2,3,1];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [0,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.452587 true true

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [3,2,2];
Leaf () -> [];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ()) -> [2,3,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [0,3,0];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.372122 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [1,2,1];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.405786 true true

Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,3,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()) -> [2,2,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.408897 true true

Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> [0,2,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.396333 true true

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [0,3,3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> [2,0,0];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),0,Leaf ()) -> [0,2,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()) -> [1,1,0];
Node (Leaf (),0,Leaf ()) -> [0];

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [2,0,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [1,0,3];
Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [3,1,0];
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.824375 true true

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> [1,1,1];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> [2,0,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [0,1,1];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [3,2,2];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];

=================================
NOSOL

Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [3,3,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [1,2,3];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [0,3,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,3];

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> [0,3,1];
Leaf () -> [];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,0,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.514561 true true

Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Leaf (),2,Leaf ()) -> [2];
Leaf () -> [];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,0,1];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.434539 true true

Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,1,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [3,2,3];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [0,1,0];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [2,3,0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [2,1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.419679 true true

Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> [3,0,3];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [0,2,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,2,2];
Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,3,1];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.401333 true true

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [2,2,1];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [1,3,1];
Node (Leaf (),2,Leaf ()) -> [2];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [2,0,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [0,3,1];
Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.486797 true true

Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [1,2,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,2,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [0,2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.407353 true true

Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,1,2];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [3,2,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [0,1,3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> [2,0,1];
Leaf () -> [];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [3,2,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.507719 true true

Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [3,2,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,3,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [1,1,3];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()) -> [3,3,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [2,1,3];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [0,2,0];

=================================
NOSOL

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [1,2,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [1,3,2];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.552827 true true

Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [1,1,3];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [3,0,2];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [1,0,1];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [0,1,3];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [0,2,1];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [0,3,0];

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [0,1,2];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Leaf () -> [];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [2,1,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,1,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [2,3,2];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [3,2,1];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [0,0,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.490539 true true

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [1,3,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [1,0,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ()) -> [0,0,1];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Leaf () -> [];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [0,3,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.445507 true true

Leaf () -> [];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> [3,2,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [3,3,0];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ()) -> [0,0,1];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [1,2,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [0,2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.509816 true true

Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [2,1,1];
Node (Leaf (),0,Leaf ()) -> [0];
Leaf () -> [];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [3,3,1];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [0,1,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [2,1,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.528929 true true

Leaf () -> [];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [1,1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [2,0,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [3,3,3];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,3,0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [1,2,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.444754 true true

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [1,1,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> [3,2,1];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> [0,1,3];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [1,0,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [2,1,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [3,3,2];

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [2,3,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [1,0];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Leaf () -> [];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> [3,3,1];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [0,0,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.473825 true true

Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [3,1,1];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,3,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [2,3,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,2,2];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> [2,2,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [3,0,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [3,1,2];
Leaf () -> [];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [0,3,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [3,1,0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.594787 true true

Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [0,0,2];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> [0,2,2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Leaf () -> [];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [0,1,1];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [2,0,3];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [3,2,1];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [3,1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.570132 true true

Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> [3,1,3];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,1,0];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,2,1];
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [1,1,1];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [3,1,2];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [2,2,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.124189 true true

Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [2,2,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [2,0,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [3,2,1];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [2,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,0,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.305509 true true

Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,3,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [1,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Leaf () -> [];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [0,3,0];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [0,0,2];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,0,3];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [0,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.558815 true true

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()) -> [2,3,1];
Leaf () -> [];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [0,3,0];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> [2,2,2];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [2,0,1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [2,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,2,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,2,0];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [0,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.570415 true true

Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [1,2,0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [3,0,2];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [0,1,2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [0,2,0];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [2,1,2];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,3,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.575035 true true

Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [3,2,2];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,2,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [1,0,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Leaf (),3,Leaf ()) -> [3];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.508542 true true

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [3,2,2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,0,1];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [2,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [0,1,3];
Leaf () -> [];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> [1,1,2];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [1,3,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [1,2,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.633287 true true

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [0,0,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> [0,0,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];

=================================
NOSOL

Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> [1,0,0];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [3,2,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [3,2,1];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [0,0,1];
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> [0,3,1];
Leaf () -> [];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> [0,0,0];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,1,2];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [2,1,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [2,0,3];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [3,2,3];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [3,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> [2,2,0];
Node (Leaf (),2,Leaf ()) -> [2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.638937 true true

Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> [1,1,2];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [2,2,1];
Leaf () -> [];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [0,3,2];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [3,0,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [2,3,0];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [1,1,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> [1,1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.675842 true true

Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [3,2,1];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> [1,1,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [0,0,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [2,2,3];
Leaf () -> [];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> [2,0,0];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [0,0,3];
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [1,1,1];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [3,3,0];
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [2,1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.660224 true true

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> [1,2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [2,0,0];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> [3,3,3];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,0,3];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [3,2,3];
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> [2,3,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> [1,2,1];

=================================
NOSOL

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [3,3,3];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [3,3,1];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [0,2,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [1,0,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [3,0,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.587542 true true

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [3,2,0];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [2,3,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [3,1,0];
Node (Leaf (),1,Leaf ()) -> [1];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,3,0];
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> [3,2,0];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [1,0,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
1.308191 true true

Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> [3,3,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Leaf () -> [];
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> [3,3];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [3,0,0];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [2,2,3];
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> [0,1];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,0,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [3,1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.570115 true true

Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()) -> [3,3,0];
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [3,2,0];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> [3,2,2];
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> [3,2,0];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [0,0,1];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [2,3,1];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> [0,0,1];
Node (Leaf (),3,Leaf ()) -> [3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.675769 true true

Leaf () -> [];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()) -> [3,3,0];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [1,2,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [3,0,2];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [3,1,2];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.577349 true true

Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),0,Leaf ()) -> [3,3,0];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),2,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,1,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [1,1,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,2,1];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [0,0,2];
Leaf () -> [];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [0,0,1];
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [3,3,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [2,1,3];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),0,Leaf ()) -> [0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.580456 true true

Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [0,2,2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,1,2];
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> [0,3,0];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [1,3,1];
Leaf () -> [];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()) -> [1,3,2];
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> [1,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [3,3,2];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> [1,2];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> [1,0,1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [3,1,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.628507 true true

Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [0,1,1];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [1,0,1];
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> [1,1,3];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [2,0,1];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> [1,1,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,3,0];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),1,Leaf ()) -> [3,1,1];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [0,2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [2,2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.723782 true true

Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> [2,1,2];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> [3,1];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [3,2,1];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [2,2,1];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [3,3,3];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.667657 true true

Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,1,2];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [3,0,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> [0,0,2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> [2,2,0];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [2,2,1];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> [2,3];
Leaf () -> [];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> [0,2,1];
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> [2,3];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> [3,0,2];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> [3,2];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> [2,2,0];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> [1,1];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [0,1,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.566098 true true

Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> [3,0];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Leaf () -> [];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> [0,0];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> [3,1,3];
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> [0,2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> [0,0,2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [3,0,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [3,1,0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [1,2,3];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.640709 true true

Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [3,1,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> [1,2,3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,2];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [3,3,2];
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> [1,2,0];
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> [2,1,3];
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> [0,3];
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> [2,2,1];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [3,3,0];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [1,0,3];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [1,0,3];
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Leaf () -> [];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.796128 true true

Leaf () -> [];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> [1,0,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> [1,1,2];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [1,2,1];
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> [0,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [1,3,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> [0,1,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> [2,3,1];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> [0,1,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.70701 true true

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [2,0,3];
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [2,0,3];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> [2,0,1];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [1,0];
Leaf () -> [];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [1,2,1];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> [3,3,0];
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> [0,3,3];
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> [0,1,0];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.71982 true true

Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [0,2,2];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [1,2,2];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> [2,0,1];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [0,1,2];
Leaf () -> [];
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [3,1,3];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [3,0,0];
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> [0,2,1];
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> [2,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> [1,3];
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> [3,1,1];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [3,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.645776 true true

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> [2,3,3];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [1,0,0];
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [2,0,0];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,2,2];
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> [0,0,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> [3,0,3];
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> [1,0];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> [1,1,2];
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [1,3,2];
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [0,2,3];
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> [1,0];
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> [2,3,2];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> [0,0,3];
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [1,0,2];

=================================
NOSOL

Node (Leaf (),2,Leaf ()) -> [2];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ()) -> [0,1,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [1,2,1];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> [0,0,2];
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> [1,3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> [2,0,3];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> [0,3,2];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [3,3,1];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.702727 true true

Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [2,3,3];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> [2,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> [2,1,1];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> [1,3,0];
Leaf () -> [];
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [2,2,3];
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> [2,0,1];
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> [1,2,3];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> [2,2,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> [0,0,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.665448 true true

Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [1,3,3];
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> [0,2,3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> [2,3,2];
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),3,Leaf ()) -> [0,3,3];
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> [2,3,3];
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> [1,2,3];
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> [2,2];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> [3,2];
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> [0,1,3];
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> [3,1,1];
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> [2,0,2];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> [1,3,0];

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> [0,3];
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> [1,0,2];
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> [1,3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> [3,0,1];
Node (Leaf (),0,Leaf ()) -> [0];
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> [1,2,0];
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> [0,3,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [2,2,3];
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> [0,1,2];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [3,2,2];
Leaf () -> [];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [0,2,1];
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> [3,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.666992 true true

Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> [0,0];
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> [0,0,0];
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> [1,3,2];
Leaf () -> [];
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> [3,0];
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> [1,3,2];
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [1,2,3];
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> [1,2];
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> [3,0,2];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> [1,1,1];
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> [2,2,2];
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> [3,2,3];
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> [0,0,0];
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> [2,2,1];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.702793 true true

Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> [3,1,2];
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> [2,0];
Leaf () -> [];
Node (Leaf (),1,Leaf ()) -> [1];
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> [0,2,1];
Node (Leaf (),3,Leaf ()) -> [3];
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> [2,3,0];
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> [3,3];
Node (Leaf (),2,Leaf ()) -> [2];
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> [1,3,3];
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> [3,0,2];
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> [2,1];
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> [3,1,0];
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> [0,2];
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> [2,0];

=================================
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\tree_inorder -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder = \xss -> case xss of
    Node y1 -> 
      append (tree_inorder (#3.1 y1)) (Cons (#3.2 y1, tree_inorder (#3.3 y1)))

    Leaf y1 -> 
      [] in tree_inorder) : NatTree -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.573476 true true

