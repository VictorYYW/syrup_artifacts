tree_count_nodes
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00791800000002 false false

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00807499999996 false false

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 2 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00782299999992 false false

Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00796300000002 false false

Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00728400000003 false false

Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00716899999998 false false

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0084710000001 false false

Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00804100000005 false false

Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00819200000001 false false

Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 2 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00780899999995 false false

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00843299999997 false false

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (#3.2 y1)

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (tree_count_nodes (#3.1 y1))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0111750000001 false false

Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00862000000006 false false

Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00962099999992 false false

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Leaf () -> 0;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (#3.2 y1)

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (S (S (tree_count_nodes (#3.1 y1))))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0124800000001 false false

Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00920900000006 false false

Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (tree_count_nodes (#3.1 y1))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (tree_count_nodes (#3.1 y1))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.021201 false false

Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> 2;

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;

=================================
NOSOL

Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Leaf ()) -> 1;

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 2 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00917299999992 false false

Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00964700000009 false false

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;

=================================
NOSOL

Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00980600000003 false false

Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> 1;
Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.103871 true true

Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.733922 true true

Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;

=================================
NOSOL

Leaf () -> 0;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.936183 true true

Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;

=================================
NOSOL

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.882593 true true

Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      3

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.039002 false false

Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
NOSOL

Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.366562 true true

Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),3,Leaf ()) -> 1;
Leaf () -> 0;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.932707 true true

Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.660498 true true

Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.9847 true true

Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0107700000001 false false

Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;

=================================
NOSOL

Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.411976 true true

Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.098808 true true

Node (Leaf (),3,Leaf ()) -> 1;
Leaf () -> 0;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.172317 true true

Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_nodes = \tree -> 3 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.011119 false false

Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      3

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.052784 false false

Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.988883 true true

Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.843535 true true

Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.419939 true true

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;

=================================
NOSOL

Node (Leaf (),1,Leaf ()) -> 1;
Leaf () -> 0;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.987272 true true

Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.334739 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Leaf ()) -> 1;

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),2,Leaf ()) -> 1;
Leaf () -> 0;
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.096261 true true

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.628125 true true

Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.585028 true true

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.471175 true true

Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.534695 true true

Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.978491 true true

Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;

=================================
NOSOL

Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.169578 true true

Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.323297 true true

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.096563 true true

Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.669449 true true

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.319544 true true

Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.853011 true true

Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
NOSOL

Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.651365 true true

Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.364808 true true

Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.671292 true true

Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.845019 true true

Leaf () -> 0;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.086454 true true

Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;

=================================
NOSOL

Leaf () -> 0;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.102658 true true

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.230069 true true

Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.730855 true true

Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Leaf () -> 0;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.245099 true true

Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.470436 true true

Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.176816 true true

Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.83631 true true

Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.763216 true true

Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.989392 true true

Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.953427 true true

Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.045339 true true

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.205923 true true

Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;

=================================
NOSOL

Leaf () -> 0;
Node (Node (Leaf (),3,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.155075 true true

Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.686512 true true

Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;

=================================
NOSOL

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.070924 true true

Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.620134 true true

Leaf () -> 0;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),2,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.636527 true true

Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;

=================================
NOSOL

Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;

=================================
NOSOL

Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Leaf () -> 0;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.199422 true true

Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.723299 true true

Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.293789 true true

Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Leaf () -> 0;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.248088 true true

Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Leaf () -> 0;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.186553 true true

Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Node (Leaf (),0,Leaf ()))) -> 3;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.050762 true true

Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.345026 true true

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;

=================================
NOSOL

Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.171694 true true

Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Leaf () -> 0;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.928483 true true

Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Leaf () -> 0;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.36564 true true

Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),2,Leaf ())) -> 2;

=================================
NOSOL

Node (Leaf (),1,Node (Leaf (),3,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.650963 true true

Leaf () -> 0;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.399687 true true

Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
7.773683 true true

Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Leaf () -> 0;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),3,Node (Leaf (),0,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.091019 true true

Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.587786 true true

Leaf () -> 0;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),0,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.532089 true true

Node (Leaf (),3,Node (Leaf (),3,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Node (Leaf (),0,Leaf ()),3,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),0,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.100023 true true

Leaf () -> 0;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),3,Node (Leaf (),2,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.525286 true true

Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),0,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;

=================================
NOSOL

Node (Leaf (),0,Node (Leaf (),2,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),0,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),0,Leaf ()),3,Leaf ())) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),2,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),0,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),3,Node (Leaf (),2,Leaf ())) -> 2;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.842262 true true

Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.059684 true true

Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Node (Leaf (),0,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),1,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Leaf () -> 0;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),0,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.093855 true true

Node (Leaf (),0,Leaf ()) -> 1;
Leaf () -> 0;
Node (Node (Leaf (),0,Node (Leaf (),3,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),2,Leaf ()) -> 2;
Node (Leaf (),1,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),3,Leaf ()),0,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),1,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.313022 true true

Node (Node (Leaf (),2,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.232464 true true

Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Node (Leaf (),0,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),3,Leaf ()) -> 1;
Leaf () -> 0;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.446991 true true

Node (Node (Leaf (),3,Leaf ()),1,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),2,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Leaf () -> 0;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),0,Node (Leaf (),2,Leaf ())) -> 2;
Node (Node (Leaf (),0,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Node (Leaf (),1,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Leaf (),1,Leaf ()),1,Node (Leaf (),1,Leaf ())) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.082368 true true

Node (Node (Leaf (),2,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),2,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Leaf (),2,Leaf ()),2,Node (Leaf (),0,Leaf ())) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),1,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),2,Leaf ())),3,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),1,Leaf ()) -> 1;
Leaf () -> 0;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.939884 true true

Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),2,Leaf ())) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),3,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Leaf (),2,Node (Leaf (),0,Leaf ())),1,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),0,Leaf ()),0,Leaf ()) -> 2;
Leaf () -> 0;
Node (Node (Leaf (),3,Node (Leaf (),3,Leaf ())),1,Leaf ()) -> 3;
Node (Node (Leaf (),1,Node (Leaf (),3,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Node (Leaf (),1,Node (Leaf (),1,Leaf ())),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
7.512838 true true

Node (Node (Node (Leaf (),3,Leaf ()),0,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),3,Node (Leaf (),0,Leaf ())),2,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),3,Leaf ()),3,Leaf ()) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;
Node (Leaf (),3,Node (Leaf (),1,Node (Leaf (),0,Leaf ()))) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),2,Leaf ()) -> 1;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),2,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;

=================================
NOSOL

Leaf () -> 0;
Node (Leaf (),3,Node (Node (Leaf (),3,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),0,Leaf ()) -> 3;
Node (Leaf (),1,Node (Leaf (),3,Leaf ())) -> 2;
Node (Leaf (),1,Node (Leaf (),2,Leaf ())) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),3,Leaf ()),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),2,Leaf ()) -> 2;
Node (Node (Leaf (),0,Leaf ()),3,Node (Leaf (),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),2,Leaf ()) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),1,Leaf ())) -> 2;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Leaf (),1,Node (Leaf (),2,Node (Leaf (),1,Leaf ()))) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.364445 true true

Node (Leaf (),3,Leaf ()) -> 1;
Node (Leaf (),1,Leaf ()) -> 1;
Node (Node (Leaf (),3,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),2,Node (Node (Leaf (),3,Leaf ()),3,Leaf ())) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Node (Leaf (),0,Leaf ())) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),3,Leaf ())) -> 3;
Node (Leaf (),0,Leaf ()) -> 1;
Node (Node (Node (Leaf (),2,Leaf ()),1,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Node (Leaf (),0,Leaf ())),0,Leaf ()) -> 3;
Node (Leaf (),2,Node (Node (Leaf (),2,Leaf ()),2,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Leaf ()) -> 2;
Node (Node (Leaf (),1,Leaf ()),1,Leaf ()) -> 2;
Node (Leaf (),3,Node (Node (Leaf (),1,Leaf ()),0,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.178559 true true

Node (Node (Node (Leaf (),2,Leaf ()),2,Leaf ()),1,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),3,Node (Leaf (),3,Leaf ()))) -> 3;
Node (Node (Leaf (),1,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),1,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;
Node (Leaf (),0,Node (Leaf (),1,Node (Leaf (),2,Leaf ()))) -> 3;
Node (Node (Leaf (),0,Leaf ()),1,Node (Leaf (),3,Leaf ())) -> 3;
Node (Node (Node (Leaf (),1,Leaf ()),0,Leaf ()),3,Leaf ()) -> 3;
Node (Leaf (),2,Node (Leaf (),0,Leaf ())) -> 2;
Node (Node (Leaf (),0,Node (Leaf (),1,Leaf ())),1,Leaf ()) -> 3;
Leaf () -> 0;
Node (Leaf (),2,Node (Node (Leaf (),1,Leaf ()),1,Leaf ())) -> 3;
Node (Node (Node (Leaf (),3,Leaf ()),1,Leaf ()),0,Leaf ()) -> 3;
Node (Node (Leaf (),3,Leaf ()),0,Node (Leaf (),2,Leaf ())) -> 3;
Node (Node (Leaf (),2,Leaf ()),3,Leaf ()) -> 2;
Node (Leaf (),0,Node (Node (Leaf (),0,Leaf ()),1,Leaf ())) -> 3;

=================================
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_nodes -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_nodes = \tree -> case tree of
    Node y1 -> 
      S (sum (tree_count_nodes (#3.1 y1)) (tree_count_nodes (#3.3 y1)))

    Leaf y1 -> 
      0 in tree_count_nodes) : NatTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
8.073734 true true

