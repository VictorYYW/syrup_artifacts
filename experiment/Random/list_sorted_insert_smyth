list_sorted_insert
([0,3,2],2) -> [0,2,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [0, n, S n, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00751300000002 false false

([0,3,3],1) -> [0,1,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [0, n, S (S n), S (S n)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00716200000011 false false

([1,3],0) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0068940000001 false false

([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00599200000011 false false

([3,2,0],3) -> [3,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.006304 false false

([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00532799999996 false false

([3],1) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00642399999992 false false

([2,0,3],2) -> [2,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00601800000004 false false

([3,3],0) -> [0,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00652799999989 false false

([3,2,2],3) -> [3,2,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00657299999989 false false

([],3) -> [3];
([1,0,1],3) -> [1,0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [1, 0, #2.1 y1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.023177 false false

([2],3) -> [2,3];
([1,0],1) -> [1,0];

=================================
NOSOL

([],1) -> [1];
([0,1],3) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [0, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0155400000001 false false

([],1) -> [1];
([0,1],2) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [0, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0156039999999 false false

([0,0],2) -> [0,0,2];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 0
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 0
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018223 false false

([],2) -> [2];
([2,1,0],1) -> [1,2,1,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00532799999996 false false

([0,0,1],2) -> [0,0,1,2];
([0,3,3],3) -> [0,3,3];

=================================
NOSOL

([],1) -> [1];
([2,0],0) -> [0,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00534500000003 false false

([],0) -> [0];
([0],3) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      [0, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 0
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0110729999999 false false

([1,1],2) -> [1,1,2];
([3,2],2) -> [2,3,2];

=================================
NOSOL

([],2) -> [2];
([3,1],2) -> [2,3,1];
([0,2,0],1) -> [0,1,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons (0, Cons (1, #2.2 y1))

        S y2 -> 
          [2, S n, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0359249999999 false false

([0],1) -> [0,1];
([],2) -> [2];
([1,3],0) -> [0,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (0, Cons (1, #2.2 y1))) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016275 false false

([1,1,3],1) -> [1,1,3];
([1,1],0) -> [0,1,1];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case n of
        Z y2 -> 
          [0, 1, #2.1 y1]

        S y2 -> 
          [1, 1, S (S n)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.167562 false false

([0,2],0) -> [0,2];
([],1) -> [1];
([3,0],0) -> [0,3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0, 2]

        S y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0949579999999 false false

([1],1) -> [1];
([],1) -> [1];
([0,3],2) -> [0,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          Cons (0, Cons (n, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0266449999999 false false

([0,0],1) -> [0,0,1];
([3],0) -> [0,3];
([3,2,2],1) -> [1,3,2,2];

=================================
NOSOL

([3,0],0) -> [0,3,0];
([3,1,1],3) -> [3,1,1];
([3,0],3) -> [3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case n of
    Z y1 -> 
      Cons (0, xs)

    S y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0160579999999 false false

([],2) -> [2];
([0,3,3],1) -> [0,1,3,3];
([0],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons
            ( 0
            , Cons (1, Cons (#2.1 y2, #2.2 y2))
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0393079999999 false false

([2,1,0],1) -> [1,2,1,0];
([2,1,1],3) -> [2,1,1,3];
([1],3) -> [1,3];

=================================
NOSOL

([],3) -> [3];
([3,3],2) -> [2,3,3];
([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00529299999994 false false

([1],0) -> [0,1];
([0,1,1],0) -> [0,1,1];
([3],0) -> [0,3];
([1],3) -> [1,3];

=================================
NOSOL

([0,1],2) -> [0,1,2];
([2,1,3],2) -> [2,1,3];
([1,1],2) -> [1,1,2];
([1],2) -> [1,2];

=================================
NOSOL

([2,0],0) -> [0,2,0];
([0,0],3) -> [0,0,3];
([2,2,1],0) -> [0,2,2,1];
([1,2],2) -> [1,2];

=================================
NOSOL

([],1) -> [1];
([2,1],0) -> [0,2,1];
([3],1) -> [1,3];
([0,2,0],2) -> [0,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (1, [3])

          S y2 -> 
            (1, []))

    Cons y1 -> 
      case n of
        Z y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        S y2 -> 
          list_sorted_insert (#2.2 y1) 0 in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (1, [3])

          S y2 -> 
            (1, []))

    Cons y1 -> 
      case n of
        Z y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        S y2 -> 
          list_sorted_insert (#2.2 y1) 0 in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.459729 false false

([3,1,0],0) -> [0,3,1,0];
([1],3) -> [1,3];
([3],1) -> [1,3];
([0],1) -> [0,1];

=================================
NOSOL

([],0) -> [0];
([],2) -> [2];
([3],0) -> [0,3];
([1,1],2) -> [1,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0, #2.1 y1]

        Cons y2 -> 
          [1, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0474569999999 false false

([2],0) -> [0,2];
([3,2,0],3) -> [3,2,0];
([0],0) -> [0];
([1,0],3) -> [1,0,3];

=================================
NOSOL

([2],1) -> [1,2];
([],1) -> [1];
([0,3,1],2) -> [0,2,3,1];
([0,0,0],3) -> [0,0,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case n of
            Z y2 -> 
              2

            S y2 -> 
              0)
      ]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) (#2.1 y1)
            )

        S y2 -> 
          Cons (y2, Cons (#2.1 y1, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case n of
            Z y2 -> 
              2

            S y2 -> 
              0)
      ]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) (#2.1 y1)
            )

        S y2 -> 
          Cons (y2, Cons (#2.1 y1, #2.2 y1)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.355881 false false

([2,3,0],2) -> [2,3,0];
([3],2) -> [2,3];
([2,2,2],3) -> [2,2,2,3];
([2,3,2],2) -> [2,3,2];

=================================
NOSOL

([3,1,1],0) -> [0,3,1,1];
([],0) -> [0];
([1,1],3) -> [1,1,3];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [3]

    Cons y1 -> 
      case n of
        Z y2 -> 
          Cons (0, Cons (3, #2.2 y1))

        S y2 -> 
          [1, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0555899999999 false false

([1,1],1) -> [1,1];
([],3) -> [3];
([],1) -> [1];
([1,2],2) -> [1,2];
([0,1,0],0) -> [0,1,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0186940000001 false false

([],1) -> [1];
([2,3],3) -> [2,3];
([],0) -> [0];
([0,2],1) -> [0,1,2];
([1],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            (case #2.1 y1 of
              Z y3 -> 
                (0, [1, 2])

              S y3 -> 
                (2, [3]))

        EQ y2 -> 
          [1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          []

        GT y2 -> 
          case list_sorted_insert (#2.2 y1) n of
            Nil y3 -> 
              [0, 1, 2]

            Cons y3 -> 
              [2, 3]

        EQ y2 -> 
          [1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.160741 false false

([3,2,3],3) -> [3,2,3];
([2,0,0],1) -> [1,2,0,0];
([],0) -> [0];
([0,3,2],3) -> [0,3,2];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (2, #2.2 y1))

        GT y2 -> 
          [0, 3, 2]

        EQ y2 -> 
          [3, 2, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.706914 false false

([3,3,3],1) -> [1,3,3,3];
([3,2],1) -> [1,3,2];
([],0) -> [0];
([3,1],3) -> [3,1];
([3],0) -> [0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.606288 false false

([1,0,2],2) -> [1,0,2];
([2],2) -> [2];
([0,1],2) -> [0,1,2];
([],0) -> [0];
([2,0,3],3) -> [2,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          [#2.1 y1, #2.1 y2, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          Cons
            ( #2.1 y1
            , Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.121344 false false

([3,1],1) -> [1,3,1];
([2,3,0],3) -> [2,3,0];
([0,3],1) -> [0,1,3];
([],3) -> [3];
([0,1,2],2) -> [0,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              [1, 3, 1]

        GT y2 -> 
          case list_sorted_insert (#2.2 y1) (S n) of
            Nil y3 -> 
              [0, 1, 3]

            Cons y3 -> 
              xs

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              [1, 3, 1]

        GT y2 -> 
          case list_sorted_insert (#2.2 y1) (S n) of
            Nil y3 -> 
              [0, 1, 3]

            Cons y3 -> 
              xs

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
39.021239 false false

([2,0],2) -> [2,0];
([0],0) -> [0];
([],0) -> [0];
([],2) -> [2];
([3,3],2) -> [2,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (2, xs)

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (2, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
23.678439 false false

([0,1],3) -> [0,1,3];
([2,0,3],2) -> [2,0,3];
([],0) -> [0];
([1,2],0) -> [0,1,2];
([1],0) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (1, #2.2 y1))

        GT y2 -> 
          [0, 1, n]

        EQ y2 -> 
          [2, 0, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.780506 false false

([1,1],3) -> [1,1,3];
([0,2,0],0) -> [0,2,0];
([3,2],2) -> [2,3,2];
([1],3) -> [1,3];
([0],2) -> [0,2];

=================================
NOSOL

([3],1) -> [1,3];
([1],2) -> [1,2];
([1,3,0],2) -> [1,2,3,0];
([1,0,2],2) -> [1,0,2];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare n (#2.1 y1) of
              LT y3 -> 
                (1, [3])

              GT y3 -> 
                (1, [2])

              EQ y3 -> 
                ??)

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, 2, 3, 0]

            GT y3 -> 
              [1, 0, 2]

            EQ y3 -> 
              ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
26.594029 false false

([0,3,3],2) -> [0,2,3,3];
([1,2],2) -> [1,2];
([0],2) -> [0,2];
([],0) -> [0];
([3,3],2) -> [2,3,3];
([2,0,0],0) -> [0,2,0,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          case compare n (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [2, 3, #2.1 y1]

            EQ y3 -> 
              [0, 2, 0, 0]

        GT y2 -> 
          case compare n (S (#2.1 y1)) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (0, Cons (2, #2.2 y1))

            EQ y3 -> 
              [1, 2]

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.428493 false false

([2,2],3) -> [2,2,3];
([0,0],2) -> [0,0,2];
([],2) -> [2];
([3,2,0],2) -> [2,3,2,0];
([0],2) -> [0,2];
([3,0,0],1) -> [1,3,0,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.248694 false false

([2],1) -> [1,2];
([1],1) -> [1];
([],2) -> [2];
([1,3,2],0) -> [0,1,3,2];
([3],2) -> [2,3];
([1,3],1) -> [1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.559556 false false

([3],0) -> [0,3];
([],0) -> [0];
([0,2],1) -> [0,1,2];
([2,0,2],2) -> [2,0,2];
([3,3],3) -> [3,3];
([],1) -> [1];

=================================
None
([0],1) -> [0,1];
([1,0],3) -> [1,0,3];
([3],0) -> [0,3];
([2,0],2) -> [2,0];
([3,0],0) -> [0,3,0];
([],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              xs

    EQ y1 -> 
      Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              xs

    EQ y1 -> 
      Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.695881 false false

([0,2,3],2) -> [0,2,3];
([],1) -> [1];
([1,0,1],0) -> [0,1,0,1];
([],2) -> [2];
([0],1) -> [0,1];
([1,1,1],2) -> [1,1,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (S (#2.1 y1)) of
        LT y2 -> 
          [0, 1, 0, #2.1 y1]

        GT y2 -> 
          [0, 2, S n]

        EQ y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (S (#2.1 y1)) of
        LT y2 -> 
          [0, 1, 0, #2.1 y1]

        GT y2 -> 
          [0, 2, S n]

        EQ y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.549449 false false

([3,1],2) -> [2,3,1];
([],2) -> [2];
([2,3,1],2) -> [2,3,1];
([1],0) -> [0,1];
([1,1],3) -> [1,1,3];
([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (2, Cons (S n, #2.2 y2))

            GT y3 -> 
              [1, 1, n]

            EQ y3 -> 
              [2, S n, 1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
26.398199 false false

([0,1,0],3) -> [0,1,0,3];
([0],3) -> [0,3];
([],1) -> [1];
([3,0],0) -> [0,3,0];
([],2) -> [2];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case n of
        Z y2 -> 
          Cons (0, xs)

        S y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case n of
        Z y2 -> 
          Cons (0, xs)

        S y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.663013 false false

([3],2) -> [2,3];
([0],3) -> [0,3];
([1,1],1) -> [1,1];
([0],1) -> [0,1];
([3,3],2) -> [2,3,3];
([2,0],3) -> [2,0,3];

=================================
NOSOL

([2,3],2) -> [2,3];
([2,1,1],0) -> [0,2,1,1];
([1],2) -> [1,2];
([2,0,3],3) -> [2,0,3];
([],3) -> [3];
([2,3],0) -> [0,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case compare n (Z y1) of
            LT y2 -> 
              ??

            GT y2 -> 
              2

            EQ y2 -> 
              1)
      ]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) (Z y2)
            )

        EQ y2 -> 
          [n, 3] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [ S
          (case compare n (Z y1) of
            LT y2 -> 
              ??

            GT y2 -> 
              2

            EQ y2 -> 
              1)
      ]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) (Z y2)
            )

        EQ y2 -> 
          [n, 3] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.228896 false false

([],0) -> [0];
([0,2,2],1) -> [0,1,2,2];
([3,1,2],3) -> [3,1,2];
([2,0],2) -> [2,0];
([2],3) -> [2,3];
([2,0],0) -> [0,2,0];
([0,0],1) -> [0,0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.154738 true true

([],3) -> [3];
([],2) -> [2];
([1,0],3) -> [1,0,3];
([3,2,0],1) -> [1,3,2,0];
([1,2],0) -> [0,1,2];
([],1) -> [1];
([2,3],3) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (1, [0, 3]))

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case compare n (Z y1) of
          LT y2 -> 
            ??

          GT y2 -> 
            (n, [])

          EQ y2 -> 
            (1, [0, 3]))

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.664535 false false

([],2) -> [2];
([1,1],0) -> [0,1,1];
([1,0],3) -> [1,0,3];
([],3) -> [3];
([0,0],2) -> [0,0,2];
([],0) -> [0];
([2,2],1) -> [1,2,2];

=================================
None
([2],0) -> [0,2];
([3,0],3) -> [3,0];
([1],2) -> [1,2];
([2,3,1],0) -> [0,2,3,1];
([1,2],0) -> [0,1,2];
([1,2,3],2) -> [1,2,3];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.031578 false false

([0,0,2],3) -> [0,0,2,3];
([3,1,1],3) -> [3,1,1];
([0,1],2) -> [0,1,2];
([],1) -> [1];
([],0) -> [0];
([0],1) -> [0,1];
([0,1,1],3) -> [0,1,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
10.37769 false false

([1,0,0],0) -> [0,1,0,0];
([],1) -> [1];
([1],3) -> [1,3];
([3,2,3],1) -> [1,3,2,3];
([0,3],3) -> [0,3];
([1,1],1) -> [1,1];
([3,3,2],1) -> [1,3,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.718697 false false

([0,3],1) -> [0,1,3];
([1],2) -> [1,2];
([0],0) -> [0];
([3],3) -> [3];
([3,3,0],3) -> [3,3,0];
([3,3],1) -> [1,3,3];
([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, xs)

        GT y2 -> 
          Cons (#2.1 y1, Cons (n, #2.2 y1))

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( 1
            , Cons
                ( #2.1 y1
                , list_sorted_insert (#2.2 y1) (#2.1 y1)
                )
            )

        GT y2 -> 
          Cons (#2.1 y1, Cons (n, #2.2 y1))

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.934392 false false

([2,3],3) -> [2,3];
([3],2) -> [2,3];
([3],0) -> [0,3];
([0,2],3) -> [0,2,3];
([],1) -> [1];
([],3) -> [3];
([2,1],3) -> [2,1,3];

=================================
None
([0,0],2) -> [0,0,2];
([1],1) -> [1];
([3],3) -> [3];
([0],1) -> [0,1];
([],3) -> [3];
([2,1],2) -> [2,1];
([2,3],0) -> [0,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.152315 false false

([1,0],0) -> [0,1,0];
([3,3,3],2) -> [2,3,3,3];
([1,0],1) -> [1,0];
([1,2,2],2) -> [1,2,2];
([3,3],0) -> [0,3,3];
([1,0],2) -> [1,0,2];
([1,1],0) -> [0,1,1];

=================================
NOSOL

([3,0,2],0) -> [0,3,0,2];
([3,0],2) -> [2,3,0];
([],2) -> [2];
([],0) -> [0];
([3,0],0) -> [0,3,0];
([0,0,3],3) -> [0,0,3];
([0],2) -> [0,2];
([2],3) -> [2,3];

=================================
None
([0,3,2],2) -> [0,2,3,2];
([0,2,2],3) -> [0,2,2,3];
([0,3,2],0) -> [0,3,2];
([0],1) -> [0,1];
([3,1,0],0) -> [0,3,1,0];
([3,3],2) -> [2,3,3];
([2],2) -> [2];
([1,0,1],0) -> [0,1,0,1];

=================================
NOSOL

([3,2],1) -> [1,3,2];
([0],1) -> [0,1];
([2,2,3],2) -> [2,2,3];
([0,1],3) -> [0,1,3];
([3,1,0],1) -> [1,3,1,0];
([],0) -> [0];
([2,1],1) -> [1,2,1];
([0,1,2],3) -> [0,1,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        ( n
        , Nil
            (case n of
              Z y2 -> 
                ()

              S y2 -> 
                ())
        )

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [2, 2, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        ( n
        , Nil
            (case n of
              Z y2 -> 
                ()

              S y2 -> 
                ())
        )

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (1, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [2, 2, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.251034 false false

([1,1],2) -> [1,1,2];
([2,2],3) -> [2,2,3];
([],3) -> [3];
([1,3,1],3) -> [1,3,1];
([2,1,1],0) -> [0,2,1,1];
([],0) -> [0];
([],1) -> [1];
([2,1,2],2) -> [2,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, Cons (#2.1 y2, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, Cons (#2.1 y2, #2.2 y2)) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
92.30579 false false

([1,1],3) -> [1,1,3];
([],3) -> [3];
([],1) -> [1];
([2,2],1) -> [1,2,2];
([2],0) -> [0,2];
([2,0,0],1) -> [1,2,0,0];
([1],2) -> [1,2];
([1],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.093076 false false

([0],3) -> [0,3];
([0,3],3) -> [0,3];
([],1) -> [1];
([1,2],3) -> [1,2,3];
([3,0,3],1) -> [1,3,0,3];
([1],0) -> [0,1];
([2,1],1) -> [1,2,1];
([0,0],1) -> [0,0,1];

=================================
None
([],0) -> [0];
([3],1) -> [1,3];
([1],3) -> [1,3];
([2,3],1) -> [1,2,3];
([0,1,3],0) -> [0,1,3];
([2,2,0],1) -> [1,2,2,0];
([],2) -> [2];
([0,3],0) -> [0,3];

=================================
None
([2,0,0],1) -> [1,2,0,0];
([1,1,0],2) -> [1,1,0,2];
([1,2,2],0) -> [0,1,2,2];
([2,2],3) -> [2,2,3];
([],2) -> [2];
([0,1],0) -> [0,1];
([2,2],1) -> [1,2,2];
([0,2],3) -> [0,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) 2
            )

        EQ y2 -> 
          [n, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [2]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) 2
            )

        EQ y2 -> 
          [n, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.418132 false false

([1,3],0) -> [0,1,3];
([2,0,1],1) -> [1,2,0,1];
([2,3],3) -> [2,3];
([2,0],0) -> [0,2,0];
([],1) -> [1];
([2,0],1) -> [1,2,0];
([0,0,2],2) -> [0,0,2];
([3,1],2) -> [2,3,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          xs

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( n
            , Cons
                ( #2.1 y1
                , list_sorted_insert (#2.2 y1) (S (S (S (#2.1 y1))))
                )
            )

        GT y2 -> 
          xs

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.207319 false false

([],3) -> [3];
([2,3],1) -> [1,2,3];
([1,3,3],2) -> [1,2,3,3];
([0,0],3) -> [0,0,3];
([3],0) -> [0,3];
([1],3) -> [1,3];
([0,0],0) -> [0,0];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.907358 false false

([],3) -> [3];
([1],1) -> [1];
([1,3],2) -> [1,2,3];
([1,2,2],0) -> [0,1,2,2];
([3,1,3],3) -> [3,1,3];
([0],0) -> [0];
([3,3],2) -> [2,3,3];
([],1) -> [1];
([3],2) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons (1, Cons (n, #2.2 y1))

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          Cons
            ( 1
            , Cons
                ( n
                , list_sorted_insert (#2.2 y1) (S n)
                )
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.343259 false false

([3],3) -> [3];
([3,0,0],2) -> [2,3,0,0];
([2,3],2) -> [2,3];
([3,3],3) -> [3,3];
([2,3],0) -> [0,2,3];
([1,0,2],0) -> [0,1,0,2];
([3,0,1],3) -> [3,0,1];
([],0) -> [0];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [2, 3, 0, 0]

            GT y3 -> 
              ??

            EQ y3 -> 
              Cons (n, #2.2 y2)

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y2) (S n) of
            LT y3 -> 
              ??

            GT y3 -> 
              [0, 2, S (#2.1 y2)]

            EQ y3 -> 
              [0, 1, 0, S (#2.1 y2)] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
51.309809 false false

([],0) -> [0];
([3,2],0) -> [0,3,2];
([0],0) -> [0];
([],3) -> [3];
([],1) -> [1];
([2],0) -> [0,2];
([1,0,3],0) -> [0,1,0,3];
([2,0,1],0) -> [0,2,0,1];
([0],2) -> [0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          [0, n]

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.627047 false false

([0,0],0) -> [0,0];
([],2) -> [2];
([1],2) -> [1,2];
([3,2,2],1) -> [1,3,2,2];
([],0) -> [0];
([2,3],3) -> [2,3];
([0],2) -> [0,2];
([1],1) -> [1];
([2,3,2],1) -> [1,2,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (n, xs)

            GT y3 -> 
              [#2.1 y2, n]

            EQ y3 -> 
              [n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
60.32512 false false

([1],2) -> [1,2];
([0],2) -> [0,2];
([1,3,1],3) -> [1,3,1];
([],2) -> [2];
([2,1],0) -> [0,2,1];
([2],1) -> [1,2];
([3],2) -> [2,3];
([1,1],3) -> [1,1,3];
([1,2],3) -> [1,2,3];

=================================
None
([2,3,3],1) -> [1,2,3,3];
([3,0],2) -> [2,3,0];
([2,0,0],0) -> [0,2,0,0];
([2,3,1],1) -> [1,2,3,1];
([0,2,2],2) -> [0,2,2];
([0],1) -> [0,1];
([],3) -> [3];
([],1) -> [1];
([0],2) -> [0,2];

=================================
None
([0],1) -> [0,1];
([2,3],0) -> [0,2,3];
([0,3],3) -> [0,3];
([2,2,0],3) -> [2,2,0,3];
([],2) -> [2];
([2],3) -> [2,3];
([3],1) -> [1,3];
([0,0],3) -> [0,0,3];
([2,3,2],3) -> [2,3,2];

=================================
None
([1],2) -> [1,2];
([0,2,1],0) -> [0,2,1];
([3],2) -> [2,3];
([],2) -> [2];
([2],3) -> [2,3];
([3,1],3) -> [3,1];
([2,1],2) -> [2,1];
([],1) -> [1];
([2,2],0) -> [0,2,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.2643 false true

([0],1) -> [0,1];
([0,3],2) -> [0,2,3];
([1,2,2],1) -> [1,2,2];
([0],0) -> [0];
([0,1],1) -> [0,1];
([3],3) -> [3];
([1],2) -> [1,2];
([3],0) -> [0,3];
([0,3,1],1) -> [0,1,3,1];

=================================
NOSOL

([3,3],1) -> [1,3,3];
([],1) -> [1];
([],0) -> [0];
([1,3],1) -> [1,3];
([],2) -> [2];
([2,2],3) -> [2,2,3];
([1,2,0],3) -> [1,2,0,3];
([2,0,0],2) -> [2,0,0];
([0,3,1],2) -> [0,2,3,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.342387 true true

([2,2,0],0) -> [0,2,2,0];
([3],0) -> [0,3];
([2],2) -> [2];
([0,0,1],3) -> [0,0,1,3];
([2],3) -> [2,3];
([3,3,0],0) -> [0,3,3,0];
([],3) -> [3];
([],1) -> [1];
([0],2) -> [0,2];
([2],0) -> [0,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.449212 false false

([2,0],3) -> [2,0,3];
([2,3,2],1) -> [1,2,3,2];
([],3) -> [3];
([3,3],2) -> [2,3,3];
([0,3,2],1) -> [0,1,3,2];
([1,3,0],3) -> [1,3,0];
([1,1,1],3) -> [1,1,1,3];
([],2) -> [2];
([0,0,3],2) -> [0,0,2,3];
([3],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
13.864218 true true

([3,1],3) -> [3,1];
([2],3) -> [2,3];
([0],3) -> [0,3];
([0,1,3],3) -> [0,1,3];
([],3) -> [3];
([3,0],1) -> [1,3,0];
([1,1],2) -> [1,1,2];
([2,1],1) -> [1,2,1];
([2,0],3) -> [2,0,3];
([0,0,3],3) -> [0,0,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
26.895687 true true

([3,2,0],0) -> [0,3,2,0];
([],3) -> [3];
([3,0,3],3) -> [3,0,3];
([2,0],0) -> [0,2,0];
([1],3) -> [1,3];
([3],1) -> [1,3];
([0,2],2) -> [0,2];
([1,3],2) -> [1,2,3];
([2,2],0) -> [0,2,2];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
12.824697 true true

([2,0],1) -> [1,2,0];
([],1) -> [1];
([2,0],0) -> [0,2,0];
([],0) -> [0];
([2,1,0],2) -> [2,1,0];
([3,0],2) -> [2,3,0];
([],2) -> [2];
([0,1,2],3) -> [0,1,2,3];
([3],0) -> [0,3];
([1],3) -> [1,3];

=================================
None
([3,2],2) -> [2,3,2];
([0,0],0) -> [0,0];
([2,3,1],3) -> [2,3,1];
([0],3) -> [0,3];
([],2) -> [2];
([0],0) -> [0];
([],3) -> [3];
([1,1,3],3) -> [1,1,3];
([0,2,3],1) -> [0,1,2,3];
([0,2,2],1) -> [0,1,2,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
17.528452 true true

([0],3) -> [0,3];
([0,1],0) -> [0,1];
([1],3) -> [1,3];
([1],2) -> [1,2];
([3],0) -> [0,3];
([3,3,2],0) -> [0,3,3,2];
([],1) -> [1];
([2,0,0],1) -> [1,2,0,0];
([2,0],0) -> [0,2,0];
([0,1,1],2) -> [0,1,1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.44583 false false

([],3) -> [3];
([],0) -> [0];
([0,0,2],3) -> [0,0,2,3];
([3,1],3) -> [3,1];
([2,2],2) -> [2,2];
([0],2) -> [0,2];
([3],2) -> [2,3];
([0,2,0],2) -> [0,2,0];
([1],2) -> [1,2];
([3],1) -> [1,3];

=================================
None
([1,3,3],1) -> [1,3,3];
([2],2) -> [2];
([2,1,3],2) -> [2,1,3];
([2,3],2) -> [2,3];
([],1) -> [1];
([0],2) -> [0,2];
([1,3],2) -> [1,2,3];
([1],2) -> [1,2];
([0,3],1) -> [0,1,3];
([],0) -> [0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons (#2.1 y1, Cons (n, #2.2 y1))

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.918534 false false

([0,2],1) -> [0,1,2];
([1,2,3],3) -> [1,2,3];
([0,3,0],1) -> [0,1,3,0];
([2,1],0) -> [0,2,1];
([2,2],3) -> [2,2,3];
([0,3,1],3) -> [0,3,1];
([1],0) -> [0,1];
([2,2,1],1) -> [1,2,2,1];
([1],2) -> [1,2];
([0,1,2],2) -> [0,1,2];

=================================
NOSOL

([1,2],1) -> [1,2];
([1,2,1],0) -> [0,1,2,1];
([3,1],1) -> [1,3,1];
([0],0) -> [0];
([2,0,1],2) -> [2,0,1];
([],1) -> [1];
([2,0],2) -> [2,0];
([3,1,1],3) -> [3,1,1];
([1,2],3) -> [1,2,3];
([],0) -> [0];
([],2) -> [2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, Cons (#2.1 y1, #2.2 y1))

        GT y2 -> 
          [1, S (#2.1 y1), n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.754371 false false

([],0) -> [0];
([],1) -> [1];
([1,2,0],3) -> [1,2,0,3];
([1,0],3) -> [1,0,3];
([3,3,1],3) -> [3,3,1];
([0],1) -> [0,1];
([3,3,1],0) -> [0,3,3,1];
([2,3,0],3) -> [2,3,0];
([2],1) -> [1,2];
([1,3,2],2) -> [1,2,3,2];
([],3) -> [3];

=================================
None
([1,3,0],1) -> [1,3,0];
([1,3,1],0) -> [0,1,3,1];
([2,0],1) -> [1,2,0];
([0,2,3],2) -> [0,2,3];
([1],2) -> [1,2];
([],0) -> [0];
([0,2,2],1) -> [0,1,2,2];
([1,2],3) -> [1,2,3];
([],2) -> [2];
([3,3,0],0) -> [0,3,3,0];
([3],0) -> [0,3];

=================================
None
([2,2,1],0) -> [0,2,2,1];
([],2) -> [2];
([1,1],3) -> [1,1,3];
([0,2],1) -> [0,1,2];
([1],0) -> [0,1];
([1],3) -> [1,3];
([],3) -> [3];
([],0) -> [0];
([3],1) -> [1,3];
([1],2) -> [1,2];
([3,0,0],3) -> [3,0,0];

=================================
None
([0,0,2],2) -> [0,0,2];
([],0) -> [0];
([0,1,0],3) -> [0,1,0,3];
([3,3,0],1) -> [1,3,3,0];
([2,1,3],0) -> [0,2,1,3];
([2],1) -> [1,2];
([3],0) -> [0,3];
([1,1],3) -> [1,1,3];
([1,0,2],3) -> [1,0,2,3];
([3,1,1],0) -> [0,3,1,1];
([3,0],3) -> [3,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
71.124116 true true

([3,1],2) -> [2,3,1];
([2,0,3],1) -> [1,2,0,3];
([3],0) -> [0,3];
([2,3,3],2) -> [2,3,3];
([0],3) -> [0,3];
([3],1) -> [1,3];
([1,2],2) -> [1,2];
([],1) -> [1];
([2,3,0],1) -> [1,2,3,0];
([1],0) -> [0,1];
([1,3,1],0) -> [0,1,3,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [1]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.620058 false false

([1,2],1) -> [1,2];
([0,2],0) -> [0,2];
([],2) -> [2];
([3,3,2],3) -> [3,3,2];
([2,0,2],3) -> [2,0,2,3];
([2,2],3) -> [2,2,3];
([3,3],0) -> [0,3,3];
([0],3) -> [0,3];
([2,2,2],1) -> [1,2,2,2];
([1,1],0) -> [0,1,1];
([1,2],2) -> [1,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
64.170346 true true

([],3) -> [3];
([1,2],3) -> [1,2,3];
([2,3,0],0) -> [0,2,3,0];
([1,3,1],0) -> [0,1,3,1];
([1],1) -> [1];
([3,2,2],2) -> [2,3,2,2];
([2],1) -> [1,2];
([0,0,0],0) -> [0,0,0];
([3],1) -> [1,3];
([1,3],1) -> [1,3];
([3,3],3) -> [3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [3]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.066836 false false

([],0) -> [0];
([0],3) -> [0,3];
([2,3,2],2) -> [2,3,2];
([],2) -> [2];
([0],1) -> [0,1];
([1,3,0],2) -> [1,2,3,0];
([0,0,3],2) -> [0,0,2,3];
([1,3,1],3) -> [1,3,1];
([1],1) -> [1];
([3,0],1) -> [1,3,0];
([1,3,3],3) -> [1,3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.741295 true true

([0,0],1) -> [0,0,1];
([0,1,0],1) -> [0,1,0];
([2],0) -> [0,2];
([],3) -> [3];
([3,1],0) -> [0,3,1];
([1],2) -> [1,2];
([3],2) -> [2,3];
([0,3,0],2) -> [0,2,3,0];
([3,0],0) -> [0,3,0];
([1,2],0) -> [0,1,2];
([],2) -> [2];

=================================
None
([2],2) -> [2];
([2],0) -> [0,2];
([0,3],0) -> [0,3];
([3,0],3) -> [3,0];
([1,2],1) -> [1,2];
([1,1],1) -> [1,1];
([1,2,2],2) -> [1,2,2];
([3,2,0],1) -> [1,3,2,0];
([0,1,1],0) -> [0,1,1];
([0,3],3) -> [0,3];
([0,2,1],3) -> [0,2,1,3];
([1,1,2],0) -> [0,1,1,2];

=================================
NOSOL

([0,0,2],3) -> [0,0,2,3];
([2],0) -> [0,2];
([0,3],0) -> [0,3];
([0,1,0],3) -> [0,1,0,3];
([0,2],3) -> [0,2,3];
([],3) -> [3];
([],0) -> [0];
([1,1,1],3) -> [1,1,1,3];
([3],0) -> [0,3];
([],1) -> [1];
([1,0],2) -> [1,0,2];
([0,0,1],2) -> [0,0,1,2];

=================================
None
([2,0,0],2) -> [2,0,0];
([3,3],0) -> [0,3,3];
([1],0) -> [0,1];
([],2) -> [2];
([],0) -> [0];
([1,2],3) -> [1,2,3];
([],1) -> [1];
([3,1,2],2) -> [2,3,1,2];
([3,0,0],3) -> [3,0,0];
([2,0],3) -> [2,0,3];
([2],0) -> [0,2];
([0,0],0) -> [0,0];

=================================
None
([3,0],0) -> [0,3,0];
([],3) -> [3];
([],1) -> [1];
([3,3,3],3) -> [3,3,3];
([0,1,0],0) -> [0,1,0];
([0],2) -> [0,2];
([],0) -> [0];
([1,0],3) -> [1,0,3];
([2,0],0) -> [0,2,0];
([],2) -> [2];
([3],0) -> [0,3];
([1],1) -> [1];

=================================
None
([0],1) -> [0,1];
([1,1],2) -> [1,1,2];
([],0) -> [0];
([],1) -> [1];
([3,2],0) -> [0,3,2];
([2],0) -> [0,2];
([3,1],0) -> [0,3,1];
([],2) -> [2];
([],3) -> [3];
([2,3],0) -> [0,2,3];
([0,2,2],0) -> [0,2,2];
([1,1,0],2) -> [1,1,0,2];

=================================
None
([0,3],2) -> [0,2,3];
([0,1],0) -> [0,1];
([3,3],1) -> [1,3,3];
([3,3],3) -> [3,3];
([1,3],1) -> [1,3];
([1,0],3) -> [1,0,3];
([0,1],3) -> [0,1,3];
([],1) -> [1];
([0,2],2) -> [0,2];
([1,0,0],1) -> [1,0,0];
([2,0],3) -> [2,0,3];
([3,0,2],2) -> [2,3,0,2];

=================================
None
([3,3],1) -> [1,3,3];
([2],2) -> [2];
([1,2],0) -> [0,1,2];
([2,3,3],1) -> [1,2,3,3];
([1],3) -> [1,3];
([1],0) -> [0,1];
([],0) -> [0];
([],2) -> [2];
([1,0],3) -> [1,0,3];
([3],0) -> [0,3];
([],1) -> [1];
([3,2],0) -> [0,3,2];

=================================
None
([0,1],1) -> [0,1];
([2,0,1],1) -> [1,2,0,1];
([3,0],1) -> [1,3,0];
([1,1],2) -> [1,1,2];
([],1) -> [1];
([1,2],3) -> [1,2,3];
([2],3) -> [2,3];
([],0) -> [0];
([1],2) -> [1,2];
([3,0],0) -> [0,3,0];
([2,0],0) -> [0,2,0];
([0,0],3) -> [0,0,3];

=================================
None
([1,2,2],1) -> [1,2,2];
([3,3,0],0) -> [0,3,3,0];
([0,2],0) -> [0,2];
([1,3],0) -> [0,1,3];
([2],2) -> [2];
([],0) -> [0];
([0,1,2],3) -> [0,1,2,3];
([2,2,2],1) -> [1,2,2,2];
([0,0,2],1) -> [0,0,1,2];
([3,3,1],0) -> [0,3,3,1];
([1,2,3],3) -> [1,2,3];
([2],1) -> [1,2];

=================================
None
([1,2,1],3) -> [1,2,1,3];
([3],0) -> [0,3];
([1],2) -> [1,2];
([2,2],0) -> [0,2,2];
([3],1) -> [1,3];
([2,0],1) -> [1,2,0];
([2,1],1) -> [1,2,1];
([],2) -> [2];
([2,0],0) -> [0,2,0];
([],1) -> [1];
([],3) -> [3];
([2,3,1],3) -> [2,3,1];

=================================
None
([3],2) -> [2,3];
([],1) -> [1];
([3,1,2],1) -> [1,3,1,2];
([3],1) -> [1,3];
([3],3) -> [3];
([],3) -> [3];
([],2) -> [2];
([3,3],3) -> [3,3];
([3,2],3) -> [3,2];
([1,2,2],2) -> [1,2,2];
([1],0) -> [0,1];
([3],0) -> [0,3];
([0,2,3],3) -> [0,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons (#2.1 y1, #2.2 y1)

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.753616 false true

([1,3],1) -> [1,3];
([1],3) -> [1,3];
([],1) -> [1];
([0],0) -> [0];
([2,2,2],3) -> [2,2,2,3];
([2,1,2],0) -> [0,2,1,2];
([1],2) -> [1,2];
([3,3],3) -> [3,3];
([],3) -> [3];
([3,3,2],1) -> [1,3,3,2];
([0,2,1],3) -> [0,2,1,3];
([],2) -> [2];
([1,1],3) -> [1,1,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
62.34812 true true

([0,3],0) -> [0,3];
([0,1],3) -> [0,1,3];
([3,1],2) -> [2,3,1];
([],2) -> [2];
([0],0) -> [0];
([3,2],0) -> [0,3,2];
([0],3) -> [0,3];
([3,0],0) -> [0,3,0];
([0,3],2) -> [0,2,3];
([1,1],2) -> [1,1,2];
([3,2,0],2) -> [2,3,2,0];
([0,0],2) -> [0,0,2];
([3,2,2],3) -> [3,2,2];

=================================
None
([2],3) -> [2,3];
([],2) -> [2];
([2],0) -> [0,2];
([3,0,3],2) -> [2,3,0,3];
([1,1],1) -> [1,1];
([3,3,0],3) -> [3,3,0];
([1,2,2],2) -> [1,2,2];
([3,0,1],3) -> [3,0,1];
([1],1) -> [1];
([0,1,2],1) -> [0,1,2];
([],3) -> [3];
([2,3,0],2) -> [2,3,0];
([],0) -> [0];

=================================
None
([0],1) -> [0,1];
([2,2,1],0) -> [0,2,2,1];
([2,2],0) -> [0,2,2];
([],3) -> [3];
([1,3,2],0) -> [0,1,3,2];
([3],1) -> [1,3];
([2,3,0],2) -> [2,3,0];
([3],3) -> [3];
([],0) -> [0];
([],2) -> [2];
([0,1,0],3) -> [0,1,0,3];
([3,3],0) -> [0,3,3];
([2,3,1],3) -> [2,3,1];

=================================
None
([3],1) -> [1,3];
([1],0) -> [0,1];
([2],1) -> [1,2];
([2,3,3],1) -> [1,2,3,3];
([2,2],3) -> [2,2,3];
([2,1],3) -> [2,1,3];
([0,1],3) -> [0,1,3];
([1],1) -> [1];
([0,3],2) -> [0,2,3];
([0,3],1) -> [0,1,3];
([2,2,3],3) -> [2,2,3];
([3,2,1],1) -> [1,3,2,1];
([],2) -> [2];

=================================
None
([0,2,3],3) -> [0,2,3];
([2,1],0) -> [0,2,1];
([3],0) -> [0,3];
([0],0) -> [0];
([],1) -> [1];
([1,2],1) -> [1,2];
([0],3) -> [0,3];
([],0) -> [0];
([2,2,1],3) -> [2,2,1,3];
([],3) -> [3];
([1,0],0) -> [0,1,0];
([0,1],3) -> [0,1,3];
([0,2,0],0) -> [0,2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.796046 false false

([3],2) -> [2,3];
([3,2],1) -> [1,3,2];
([0,2],1) -> [0,1,2];
([3,1,1],2) -> [2,3,1,1];
([],0) -> [0];
([],2) -> [2];
([1,1],2) -> [1,1,2];
([3,3,1],0) -> [0,3,3,1];
([2,1,3],2) -> [2,1,3];
([],1) -> [1];
([2],0) -> [0,2];
([3,0,1],3) -> [3,0,1];
([2,3],3) -> [2,3];

=================================
None
([3],2) -> [2,3];
([],0) -> [0];
([2,2],1) -> [1,2,2];
([0,3],0) -> [0,3];
([1,0],3) -> [1,0,3];
([0,1],3) -> [0,1,3];
([0,2],3) -> [0,2,3];
([1,0],2) -> [1,0,2];
([3,2],0) -> [0,3,2];
([2,3,1],0) -> [0,2,3,1];
([1,2,3],3) -> [1,2,3];
([2,1,2],2) -> [2,1,2];
([3],1) -> [1,3];

=================================
None
([],1) -> [1];
([0,3],0) -> [0,3];
([1,1],0) -> [0,1,1];
([2,2],2) -> [2,2];
([3,1,0],3) -> [3,1,0];
([0,3],3) -> [0,3];
([2,0,2],3) -> [2,0,2,3];
([],2) -> [2];
([1,0,1],1) -> [1,0,1];
([3],3) -> [3];
([],0) -> [0];
([3,2],2) -> [2,3,2];
([2,1],3) -> [2,1,3];

=================================
None
([],2) -> [2];
([2,2],3) -> [2,2,3];
([1,3,3],1) -> [1,3,3];
([1,1],2) -> [1,1,2];
([2,0],2) -> [2,0];
([2],0) -> [0,2];
([3,2],1) -> [1,3,2];
([2,2,1],3) -> [2,2,1,3];
([1],2) -> [1,2];
([3,3,3],1) -> [1,3,3,3];
([2,0],0) -> [0,2,0];
([0,2,3],3) -> [0,2,3];
([0,3,2],0) -> [0,3,2];
([2],3) -> [2,3];

=================================
None
([0,3],0) -> [0,3];
([],2) -> [2];
([],1) -> [1];
([1],2) -> [1,2];
([1],1) -> [1];
([],3) -> [3];
([2,2],1) -> [1,2,2];
([0],2) -> [0,2];
([2,2],0) -> [0,2,2];
([3,0,3],1) -> [1,3,0,3];
([0,0],1) -> [0,0,1];
([3,0],3) -> [3,0];
([2,2],3) -> [2,2,3];
([2,0],2) -> [2,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
110.198547 true true

([2,0,1],0) -> [0,2,0,1];
([2,3,0],1) -> [1,2,3,0];
([1,0,0],0) -> [0,1,0,0];
([3],1) -> [1,3];
([1],0) -> [0,1];
([2,1],0) -> [0,2,1];
([0,3],3) -> [0,3];
([0,0],2) -> [0,0,2];
([0],2) -> [0,2];
([3,2],1) -> [1,3,2];
([],0) -> [0];
([3,3],2) -> [2,3,3];
([0,1,2],2) -> [0,1,2];
([1],3) -> [1,3];

=================================
None
([0,1,3],1) -> [0,1,3];
([2,1,3],2) -> [2,1,3];
([],2) -> [2];
([3,3],0) -> [0,3,3];
([],1) -> [1];
([0],1) -> [0,1];
([3,1,3],2) -> [2,3,1,3];
([1,3,1],0) -> [0,1,3,1];
([1,2],3) -> [1,2,3];
([0],0) -> [0];
([3],0) -> [0,3];
([1,2],0) -> [0,1,2];
([3,0],0) -> [0,3,0];
([3,2],2) -> [2,3,2];

=================================
None
([3],2) -> [2,3];
([1,0,1],2) -> [1,0,1,2];
([3,3],0) -> [0,3,3];
([3,0],3) -> [3,0];
([3,1,0],3) -> [3,1,0];
([],0) -> [0];
([0,3,3],0) -> [0,3,3];
([2,3,1],0) -> [0,2,3,1];
([1,2],3) -> [1,2,3];
([3,0],1) -> [1,3,0];
([],3) -> [3];
([2,3],3) -> [2,3];
([0,1,0],1) -> [0,1,0];
([],2) -> [2];

=================================
None
([1,2,1],2) -> [1,2,1];
([0],2) -> [0,2];
([3,2],1) -> [1,3,2];
([2],3) -> [2,3];
([2,1],2) -> [2,1];
([1],0) -> [0,1];
([1],1) -> [1];
([1,1],1) -> [1,1];
([2,2,3],2) -> [2,2,3];
([2],2) -> [2];
([3,2],0) -> [0,3,2];
([1,3],0) -> [0,1,3];
([],3) -> [3];
([0],1) -> [0,1];

=================================
None
([2,3],2) -> [2,3];
([1],1) -> [1];
([1],0) -> [0,1];
([1,0,0],1) -> [1,0,0];
([1,0,3],3) -> [1,0,3];
([2,1],0) -> [0,2,1];
([],0) -> [0];
([3],0) -> [0,3];
([],2) -> [2];
([2,3],0) -> [0,2,3];
([],3) -> [3];
([3,3,1],1) -> [1,3,3,1];
([0],1) -> [0,1];
([1,1,2],1) -> [1,1,2];

=================================
None
([],1) -> [1];
([3],2) -> [2,3];
([3,1,1],1) -> [1,3,1,1];
([2],3) -> [2,3];
([2,0],2) -> [2,0];
([0],3) -> [0,3];
([3,0,1],1) -> [1,3,0,1];
([1,1,1],3) -> [1,1,1,3];
([1,0],1) -> [1,0];
([1,0,2],1) -> [1,0,2];
([0],0) -> [0];
([0,0],1) -> [0,0,1];
([1],2) -> [1,2];
([1,0],0) -> [0,1,0];

=================================
None
([0,3,0],3) -> [0,3,0];
([],3) -> [3];
([],2) -> [2];
([3],2) -> [2,3];
([3,3],0) -> [0,3,3];
([3,3,0],0) -> [0,3,3,0];
([2],0) -> [0,2];
([1,2,2],1) -> [1,2,2];
([0,0],1) -> [0,0,1];
([],1) -> [1];
([3,1],0) -> [0,3,1];
([1,2],3) -> [1,2,3];
([3,3],3) -> [3,3];
([0],2) -> [0,2];

=================================
None
([],2) -> [2];
([3],3) -> [3];
([0,2,0],3) -> [0,2,0,3];
([1,3,2],2) -> [1,2,3,2];
([3],0) -> [0,3];
([0,2,0],0) -> [0,2,0];
([1,3,1],0) -> [0,1,3,1];
([3,0,0],1) -> [1,3,0,0];
([],3) -> [3];
([2],0) -> [0,2];
([2,3,1],3) -> [2,3,1];
([1,3,1],2) -> [1,2,3,1];
([3],1) -> [1,3];
([0,1,1],1) -> [0,1,1];

=================================
None
([0],0) -> [0];
([2,3],1) -> [1,2,3];
([3,3,0],0) -> [0,3,3,0];
([1,1,0],2) -> [1,1,0,2];
([2],0) -> [0,2];
([],0) -> [0];
([3],2) -> [2,3];
([3],3) -> [3];
([2],2) -> [2];
([],3) -> [3];
([2,3],3) -> [2,3];
([0,1],2) -> [0,1,2];
([1,2],2) -> [1,2];
([],1) -> [1];
([1],1) -> [1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.870276 false false

([3,3],0) -> [0,3,3];
([1,1,1],0) -> [0,1,1,1];
([0,0,2],0) -> [0,0,2];
([],0) -> [0];
([2,2],3) -> [2,2,3];
([1],1) -> [1];
([],1) -> [1];
([],2) -> [2];
([2,3,1],1) -> [1,2,3,1];
([2,3,3],3) -> [2,3,3];
([2],2) -> [2];
([3,3],3) -> [3,3];
([],3) -> [3];
([1,1,3],2) -> [1,1,2,3];
([1,0,3],1) -> [1,0,3];

=================================
None
([],1) -> [1];
([1,0,2],2) -> [1,0,2];
([2],3) -> [2,3];
([],2) -> [2];
([],0) -> [0];
([3],1) -> [1,3];
([2,0],3) -> [2,0,3];
([],3) -> [3];
([3,1],1) -> [1,3,1];
([3,2],0) -> [0,3,2];
([0],1) -> [0,1];
([1,2,0],0) -> [0,1,2,0];
([0,3],3) -> [0,3];
([1,2,2],1) -> [1,2,2];
([3,1,0],1) -> [1,3,1,0];

=================================
None
([2,2,1],3) -> [2,2,1,3];
([0],0) -> [0];
([1,0,2],3) -> [1,0,2,3];
([0,3,1],2) -> [0,2,3,1];
([2,1,1],1) -> [1,2,1,1];
([1,1,2],1) -> [1,1,2];
([2,2,1],0) -> [0,2,2,1];
([0,2],2) -> [0,2];
([2,0,0],3) -> [2,0,0,3];
([1,3,3],1) -> [1,3,3];
([0],1) -> [0,1];
([1,1,0],0) -> [0,1,1,0];
([0],2) -> [0,2];
([3],3) -> [3];
([2,0,2],3) -> [2,0,2,3];

=================================
NOSOL

([],0) -> [0];
([2,3,1],0) -> [0,2,3,1];
([1],1) -> [1];
([1,1,3],0) -> [0,1,1,3];
([2,3,1],2) -> [2,3,1];
([1,3],1) -> [1,3];
([2,1,0],2) -> [2,1,0];
([1,2],3) -> [1,2,3];
([1],0) -> [0,1];
([3,0,2],2) -> [2,3,0,2];
([3],1) -> [1,3];
([3,1,3],1) -> [1,3,1,3];
([0],0) -> [0];
([2,3,0],1) -> [1,2,3,0];
([1,2,3],2) -> [1,2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [ #2.1 y1
          , S (#2.1 y1)
          , S (S (#2.1 y1))
          ]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
22.91651 false false

([0,2],1) -> [0,1,2];
([1,2],0) -> [0,1,2];
([1,3],3) -> [1,3];
([3],2) -> [2,3];
([2],0) -> [0,2];
([],2) -> [2];
([2],1) -> [1,2];
([1],1) -> [1];
([0],0) -> [0];
([2],2) -> [2];
([],1) -> [1];
([0,0],1) -> [0,0,1];
([1,0,0],2) -> [1,0,0,2];
([],0) -> [0];
([],3) -> [3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.212374 false false

([],0) -> [0];
([0,1,0],1) -> [0,1,0];
([3,1,0],3) -> [3,1,0];
([0,0,1],0) -> [0,0,1];
([3],1) -> [1,3];
([0,3,2],2) -> [0,2,3,2];
([],3) -> [3];
([2,0],0) -> [0,2,0];
([],2) -> [2];
([2],2) -> [2];
([1,1],0) -> [0,1,1];
([1,0],1) -> [1,0];
([0],1) -> [0,1];
([2,1,2],3) -> [2,1,2,3];
([3,1],1) -> [1,3,1];

=================================
None
([0,0],0) -> [0,0];
([2,0],1) -> [1,2,0];
([2,1,3],0) -> [0,2,1,3];
([],2) -> [2];
([1,1],1) -> [1,1];
([0,2,1],3) -> [0,2,1,3];
([2,0],0) -> [0,2,0];
([],3) -> [3];
([3],3) -> [3];
([2],3) -> [2,3];
([],1) -> [1];
([2,2,2],2) -> [2,2,2];
([2,1],2) -> [2,1];
([0,2],0) -> [0,2];
([],0) -> [0];

=================================
None
([3,0],0) -> [0,3,0];
([2],1) -> [1,2];
([1,1],1) -> [1,1];
([0,3],0) -> [0,3];
([],3) -> [3];
([2],0) -> [0,2];
([3],0) -> [0,3];
([1,3,1],1) -> [1,3,1];
([0,2,1],3) -> [0,2,1,3];
([0,3],3) -> [0,3];
([0,0],0) -> [0,0];
([0,0,1],1) -> [0,0,1];
([],2) -> [2];
([],1) -> [1];
([0,0],3) -> [0,0,3];

=================================
None
([0],1) -> [0,1];
([1,3],1) -> [1,3];
([1,0],0) -> [0,1,0];
([0],0) -> [0];
([1,0],2) -> [1,0,2];
([3,2,2],1) -> [1,3,2,2];
([],1) -> [1];
([2],2) -> [2];
([0,2,1],2) -> [0,2,1];
([],3) -> [3];
([1,2,2],0) -> [0,1,2,2];
([3,3,2],2) -> [2,3,3,2];
([3],2) -> [2,3];
([2,0,0],1) -> [1,2,0,0];
([1,2],0) -> [0,1,2];

=================================
None
([1,3],3) -> [1,3];
([],1) -> [1];
([],2) -> [2];
([0,1,3],0) -> [0,1,3];
([1,1,0],2) -> [1,1,0,2];
([1],3) -> [1,3];
([0,3,1],0) -> [0,3,1];
([3,2],1) -> [1,3,2];
([0],2) -> [0,2];
([2],0) -> [0,2];
([0,2],2) -> [0,2];
([0,3],1) -> [0,1,3];
([0,0,2],0) -> [0,0,2];
([1],1) -> [1];
([],3) -> [3];
([1,2],0) -> [0,1,2];

=================================
None
([3],0) -> [0,3];
([3,1],0) -> [0,3,1];
([],0) -> [0];
([3,0],1) -> [1,3,0];
([3],1) -> [1,3];
([1,0],0) -> [0,1,0];
([3,1],3) -> [3,1];
([2,0,1],1) -> [1,2,0,1];
([],1) -> [1];
([1,1],1) -> [1,1];
([3,2,3],2) -> [2,3,2,3];
([2,1],1) -> [1,2,1];
([0,2],0) -> [0,2];
([2,1,2],0) -> [0,2,1,2];
([],2) -> [2];
([3],3) -> [3];

=================================
None
([2,2],1) -> [1,2,2];
([3],2) -> [2,3];
([],1) -> [1];
([],2) -> [2];
([],3) -> [3];
([2],2) -> [2];
([3,1,0],1) -> [1,3,1,0];
([2],0) -> [0,2];
([3],0) -> [0,3];
([2],3) -> [2,3];
([1,1,1],0) -> [0,1,1,1];
([1],0) -> [0,1];
([2,0],0) -> [0,2,0];
([0,3,2],2) -> [0,2,3,2];
([2,0,1],1) -> [1,2,0,1];
([],0) -> [0];

=================================
None
([1],2) -> [1,2];
([3],3) -> [3];
([1,0],2) -> [1,0,2];
([2],1) -> [1,2];
([],3) -> [3];
([1,2,0],3) -> [1,2,0,3];
([3],2) -> [2,3];
([3],1) -> [1,3];
([2],2) -> [2];
([2],3) -> [2,3];
([3,2],0) -> [0,3,2];
([],1) -> [1];
([2,2],3) -> [2,2,3];
([3,1,3],3) -> [3,1,3];
([0,3],0) -> [0,3];
([2,1],3) -> [2,1,3];

=================================
None
([1,0],3) -> [1,0,3];
([0],2) -> [0,2];
([],1) -> [1];
([3,3],2) -> [2,3,3];
([3,2,2],1) -> [1,3,2,2];
([1,1,2],3) -> [1,1,2,3];
([3,3,0],2) -> [2,3,3,0];
([1],2) -> [1,2];
([],3) -> [3];
([3],0) -> [0,3];
([1],3) -> [1,3];
([1,0,1],0) -> [0,1,0,1];
([],2) -> [2];
([3,2],3) -> [3,2];
([1,1,1],1) -> [1,1,1];
([0,1,1],0) -> [0,1,1];

=================================
None
([1,0],3) -> [1,0,3];
([],0) -> [0];
([0,2],3) -> [0,2,3];
([3,1,1],2) -> [2,3,1,1];
([1],2) -> [1,2];
([3,2,0],0) -> [0,3,2,0];
([0],0) -> [0];
([3,3,2],0) -> [0,3,3,2];
([3,1,3],2) -> [2,3,1,3];
([3,1,3],1) -> [1,3,1,3];
([3,3,0],3) -> [3,3,0];
([],3) -> [3];
([1,0,0],2) -> [1,0,0,2];
([1,1],3) -> [1,1,3];
([0],2) -> [0,2];
([2],3) -> [2,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
22.153089 true true

([3,3],2) -> [2,3,3];
([3,1,1],2) -> [2,3,1,1];
([],1) -> [1];
([1,0,2],1) -> [1,0,2];
([3],1) -> [1,3];
([2],2) -> [2];
([1,3,2],0) -> [0,1,3,2];
([3,1,2],0) -> [0,3,1,2];
([0],2) -> [0,2];
([],2) -> [2];
([2,1,2],1) -> [1,2,1,2];
([2],1) -> [1,2];
([2,2,1],3) -> [2,2,1,3];
([2,1,0],2) -> [2,1,0];
([2],3) -> [2,3];
([],3) -> [3];

=================================
None
([1],3) -> [1,3];
([2,0],1) -> [1,2,0];
([1],2) -> [1,2];
([],1) -> [1];
([3],2) -> [2,3];
([0,1,3],1) -> [0,1,3];
([2,1,0],1) -> [1,2,1,0];
([1],1) -> [1];
([1,1],0) -> [0,1,1];
([1,1,3],3) -> [1,1,3];
([],0) -> [0];
([0,1,2],1) -> [0,1,2];
([3,2],1) -> [1,3,2];
([2,2],0) -> [0,2,2];
([],2) -> [2];
([0],3) -> [0,3];

=================================
None
([],1) -> [1];
([2,2],1) -> [1,2,2];
([2,3,1],1) -> [1,2,3,1];
([],2) -> [2];
([3,3,3],3) -> [3,3,3];
([],3) -> [3];
([2,1],1) -> [1,2,1];
([2,3],3) -> [2,3];
([3,1],1) -> [1,3,1];
([],0) -> [0];
([3,0],2) -> [2,3,0];
([3,3,2],0) -> [0,3,3,2];
([2],0) -> [0,2];
([1],2) -> [1,2];
([3,0,2],0) -> [0,3,0,2];
([1,3,0],0) -> [0,1,3,0];

=================================
None
([],2) -> [2];
([],3) -> [3];
([0],3) -> [0,3];
([],0) -> [0];
([2,1],2) -> [2,1];
([0],1) -> [0,1];
([],1) -> [1];
([0,0],1) -> [0,0,1];
([3,0],1) -> [1,3,0];
([2,0],3) -> [2,0,3];
([2],3) -> [2,3];
([3],0) -> [0,3];
([0,1],0) -> [0,1];
([1,1,3],3) -> [1,1,3];
([0,0,0],2) -> [0,0,0,2];
([3,1],1) -> [1,3,1];

=================================
None
([0,3],3) -> [0,3];
([0,0,1],0) -> [0,0,1];
([0],0) -> [0];
([3,1,2],3) -> [3,1,2];
([3,0,1],1) -> [1,3,0,1];
([1,1,1],3) -> [1,1,1,3];
([],3) -> [3];
([3,3],1) -> [1,3,3];
([0],1) -> [0,1];
([],1) -> [1];
([2],1) -> [1,2];
([2,3],0) -> [0,2,3];
([3,2,3],1) -> [1,3,2,3];
([0,2,3],0) -> [0,2,3];
([3],0) -> [0,3];
([2,1],1) -> [1,2,1];
([],2) -> [2];

=================================
None
([],3) -> [3];
([],1) -> [1];
([2,0,1],3) -> [2,0,1,3];
([2,3],0) -> [0,2,3];
([1,0,3],2) -> [1,0,2,3];
([0,0],1) -> [0,0,1];
([],2) -> [2];
([0,3],2) -> [0,2,3];
([],0) -> [0];
([0],1) -> [0,1];
([2,2,0],3) -> [2,2,0,3];
([1],0) -> [0,1];
([3],2) -> [2,3];
([2,1,2],2) -> [2,1,2];
([0,1],3) -> [0,1,3];
([0],2) -> [0,2];
([0,2,3],0) -> [0,2,3];

=================================
None
([0,0,0],2) -> [0,0,0,2];
([0],0) -> [0];
([3,0,2],1) -> [1,3,0,2];
([1,0],2) -> [1,0,2];
([2,0],2) -> [2,0];
([1],3) -> [1,3];
([0,3,3],1) -> [0,1,3,3];
([3],3) -> [3];
([3,2,1],0) -> [0,3,2,1];
([],3) -> [3];
([0],1) -> [0,1];
([],1) -> [1];
([1,2],3) -> [1,2,3];
([1],1) -> [1];
([],2) -> [2];
([],0) -> [0];
([3,3],3) -> [3,3];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
10.160604 true true

([],1) -> [1];
([0],3) -> [0,3];
([],2) -> [2];
([1,2,3],2) -> [1,2,3];
([2,0,0],1) -> [1,2,0,0];
([3,1,0],3) -> [3,1,0];
([2],1) -> [1,2];
([],3) -> [3];
([2,0],2) -> [2,0];
([0,0],0) -> [0,0];
([1,3],1) -> [1,3];
([0,1],0) -> [0,1];
([2,0,1],2) -> [2,0,1];
([0,2,1],0) -> [0,2,1];
([3,0],1) -> [1,3,0];
([2,3,2],1) -> [1,2,3,2];
([3,2],2) -> [2,3,2];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
23.956331 true true

([0],3) -> [0,3];
([0,1],0) -> [0,1];
([1,0],0) -> [0,1,0];
([0,2,1],1) -> [0,1,2,1];
([],0) -> [0];
([2,2],1) -> [1,2,2];
([],3) -> [3];
([2,2,3],0) -> [0,2,2,3];
([0,0,2],0) -> [0,0,2];
([1],3) -> [1,3];
([3,1,2],2) -> [2,3,1,2];
([2,2],0) -> [0,2,2];
([2],2) -> [2];
([2,1],1) -> [1,2,1];
([1,3],3) -> [1,3];
([1,2],2) -> [1,2];
([],2) -> [2];

=================================
None
([0,1,1],0) -> [0,1,1];
([],0) -> [0];
([3,2],3) -> [3,2];
([],2) -> [2];
([],1) -> [1];
([3,0,0],1) -> [1,3,0,0];
([2,1],3) -> [2,1,3];
([2,1,3],1) -> [1,2,1,3];
([0],0) -> [0];
([0,3,3],0) -> [0,3,3];
([1],2) -> [1,2];
([2,2],3) -> [2,2,3];
([1,3,0],1) -> [1,3,0];
([1],0) -> [0,1];
([1,2,2],2) -> [1,2,2];
([2],1) -> [1,2];
([2,1,0],2) -> [2,1,0];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
25.684725 true true

([],0) -> [0];
([0,0],1) -> [0,0,1];
([],3) -> [3];
([0,1,3],0) -> [0,1,3];
([],1) -> [1];
([1,1,0],1) -> [1,1,0];
([0,1,2],2) -> [0,1,2];
([2],1) -> [1,2];
([2],3) -> [2,3];
([1,0],1) -> [1,0];
([3,3,2],2) -> [2,3,3,2];
([3,1],2) -> [2,3,1];
([2,1,3],0) -> [0,2,1,3];
([2,0],2) -> [2,0];
([],2) -> [2];
([2,3],1) -> [1,2,3];
([2],0) -> [0,2];

=================================
None
([0],1) -> [0,1];
([],1) -> [1];
([0,1],2) -> [0,1,2];
([3,3,1],1) -> [1,3,3,1];
([3],0) -> [0,3];
([2],3) -> [2,3];
([3,0,0],2) -> [2,3,0,0];
([3,2,3],1) -> [1,3,2,3];
([2,3,3],2) -> [2,3,3];
([0,3],2) -> [0,2,3];
([],0) -> [0];
([3,1],0) -> [0,3,1];
([2,1,2],2) -> [2,1,2];
([1],1) -> [1];
([1,3],3) -> [1,3];
([3,0,2],1) -> [1,3,0,2];
([3,2],2) -> [2,3,2];

=================================
STACKOVERFLOW

([0],3) -> [0,3];
([2,0],1) -> [1,2,0];
([1,0,0],0) -> [0,1,0,0];
([3,2,2],0) -> [0,3,2,2];
([1,1],0) -> [0,1,1];
([],2) -> [2];
([3],3) -> [3];
([],1) -> [1];
([1,0,1],3) -> [1,0,1,3];
([3],0) -> [0,3];
([1],3) -> [1,3];
([0,3],1) -> [0,1,3];
([],3) -> [3];
([0,0],2) -> [0,0,2];
([0,3],3) -> [0,3];
([0,3],2) -> [0,2,3];
([2],1) -> [1,2];

=================================
None
([],3) -> [3];
([3,0,1],0) -> [0,3,0,1];
([1,2,0],3) -> [1,2,0,3];
([],0) -> [0];
([2,2,1],1) -> [1,2,2,1];
([0],2) -> [0,2];
([0,2],0) -> [0,2];
([2,3,1],2) -> [2,3,1];
([3,1],0) -> [0,3,1];
([1],1) -> [1];
([3],2) -> [2,3];
([2],2) -> [2];
([],2) -> [2];
([1,3,1],1) -> [1,3,1];
([3,0],1) -> [1,3,0];
([1],0) -> [0,1];
([1],2) -> [1,2];

=================================
None
([2,1,2],0) -> [0,2,1,2];
([3],0) -> [0,3];
([1],2) -> [1,2];
([1],1) -> [1];
([],0) -> [0];
([0],2) -> [0,2];
([1,1,0],1) -> [1,1,0];
([1,0,3],0) -> [0,1,0,3];
([0],0) -> [0];
([],2) -> [2];
([],3) -> [3];
([0,2],0) -> [0,2];
([2],2) -> [2];
([0,1,2],3) -> [0,1,2,3];
([0],3) -> [0,3];
([0,0,3],2) -> [0,0,2,3];
([3],1) -> [1,3];
([1],0) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
40.818055 true true

([2],0) -> [0,2];
([0],1) -> [0,1];
([],3) -> [3];
([2,1],2) -> [2,1];
([1,1],0) -> [0,1,1];
([3,2],1) -> [1,3,2];
([2,0,2],1) -> [1,2,0,2];
([0,0,3],3) -> [0,0,3];
([],0) -> [0];
([2],1) -> [1,2];
([],1) -> [1];
([0,1],1) -> [0,1];
([0,1,0],3) -> [0,1,0,3];
([1,2],3) -> [1,2,3];
([1],3) -> [1,3];
([2,1,3],0) -> [0,2,1,3];
([0,1],3) -> [0,1,3];
([1,1,2],2) -> [1,1,2];

=================================
STACKOVERFLOW

([2,0,2],3) -> [2,0,2,3];
([1,3],3) -> [1,3];
([1,1],1) -> [1,1];
([],1) -> [1];
([],3) -> [3];
([0,0,1],1) -> [0,0,1];
([2],0) -> [0,2];
([3,3,2],1) -> [1,3,3,2];
([2],3) -> [2,3];
([1,0],1) -> [1,0];
([1,2],3) -> [1,2,3];
([0,2,3],3) -> [0,2,3];
([3,1],1) -> [1,3,1];
([2,2,0],0) -> [0,2,2,0];
([3,2],0) -> [0,3,2];
([],0) -> [0];
([0],2) -> [0,2];
([3,1],3) -> [3,1];

=================================
STACKOVERFLOW

([],0) -> [0];
([0,1,3],1) -> [0,1,3];
([1],3) -> [1,3];
([],3) -> [3];
([3,1,1],3) -> [3,1,1];
([0,3,0],1) -> [0,1,3,0];
([2],1) -> [1,2];
([],2) -> [2];
([3,1,3],0) -> [0,3,1,3];
([2,2],3) -> [2,2,3];
([1],1) -> [1];
([1],2) -> [1,2];
([3],2) -> [2,3];
([1,3],3) -> [1,3];
([1,3],2) -> [1,2,3];
([2,1,2],0) -> [0,2,1,2];
([1,2],3) -> [1,2,3];
([3,0],0) -> [0,3,0];

=================================
STACKOVERFLOW

([2],0) -> [0,2];
([1,2,3],3) -> [1,2,3];
([],1) -> [1];
([],0) -> [0];
([3,2],3) -> [3,2];
([3,1,1],1) -> [1,3,1,1];
([3,3],0) -> [0,3,3];
([],2) -> [2];
([2],3) -> [2,3];
([3],3) -> [3];
([],3) -> [3];
([0,2,0],1) -> [0,1,2,0];
([3],2) -> [2,3];
([1,2],2) -> [1,2];
([1,3],3) -> [1,3];
([3,2,3],0) -> [0,3,2,3];
([3],1) -> [1,3];
([1],2) -> [1,2];

=================================
None
([],3) -> [3];
([1,2],1) -> [1,2];
([0,3,1],3) -> [0,3,1];
([2,0],2) -> [2,0];
([2],3) -> [2,3];
([3],1) -> [1,3];
([0,2],0) -> [0,2];
([3,2],3) -> [3,2];
([3,3],2) -> [2,3,3];
([0],2) -> [0,2];
([2,3],2) -> [2,3];
([],2) -> [2];
([1],0) -> [0,1];
([1,1,1],2) -> [1,1,1,2];
([0,0,2],0) -> [0,0,2];
([],1) -> [1];
([1],3) -> [1,3];
([1],2) -> [1,2];

=================================
STACKOVERFLOW

([1],0) -> [0,1];
([2,2,0],1) -> [1,2,2,0];
([1,2,0],1) -> [1,2,0];
([1],1) -> [1];
([2],0) -> [0,2];
([],2) -> [2];
([],1) -> [1];
([2,1,1],1) -> [1,2,1,1];
([1],2) -> [1,2];
([2,3],3) -> [2,3];
([2,1],1) -> [1,2,1];
([],0) -> [0];
([3,1],1) -> [1,3,1];
([],3) -> [3];
([2,1],0) -> [0,2,1];
([3],0) -> [0,3];
([1,3],0) -> [0,1,3];
([0],1) -> [0,1];

=================================
None
([0,1],1) -> [0,1];
([3,0],3) -> [3,0];
([0],2) -> [0,2];
([],3) -> [3];
([1,3],1) -> [1,3];
([2,1],1) -> [1,2,1];
([0,3],1) -> [0,1,3];
([2,1,1],3) -> [2,1,1,3];
([],2) -> [2];
([3],2) -> [2,3];
([3],0) -> [0,3];
([3,0],2) -> [2,3,0];
([0],3) -> [0,3];
([0,0,2],2) -> [0,0,2];
([1],1) -> [1];
([0,2],2) -> [0,2];
([],0) -> [0];
([1,1],2) -> [1,1,2];

=================================
STACKOVERFLOW

([2],2) -> [2];
([0,3],1) -> [0,1,3];
([3,1,0],0) -> [0,3,1,0];
([1],2) -> [1,2];
([3],0) -> [0,3];
([],0) -> [0];
([2,1],2) -> [2,1];
([1],1) -> [1];
([],3) -> [3];
([1],0) -> [0,1];
([2,0,3],2) -> [2,0,3];
([],1) -> [1];
([1,1,2],0) -> [0,1,1,2];
([],2) -> [2];
([0,1,0],2) -> [0,1,0,2];
([1,3],2) -> [1,2,3];
([0,2],3) -> [0,2,3];
([0,2],1) -> [0,1,2];

=================================
None
([3,1,0],3) -> [3,1,0];
([],3) -> [3];
([0],3) -> [0,3];
([0,2],0) -> [0,2];
([2],1) -> [1,2];
([],1) -> [1];
([],2) -> [2];
([0],2) -> [0,2];
([1,1],1) -> [1,1];
([],0) -> [0];
([2,2,0],3) -> [2,2,0,3];
([2,0],1) -> [1,2,0];
([3,1,1],3) -> [3,1,1];
([1,3],1) -> [1,3];
([1],0) -> [0,1];
([0,0],3) -> [0,0,3];
([3],1) -> [1,3];
([1],2) -> [1,2];

=================================
None
([1,2],2) -> [1,2];
([2,2,3],3) -> [2,2,3];
([1,2],1) -> [1,2];
([2],2) -> [2];
([3,3],2) -> [2,3,3];
([2,2],2) -> [2,2];
([],2) -> [2];
([1,1],1) -> [1,1];
([0],0) -> [0];
([2],3) -> [2,3];
([2,0],1) -> [1,2,0];
([2],0) -> [0,2];
([],0) -> [0];
([0],1) -> [0,1];
([3,2],1) -> [1,3,2];
([],1) -> [1];
([3],0) -> [0,3];
([0,0],0) -> [0,0];
([2,1,3],3) -> [2,1,3];

=================================
STACKOVERFLOW

([0,0,2],3) -> [0,0,2,3];
([],1) -> [1];
([1],1) -> [1];
([1],2) -> [1,2];
([2],0) -> [0,2];
([3,3,2],1) -> [1,3,3,2];
([0],0) -> [0];
([0,2,3],1) -> [0,1,2,3];
([0],1) -> [0,1];
([3,1],3) -> [3,1];
([1,0,2],1) -> [1,0,2];
([3,0],1) -> [1,3,0];
([0,0],0) -> [0,0];
([3],0) -> [0,3];
([],2) -> [2];
([3,0,1],3) -> [3,0,1];
([1],0) -> [0,1];
([1,1,0],1) -> [1,1,0];
([1],3) -> [1,3];

=================================
STACKOVERFLOW

([1,0],0) -> [0,1,0];
([1,1,2],1) -> [1,1,2];
([1],1) -> [1];
([],0) -> [0];
([0,1],0) -> [0,1];
([],1) -> [1];
([2,0],2) -> [2,0];
([3,0],3) -> [3,0];
([1,1],1) -> [1,1];
([3,0,3],1) -> [1,3,0,3];
([],3) -> [3];
([2,3,0],0) -> [0,2,3,0];
([1,1],3) -> [1,1,3];
([2],3) -> [2,3];
([3,3],2) -> [2,3,3];
([2,3],3) -> [2,3];
([2],1) -> [1,2];
([1,3],2) -> [1,2,3];
([0,0],0) -> [0,0];

=================================
STACKOVERFLOW

([2,0,2],2) -> [2,0,2];
([3],3) -> [3];
([1],1) -> [1];
([],2) -> [2];
([1],0) -> [0,1];
([3,3],0) -> [0,3,3];
([2,2],1) -> [1,2,2];
([0],2) -> [0,2];
([2],3) -> [2,3];
([],0) -> [0];
([1],3) -> [1,3];
([0,3,0],2) -> [0,2,3,0];
([1,3],0) -> [0,1,3];
([0,2],0) -> [0,2];
([0,3,0],0) -> [0,3,0];
([1,3],2) -> [1,2,3];
([],3) -> [3];
([3],0) -> [0,3];
([1,3,1],1) -> [1,3,1];

=================================
STACKOVERFLOW

([3,0],1) -> [1,3,0];
([0],3) -> [0,3];
([],2) -> [2];
([2],2) -> [2];
([1],2) -> [1,2];
([3],3) -> [3];
([1,2,2],0) -> [0,1,2,2];
([],0) -> [0];
([3,1,0],0) -> [0,3,1,0];
([2,3],1) -> [1,2,3];
([0,1,2],0) -> [0,1,2];
([2,3,2],3) -> [2,3,2];
([1,3,0],2) -> [1,2,3,0];
([1,3],2) -> [1,2,3];
([],1) -> [1];
([2],3) -> [2,3];
([1,1,3],1) -> [1,1,3];
([1,0,3],2) -> [1,0,2,3];
([1,1,2],3) -> [1,1,2,3];

=================================
STACKOVERFLOW

([1,2,1],2) -> [1,2,1];
([],0) -> [0];
([1,1,3],3) -> [1,1,3];
([3],0) -> [0,3];
([1],1) -> [1];
([0,2],0) -> [0,2];
([1,2,2],0) -> [0,1,2,2];
([1],2) -> [1,2];
([2,2],0) -> [0,2,2];
([],3) -> [3];
([0,1,0],0) -> [0,1,0];
([1,3,1],0) -> [0,1,3,1];
([],2) -> [2];
([3,2,2],2) -> [2,3,2,2];
([3],1) -> [1,3];
([3,2,3],0) -> [0,3,2,3];
([2],3) -> [2,3];
([0,1],3) -> [0,1,3];
([1,0],1) -> [1,0];

=================================
STACKOVERFLOW

([1],2) -> [1,2];
([],3) -> [3];
([1,1,0],1) -> [1,1,0];
([1,0,3],2) -> [1,0,2,3];
([],1) -> [1];
([],0) -> [0];
([3,3],2) -> [2,3,3];
([0],2) -> [0,2];
([1,3],0) -> [0,1,3];
([2],2) -> [2];
([2,0,1],1) -> [1,2,0,1];
([],2) -> [2];
([2,1,0],0) -> [0,2,1,0];
([3,3],1) -> [1,3,3];
([1,2,1],3) -> [1,2,1,3];
([3],0) -> [0,3];
([0,0],2) -> [0,0,2];
([2,1],0) -> [0,2,1];
([2,0,2],1) -> [1,2,0,2];

=================================
STACKOVERFLOW

([1],3) -> [1,3];
([3,0],1) -> [1,3,0];
([0],0) -> [0];
([],2) -> [2];
([0,0],2) -> [0,0,2];
([2,2,2],1) -> [1,2,2,2];
([1,3,1],0) -> [0,1,3,1];
([1,3,3],0) -> [0,1,3,3];
([2],2) -> [2];
([3],0) -> [0,3];
([0,0,0],3) -> [0,0,0,3];
([],3) -> [3];
([1,1],3) -> [1,1,3];
([1,1,2],0) -> [0,1,1,2];
([1,0],3) -> [1,0,3];
([3,2,2],1) -> [1,3,2,2];
([0,2,0],1) -> [0,1,2,0];
([],1) -> [1];
([2,3,0],0) -> [0,2,3,0];

=================================
STACKOVERFLOW

([1],1) -> [1];
([1],2) -> [1,2];
([1],0) -> [0,1];
([1,1,1],0) -> [0,1,1,1];
([1,2,3],1) -> [1,2,3];
([2],0) -> [0,2];
([],1) -> [1];
([3,3,2],2) -> [2,3,3,2];
([0,0],0) -> [0,0];
([3,3,3],1) -> [1,3,3,3];
([0,1],3) -> [0,1,3];
([],3) -> [3];
([3,2,1],1) -> [1,3,2,1];
([1,0,3],0) -> [0,1,0,3];
([],0) -> [0];
([1,2,3],3) -> [1,2,3];
([1,1],0) -> [0,1,1];
([3,3],1) -> [1,3,3];
([],2) -> [2];

=================================
STACKOVERFLOW

([0],2) -> [0,2];
([2],1) -> [1,2];
([2],3) -> [2,3];
([3,1,1],3) -> [3,1,1];
([1,0],3) -> [1,0,3];
([],0) -> [0];
([],2) -> [2];
([1],1) -> [1];
([0,1],1) -> [0,1];
([3,1],0) -> [0,3,1];
([0,1],2) -> [0,1,2];
([0],3) -> [0,3];
([1,3],3) -> [1,3];
([0],0) -> [0];
([2],0) -> [0,2];
([2,3,0],1) -> [1,2,3,0];
([],1) -> [1];
([],3) -> [3];
([0],1) -> [0,1];

=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
37.824272 true true

([1,2,2],2) -> [1,2,2];
([],3) -> [3];
([1],2) -> [1,2];
([1],0) -> [0,1];
([2],2) -> [2];
([1,3],2) -> [1,2,3];
([1,1,2],0) -> [0,1,1,2];
([],1) -> [1];
([0,3],1) -> [0,1,3];
([0,0],2) -> [0,0,2];
([0,1],0) -> [0,1];
([3],2) -> [2,3];
([0],0) -> [0];
([3],1) -> [1,3];
([1,2],1) -> [1,2];
([1,1],0) -> [0,1,1];
([3,1,1],2) -> [2,3,1,1];
([2],1) -> [1,2];
([2],0) -> [0,2];
([0],2) -> [0,2];

=================================
STACKOVERFLOW

([2],0) -> [0,2];
([1,2],0) -> [0,1,2];
([],1) -> [1];
([3],0) -> [0,3];
([1],3) -> [1,3];
([],0) -> [0];
([3],3) -> [3];
([0,1],3) -> [0,1,3];
([1,2,0],2) -> [1,2,0];
([3,2],2) -> [2,3,2];
([3,0,1],1) -> [1,3,0,1];
([2,1,2],2) -> [2,1,2];
([],2) -> [2];
([0],2) -> [0,2];
([2,0,2],2) -> [2,0,2];
([3,3],2) -> [2,3,3];
([],3) -> [3];
([1],1) -> [1];
([0,1],1) -> [0,1];
([2,3],3) -> [2,3];

=================================
STACKOVERFLOW

([1,1,2],1) -> [1,1,2];
([3,2],1) -> [1,3,2];
([0],2) -> [0,2];
([1,1],3) -> [1,1,3];
([1],1) -> [1];
([2,1,0],2) -> [2,1,0];
([1,3],1) -> [1,3];
([3,2,0],0) -> [0,3,2,0];
([2,3],0) -> [0,2,3];
([3,2,1],0) -> [0,3,2,1];
([1,0],0) -> [0,1,0];
([2],2) -> [2];
([3],1) -> [1,3];
([0,3],2) -> [0,2,3];
([0,0,2],2) -> [0,0,2];
([0,1],3) -> [0,1,3];
([1,1],0) -> [0,1,1];
([2,1,3],2) -> [2,1,3];
([2],0) -> [0,2];
([0],0) -> [0];

=================================
NOSOL

([1,3],2) -> [1,2,3];
([0,3,0],1) -> [0,1,3,0];
([1,0],1) -> [1,0];
([1,3],1) -> [1,3];
([0,0],2) -> [0,0,2];
([0,3],3) -> [0,3];
([],1) -> [1];
([3,3,3],2) -> [2,3,3,3];
([2,1],3) -> [2,1,3];
([0],3) -> [0,3];
([2],1) -> [1,2];
([2],0) -> [0,2];
([2,2],3) -> [2,2,3];
([0,3,0],2) -> [0,2,3,0];
([1,3],0) -> [0,1,3];
([3,0],1) -> [1,3,0];
([],3) -> [3];
([1,0,1],3) -> [1,0,1,3];
([2,3,1],3) -> [2,3,1];
([],0) -> [0];

=================================
STACKOVERFLOW

([2,1,1],0) -> [0,2,1,1];
([0,2],1) -> [0,1,2];
([],3) -> [3];
([0,0],0) -> [0,0];
([0,1,2],1) -> [0,1,2];
([3],1) -> [1,3];
([3],2) -> [2,3];
([1,1],1) -> [1,1];
([3,2,3],0) -> [0,3,2,3];
([0],1) -> [0,1];
([1],1) -> [1];
([0],0) -> [0];
([],0) -> [0];
([1],0) -> [0,1];
([2,3,3],1) -> [1,2,3,3];
([1,0,2],1) -> [1,0,2];
([0,3,0],2) -> [0,2,3,0];
([3,3],0) -> [0,3,3];
([2],0) -> [0,2];
([],1) -> [1];

=================================
STACKOVERFLOW

([],3) -> [3];
([1,2],0) -> [0,1,2];
([2,3],3) -> [2,3];
([],0) -> [0];
([3,2,0],3) -> [3,2,0];
([0],0) -> [0];
([],1) -> [1];
([3],3) -> [3];
([2,1,1],3) -> [2,1,1,3];
([3],2) -> [2,3];
([2],2) -> [2];
([2,2],2) -> [2,2];
([1,1],3) -> [1,1,3];
([2,0],1) -> [1,2,0];
([3,2,0],0) -> [0,3,2,0];
([3,0],3) -> [3,0];
([1,0,0],2) -> [1,0,0,2];
([3,0],0) -> [0,3,0];
([0],3) -> [0,3];
([3,0,2],3) -> [3,0,2];

=================================
STACKOVERFLOW

([],1) -> [1];
([2],2) -> [2];
([1,1,0],0) -> [0,1,1,0];
([1,2,3],2) -> [1,2,3];
([],2) -> [2];
([],3) -> [3];
([3],2) -> [2,3];
([2],0) -> [0,2];
([3,1],1) -> [1,3,1];
([0,1],0) -> [0,1];
([2],3) -> [2,3];
([3],0) -> [0,3];
([1,0],1) -> [1,0];
([2,1,2],0) -> [0,2,1,2];
([2],1) -> [1,2];
([1,2],1) -> [1,2];
([1,3],3) -> [1,3];
([3,0],1) -> [1,3,0];
([3,2,2],1) -> [1,3,2,2];
([0],2) -> [0,2];

=================================
STACKOVERFLOW

([],3) -> [3];
([0,1,0],3) -> [0,1,0,3];
([3],1) -> [1,3];
([],2) -> [2];
([1,1],3) -> [1,1,3];
([],0) -> [0];
([2,2,3],2) -> [2,2,3];
([2,2],0) -> [0,2,2];
([1,3,0],3) -> [1,3,0];
([3,1],0) -> [0,3,1];
([3],0) -> [0,3];
([2,1,3],3) -> [2,1,3];
([2,3,0],3) -> [2,3,0];
([0],1) -> [0,1];
([2],3) -> [2,3];
([1,2],2) -> [1,2];
([1,1,0],0) -> [0,1,1,0];
([1],0) -> [0,1];
([3,3,0],1) -> [1,3,3,0];
([],1) -> [1];

=================================
STACKOVERFLOW

([1,2],0) -> [0,1,2];
([2],0) -> [0,2];
([3,3,1],2) -> [2,3,3,1];
([3],2) -> [2,3];
([1,1],3) -> [1,1,3];
([],0) -> [0];
([2,2,1],0) -> [0,2,2,1];
([2],2) -> [2];
([1],0) -> [0,1];
([3,2],1) -> [1,3,2];
([1,3],3) -> [1,3];
([2,3],2) -> [2,3];
([3,1],2) -> [2,3,1];
([2],1) -> [1,2];
([0,1,0],3) -> [0,1,0,3];
([2,2,0],2) -> [2,2,0];
([0,2],0) -> [0,2];
([2,1],1) -> [1,2,1];
([3,3,0],2) -> [2,3,3,0];
([],2) -> [2];

=================================
STACKOVERFLOW

([],1) -> [1];
([],3) -> [3];
([3,0],2) -> [2,3,0];
([1,2,0],1) -> [1,2,0];
([2,3],1) -> [1,2,3];
([0,2],0) -> [0,2];
([0,2],2) -> [0,2];
([],0) -> [0];
([1],2) -> [1,2];
([1,0],3) -> [1,0,3];
([2,0],1) -> [1,2,0];
([1],1) -> [1];
([0],0) -> [0];
([],2) -> [2];
([2],3) -> [2,3];
([3,3,0],0) -> [0,3,3,0];
([1,3,2],1) -> [1,3,2];
([1,0,1],1) -> [1,0,1];
([2],0) -> [0,2];
([2,2],0) -> [0,2,2];

=================================
STACKOVERFLOW

