list_rev_append
[2] -> [2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00606599999992 false false

[2] -> [2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00604199999998 false false

[0,0] -> [0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00696199999993 false false

[3,2] -> [2,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> [2, 3] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00731799999994 false false

[3,3] -> [3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00739900000008 false false

[1,1,0] -> [0,1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> [0, 1, 1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00839900000005 false false

[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00603700000011 false false

[3,0,1] -> [1,0,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> [1, 0, 3] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00853400000005 false false

[2] -> [2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.006169 false false

[3,3,3] -> [3,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00895999999989 false false

[2,2,3] -> [3,2,2];
[2,2] -> [2,2];

=================================
NOSOL

[3,1,2] -> [2,1,3];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [2, 1, #2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.042778 false false

[1,2] -> [2,1];
[3] -> [3];

=================================
NOSOL

[] -> [];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00542199999995 false false

[0] -> [0];
[2,1,0] -> [0,1,2];

=================================
NOSOL

[0] -> [0];
[0,2] -> [2,0];

=================================
NOSOL

[2,1,3] -> [3,1,2];
[1,1,1] -> [1,1,1];

=================================
NOSOL

[3,3,2] -> [2,3,3];
[0] -> [0];

=================================
NOSOL

[3] -> [3];
[3,2] -> [2,3];

=================================
NOSOL

[2] -> [2];
[1,2] -> [2,1];

=================================
NOSOL

[0] -> [0];
[3,0,2] -> [2,0,3];
[2,1,0] -> [0,1,2];

=================================
NOSOL

[0] -> [0];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0771339999999 true true

[] -> [];
[2,2] -> [2,2];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00588399999992 false false

[2,3,1] -> [1,3,2];
[3,2] -> [2,3];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
4.994014 true true

[] -> [];
[2] -> [2];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00603099999989 false false

[3] -> [3];
[0,3] -> [3,0];
[1,1] -> [1,1];

=================================
NOSOL

[1,2,1] -> [1,2,1];
[] -> [];
[1,2,2] -> [2,2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
6.551199 true true

[3] -> [3];
[] -> [];
[3,3,1] -> [1,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
3.984229 true true

[] -> [];
[0,1,1] -> [1,1,0];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
3.868406 false false

[3] -> [3];
[1] -> [1];
[0,3,3] -> [3,3,0];

=================================
NOSOL

[] -> [];
[0] -> [0];
[2,1] -> [1,2];
[1,3] -> [3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.080776 false false

[0,1,1] -> [1,1,0];
[] -> [];
[0,0] -> [0,0];
[1,1] -> [1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.101871 false false

[2,3,2] -> [2,3,2];
[0,2,0] -> [0,2,0];
[3,0,1] -> [1,0,3];
[1,3,2] -> [2,3,1];

=================================
NOSOL

[1] -> [1];
[0] -> [0];
[] -> [];
[2,2,0] -> [0,2,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.091465 true true

[0] -> [0];
[] -> [];
[1,2] -> [2,1];
[3,3] -> [3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.0800730000001 false false

[3,2] -> [2,3];
[2] -> [2];
[0,2] -> [2,0];
[1,0,0] -> [0,0,1];

=================================
NOSOL

[0,1] -> [1,0];
[0] -> [0];
[3,3] -> [3,3];
[2] -> [2];

=================================
NOSOL

[2,0,1] -> [1,0,2];
[3] -> [3];
[2,3] -> [3,2];
[0] -> [0];

=================================
NOSOL

[0,2,0] -> [0,2,0];
[3,1] -> [1,3];
[] -> [];
[2,3,1] -> [1,3,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.124048 true true

[3,3,1] -> [1,3,3];
[0] -> [0];
[0,3] -> [3,0];
[1,1] -> [1,1];

=================================
NOSOL

[1] -> [1];
[0,3,1] -> [1,3,0];
[3,0,3] -> [3,0,3];
[] -> [];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.131628 true true

[1,1] -> [1,1];
[] -> [];
[0] -> [0];
[3,1] -> [1,3];
[2,0] -> [0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.10368 false false

[2,3] -> [3,2];
[] -> [];
[3,0] -> [0,3];
[2,0,2] -> [2,0,2];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.122869 true true

[1,2] -> [2,1];
[3] -> [3];
[3,2,2] -> [2,2,3];
[2,1,3] -> [3,1,2];
[3,2] -> [2,3];

=================================
NOSOL

[0] -> [0];
[1,1] -> [1,1];
[3,3] -> [3,3];
[0,0] -> [0,0];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_append = \xs -> xs in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.00739599999997 false false

[] -> [];
[2,1,1] -> [1,1,2];
[1,2] -> [2,1];
[0,0] -> [0,0];
[0,1] -> [1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.125604 false false

[2] -> [2];
[] -> [];
[0,2] -> [2,0];
[0,2,2] -> [2,2,0];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
5.909437 false false

[3] -> [3];
[1] -> [1];
[] -> [];
[1,3,2] -> [2,3,1];
[1,0,1] -> [1,0,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
7.746561 true true

[0,1,1] -> [1,1,0];
[2,3,2] -> [2,3,2];
[0,3] -> [3,0];
[2] -> [2];
[3,3] -> [3,3];

=================================
NOSOL

[3] -> [3];
[1,3,1] -> [1,3,1];
[2,2,1] -> [1,2,2];
[] -> [];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.134019 true true

[2,3] -> [3,2];
[0,2] -> [2,0];
[1,1,1] -> [1,1,1];
[1,0,0] -> [0,0,1];
[1] -> [1];
[1,2,0] -> [0,2,1];

=================================
NOSOL

[2] -> [2];
[] -> [];
[0] -> [0];
[0,2] -> [2,0];
[0,1,2] -> [2,1,0];
[0,1] -> [1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.134427 true true

[2] -> [2];
[] -> [];
[1] -> [1];
[3,0,0] -> [0,0,3];
[3,2,0] -> [0,2,3];
[2,0,3] -> [3,0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.174703 true true

[3,3] -> [3,3];
[] -> [];
[2,2,3] -> [3,2,2];
[2,0,1] -> [1,0,2];
[3,3,0] -> [0,3,3];
[2] -> [2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.180435 true true

[1] -> [1];
[0] -> [0];
[2,0,2] -> [2,0,2];
[3,2,3] -> [3,2,3];
[2,2] -> [2,2];
[2,0,3] -> [3,0,2];

=================================
NOSOL

[2,0,3] -> [3,0,2];
[] -> [];
[0,3] -> [3,0];
[3] -> [3];
[3,0,2] -> [2,0,3];
[3,2] -> [2,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
9.959042 true true

[] -> [];
[3] -> [3];
[3,1,3] -> [3,1,3];
[2,1] -> [1,2];
[3,3,0] -> [0,3,3];
[0,3] -> [3,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.166865 true true

[] -> [];
[2] -> [2];
[3] -> [3];
[0] -> [0];
[1,2,2] -> [2,2,1];
[2,1] -> [1,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.121262 false false

[1] -> [1];
[0,2] -> [2,0];
[2] -> [2];
[3,0] -> [0,3];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.138468 true true

[0] -> [0];
[0,3,2] -> [2,3,0];
[] -> [];
[2,1,3] -> [3,1,2];
[2,0,2] -> [2,0,2];
[1,3,1] -> [1,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.20216 true true

[3] -> [3];
[3,2] -> [2,3];
[2,2,2] -> [2,2,2];
[1,1] -> [1,1];
[1,0] -> [0,1];
[] -> [];
[1,1,3] -> [3,1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.188043 true true

[] -> [];
[0,2] -> [2,0];
[3,0] -> [0,3];
[3] -> [3];
[1,1,1] -> [1,1,1];
[0,0,3] -> [3,0,0];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.175862 true true

[3] -> [3];
[3,0] -> [0,3];
[2,3] -> [3,2];
[] -> [];
[2] -> [2];
[0,1] -> [1,0];
[1,2] -> [2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.134035 false false

[3,1] -> [1,3];
[0,0,3] -> [3,0,0];
[1,0] -> [0,1];
[1] -> [1];
[] -> [];
[1,2,2] -> [2,2,1];
[2,3] -> [3,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.210348 true true

[1] -> [1];
[3] -> [3];
[1,2,2] -> [2,2,1];
[] -> [];
[0,1,1] -> [1,1,0];
[3,2,2] -> [2,2,3];
[3,0] -> [0,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.182086 false false

[0,0,2] -> [2,0,0];
[2,2,2] -> [2,2,2];
[1] -> [1];
[] -> [];
[1,2,2] -> [2,2,1];
[3,0,3] -> [3,0,3];
[2,3,1] -> [1,3,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
16.798264 true true

[3,0] -> [0,3];
[1,1] -> [1,1];
[3,2,1] -> [1,2,3];
[] -> [];
[0,1,0] -> [0,1,0];
[1] -> [1];
[0,1,1] -> [1,1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.201252 true true

[1,2,3] -> [3,2,1];
[] -> [];
[1,0] -> [0,1];
[2] -> [2];
[1,1] -> [1,1];
[1] -> [1];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.148743 true true

[1] -> [1];
[3] -> [3];
[3,0] -> [0,3];
[0,0] -> [0,0];
[] -> [];
[3,2] -> [2,3];
[2,1] -> [1,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.135765 false false

[] -> [];
[0] -> [0];
[2,0] -> [0,2];
[0,0,3] -> [3,0,0];
[1,0] -> [0,1];
[0,1,1] -> [1,1,0];
[2,1] -> [1,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.174189 true true

[] -> [];
[1,1,1] -> [1,1,1];
[0] -> [0];
[1] -> [1];
[0,2,0] -> [0,2,0];
[3,0,2] -> [2,0,3];
[0,2] -> [2,0];
[0,1,0] -> [0,1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.233514 true true

[2,3] -> [3,2];
[3,1,3] -> [3,1,3];
[] -> [];
[3,2] -> [2,3];
[2] -> [2];
[2,0,3] -> [3,0,2];
[0] -> [0];
[3] -> [3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.181677 true true

[3] -> [3];
[] -> [];
[2,1,2] -> [2,1,2];
[2,0] -> [0,2];
[0,2] -> [2,0];
[0,1] -> [1,0];
[2] -> [2];
[3,1] -> [1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.179089 true true

[1,1,2] -> [2,1,1];
[1,1,0] -> [0,1,1];
[0,0,2] -> [2,0,0];
[0] -> [0];
[2] -> [2];
[3,2,2] -> [2,2,3];
[] -> [];
[2,0] -> [0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.233124 true true

[3,3] -> [3,3];
[] -> [];
[0,3,1] -> [1,3,0];
[0,2,3] -> [3,2,0];
[3,1,2] -> [2,1,3];
[0] -> [0];
[2] -> [2];
[3,1,3] -> [3,1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.235689 true true

[1] -> [1];
[3,3] -> [3,3];
[3] -> [3];
[0,0] -> [0,0];
[0,3] -> [3,0];
[] -> [];
[3,3,3] -> [3,3,3];
[1,2] -> [2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      append (#2.2 y1) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.175126 false false

[0] -> [0];
[1,2,1] -> [1,2,1];
[1,3,2] -> [2,3,1];
[1,1] -> [1,1];
[3,3,0] -> [0,3,3];
[3,1,2] -> [2,1,3];
[0,3,1] -> [1,3,0];
[3,3] -> [3,3];

=================================
NOSOL

[] -> [];
[3,0] -> [0,3];
[3,3] -> [3,3];
[1,0,2] -> [2,0,1];
[3,1] -> [1,3];
[3,3,3] -> [3,3,3];
[2] -> [2];
[3,2,2] -> [2,2,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.226911 true true

[] -> [];
[1,1] -> [1,1];
[2,3,1] -> [1,3,2];
[2,3] -> [3,2];
[0,2] -> [2,0];
[0] -> [0];
[3,3,0] -> [0,3,3];
[3] -> [3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.195078 true true

[2] -> [2];
[] -> [];
[2,2,1] -> [1,2,2];
[3,1] -> [1,3];
[0,0] -> [0,0];
[3,3] -> [3,3];
[0] -> [0];
[3,0] -> [0,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.204055 true true

[2] -> [2];
[1] -> [1];
[0] -> [0];
[2,1,0] -> [0,1,2];
[0,0,2] -> [2,0,0];
[0,3] -> [3,0];
[] -> [];
[2,1] -> [1,2];
[3,0,2] -> [2,0,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.228903 true true

[2,0,2] -> [2,0,2];
[1] -> [1];
[2,3,0] -> [0,3,2];
[3,2,1] -> [1,2,3];
[1,0,0] -> [0,0,1];
[0] -> [0];
[3,3,1] -> [1,3,3];
[2,2,1] -> [1,2,2];
[1,0,1] -> [1,0,1];

=================================
NOSOL

[3,2] -> [2,3];
[0,3,0] -> [0,3,0];
[0] -> [0];
[1] -> [1];
[3,3] -> [3,3];
[] -> [];
[1,3,0] -> [0,3,1];
[3] -> [3];
[2,0] -> [0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.212085 true true

[3,1] -> [1,3];
[0] -> [0];
[1,0,1] -> [1,0,1];
[0,0,3] -> [3,0,0];
[2] -> [2];
[1,2,1] -> [1,2,1];
[2,1,2] -> [2,1,2];
[0,0,1] -> [1,0,0];
[] -> [];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.264378 true true

[3,1] -> [1,3];
[0,3,1] -> [1,3,0];
[2] -> [2];
[] -> [];
[0,0,1] -> [1,0,0];
[1,2,3] -> [3,2,1];
[0,3,0] -> [0,3,0];
[3,3,0] -> [0,3,3];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.274725 true true

[3] -> [3];
[1] -> [1];
[1,2,3] -> [3,2,1];
[] -> [];
[2,1,1] -> [1,1,2];
[2] -> [2];
[3,0,1] -> [1,0,3];
[1,0] -> [0,1];
[0,0,1] -> [1,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.243898 true true

[1] -> [1];
[1,2] -> [2,1];
[0,3,1] -> [1,3,0];
[1,2,0] -> [0,2,1];
[] -> [];
[2,3] -> [3,2];
[2] -> [2];
[0,2] -> [2,0];
[2,1] -> [1,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.218849 true true

[0,0] -> [0,0];
[2] -> [2];
[1] -> [1];
[3,2,2] -> [2,2,3];
[3,1] -> [1,3];
[1,2] -> [2,1];
[0,1,0] -> [0,1,0];
[3,2,3] -> [3,2,3];
[3] -> [3];

=================================
NOSOL

[0,0,2] -> [2,0,0];
[2] -> [2];
[1,3,3] -> [3,3,1];
[3,2,3] -> [3,2,3];
[2,2] -> [2,2];
[] -> [];
[0] -> [0];
[3,0,0] -> [0,0,3];
[1,1,1] -> [1,1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.281344 true true

[1] -> [1];
[] -> [];
[1,2,0] -> [0,2,1];
[2,3,3] -> [3,3,2];
[1,1] -> [1,1];
[3] -> [3];
[0,1,0] -> [0,1,0];
[0,1,2] -> [2,1,0];
[3,1,1] -> [1,1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.291094 true true

[1,0,1] -> [1,0,1];
[2,3] -> [3,2];
[3] -> [3];
[] -> [];
[0,2,3] -> [3,2,0];
[0] -> [0];
[0,2] -> [2,0];
[2] -> [2];
[3,3] -> [3,3];
[3,1,0] -> [0,1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.259376 true true

[2] -> [2];
[3,3,0] -> [0,3,3];
[1,1] -> [1,1];
[1,1,3] -> [3,1,1];
[3,2,2] -> [2,2,3];
[3,3] -> [3,3];
[] -> [];
[1,3,2] -> [2,3,1];
[0] -> [0];
[0,1] -> [1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.266073 true true

[2,0] -> [0,2];
[3] -> [3];
[] -> [];
[0,2,1] -> [1,2,0];
[0,1] -> [1,0];
[3,0] -> [0,3];
[0] -> [0];
[1] -> [1];
[3,0,3] -> [3,0,3];
[1,3,3] -> [3,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.253417 true true

[1,0] -> [0,1];
[0] -> [0];
[2,0] -> [0,2];
[2] -> [2];
[1,2,3] -> [3,2,1];
[] -> [];
[1,3,3] -> [3,3,1];
[1,3,2] -> [2,3,1];
[0,0,2] -> [2,0,0];
[0,1,0] -> [0,1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.29479 true true

[3,3] -> [3,3];
[2,3,0] -> [0,3,2];
[0,1,3] -> [3,1,0];
[3] -> [3];
[1,2,0] -> [0,2,1];
[] -> [];
[3,1] -> [1,3];
[3,0] -> [0,3];
[3,2] -> [2,3];
[1,3,2] -> [2,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.286514 true true

[3,1,0] -> [0,1,3];
[2] -> [2];
[3,3,2] -> [2,3,3];
[0] -> [0];
[1,1] -> [1,1];
[] -> [];
[2,0] -> [0,2];
[2,0,3] -> [3,0,2];
[0,3] -> [3,0];
[1,2,2] -> [2,2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.27037 true true

[3] -> [3];
[1,1] -> [1,1];
[1,2] -> [2,1];
[] -> [];
[1,3] -> [3,1];
[1] -> [1];
[0,2] -> [2,0];
[1,3,2] -> [2,3,1];
[1,3,0] -> [0,3,1];
[0,0,1] -> [1,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.261772 true true

[2] -> [2];
[3] -> [3];
[1,0] -> [0,1];
[] -> [];
[1,3,2] -> [2,3,1];
[0,2,2] -> [2,2,0];
[1] -> [1];
[0,3,2] -> [2,3,0];
[1,2] -> [2,1];
[1,2,3] -> [3,2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.287047 true true

[] -> [];
[0,1] -> [1,0];
[3] -> [3];
[1,0,0] -> [0,0,1];
[2,2,0] -> [0,2,2];
[0,2,0] -> [0,2,0];
[2,1,3] -> [3,1,2];
[1,2] -> [2,1];
[3,3,3] -> [3,3,3];
[0,2,2] -> [2,2,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.319013 true true

[2,3,3] -> [3,3,2];
[2,3,2] -> [2,3,2];
[1,2] -> [2,1];
[] -> [];
[0,1] -> [1,0];
[3] -> [3];
[2,1] -> [1,2];
[1,3] -> [3,1];
[2,2] -> [2,2];
[3,3] -> [3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
15.725571 true true

[1,2] -> [2,1];
[] -> [];
[3,0,0] -> [0,0,3];
[1] -> [1];
[2] -> [2];
[1,2,2] -> [2,2,1];
[3,3] -> [3,3];
[1,2,0] -> [0,2,1];
[1,0] -> [0,1];
[2,3,0] -> [0,3,2];
[1,3] -> [3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.285231 true true

[3,2,3] -> [3,2,3];
[1,2,0] -> [0,2,1];
[] -> [];
[0] -> [0];
[2,0,2] -> [2,0,2];
[3,3,2] -> [2,3,3];
[3] -> [3];
[1,0,2] -> [2,0,1];
[2] -> [2];
[2,3,0] -> [0,3,2];
[0,2,3] -> [3,2,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.348425 true true

[1,3] -> [3,1];
[3] -> [3];
[3,0] -> [0,3];
[3,1,2] -> [2,1,3];
[3,3,1] -> [1,3,3];
[1,2] -> [2,1];
[] -> [];
[2,0] -> [0,2];
[2] -> [2];
[1,1] -> [1,1];
[1,3,0] -> [0,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.284486 true true

[0] -> [0];
[] -> [];
[2] -> [2];
[0,0,2] -> [2,0,0];
[2,2,0] -> [0,2,2];
[0,1,0] -> [0,1,0];
[1,0] -> [0,1];
[3] -> [3];
[1,1,2] -> [2,1,1];
[3,3,3] -> [3,3,3];
[2,0,0] -> [0,0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.327991 true true

[] -> [];
[0,0,0] -> [0,0,0];
[0,0] -> [0,0];
[3] -> [3];
[2,0,3] -> [3,0,2];
[3,1] -> [1,3];
[3,3,2] -> [2,3,3];
[2,0,1] -> [1,0,2];
[2,3] -> [3,2];
[2,1] -> [1,2];
[0,3,1] -> [1,3,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.323732 true true

[2,1,3] -> [3,1,2];
[1] -> [1];
[2,3,3] -> [3,3,2];
[0] -> [0];
[] -> [];
[2] -> [2];
[1,2] -> [2,1];
[3] -> [3];
[0,2,3] -> [3,2,0];
[1,3,3] -> [3,3,1];
[0,0,1] -> [1,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.307424 true true

[2,3,2] -> [2,3,2];
[3,2] -> [2,3];
[3,1,1] -> [1,1,3];
[] -> [];
[1,0] -> [0,1];
[1,2] -> [2,1];
[0] -> [0];
[2] -> [2];
[2,2] -> [2,2];
[1] -> [1];
[0,0] -> [0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.269632 true true

[2,0] -> [0,2];
[3,1,1] -> [1,1,3];
[3,3,3] -> [3,3,3];
[2,0,0] -> [0,0,2];
[] -> [];
[0] -> [0];
[0,3,2] -> [2,3,0];
[3,0] -> [0,3];
[1,3,2] -> [2,3,1];
[3] -> [3];
[0,0,2] -> [2,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.384319 true true

[1,3,0] -> [0,3,1];
[3,3,1] -> [1,3,3];
[] -> [];
[3,2] -> [2,3];
[1,1] -> [1,1];
[3,1] -> [1,3];
[0,1,1] -> [1,1,0];
[1] -> [1];
[0,3,2] -> [2,3,0];
[0] -> [0];
[1,0,1] -> [1,0,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.350307 true true

[] -> [];
[1] -> [1];
[1,1] -> [1,1];
[1,0,2] -> [2,0,1];
[0,2] -> [2,0];
[1,3] -> [3,1];
[2,0,3] -> [3,0,2];
[2] -> [2];
[0,3,0] -> [0,3,0];
[2,2,0] -> [0,2,2];
[3,0] -> [0,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.317661 true true

[1,1] -> [1,1];
[2] -> [2];
[2,2,0] -> [0,2,2];
[3,1,3] -> [3,1,3];
[2,3,1] -> [1,3,2];
[1,3] -> [3,1];
[] -> [];
[3] -> [3];
[2,0,0] -> [0,0,2];
[0,2,3] -> [3,2,0];
[0,1] -> [1,0];
[3,2] -> [2,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.342207 true true

[2] -> [2];
[1,2] -> [2,1];
[] -> [];
[1,0] -> [0,1];
[0,1,0] -> [0,1,0];
[1,2,3] -> [3,2,1];
[2,3] -> [3,2];
[2,1,2] -> [2,1,2];
[3] -> [3];
[1,1] -> [1,1];
[3,1,2] -> [2,1,3];
[1,1,0] -> [0,1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.342873 true true

[] -> [];
[1,1] -> [1,1];
[0] -> [0];
[2,1,0] -> [0,1,2];
[3] -> [3];
[1] -> [1];
[2,3] -> [3,2];
[2,1] -> [1,2];
[1,3,0] -> [0,3,1];
[2] -> [2];
[2,3,2] -> [2,3,2];
[1,0,0] -> [0,0,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.310356 true true

[1,2,2] -> [2,2,1];
[] -> [];
[2,1,1] -> [1,1,2];
[3] -> [3];
[1,3] -> [3,1];
[0] -> [0];
[2] -> [2];
[2,3] -> [3,2];
[2,0] -> [0,2];
[1,1] -> [1,1];
[2,3,0] -> [0,3,2];
[1,3,3] -> [3,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.311782 true true

[] -> [];
[2,3,1] -> [1,3,2];
[2] -> [2];
[0,1,1] -> [1,1,0];
[3] -> [3];
[1,0,0] -> [0,0,1];
[2,1,1] -> [1,1,2];
[1,3,1] -> [1,3,1];
[2,3] -> [3,2];
[1,0] -> [0,1];
[3,2,2] -> [2,2,3];
[0,2] -> [2,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.365748 true true

[] -> [];
[3,2,1] -> [1,2,3];
[3] -> [3];
[0,3] -> [3,0];
[1,0] -> [0,1];
[2,1] -> [1,2];
[0,3,0] -> [0,3,0];
[2,0] -> [0,2];
[0,1,2] -> [2,1,0];
[3,3] -> [3,3];
[0,2] -> [2,0];
[1,3] -> [3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.31431 true true

[2,3,2] -> [2,3,2];
[0] -> [0];
[2,3] -> [3,2];
[3] -> [3];
[0,0,0] -> [0,0,0];
[1,2,0] -> [0,2,1];
[3,3,2] -> [2,3,3];
[2] -> [2];
[1] -> [1];
[3,3,0] -> [0,3,3];
[0,3] -> [3,0];
[2,0] -> [0,2];

=================================
NOSOL

[0,2,2] -> [2,2,0];
[0] -> [0];
[] -> [];
[2,1] -> [1,2];
[2,1,2] -> [2,1,2];
[3,0] -> [0,3];
[0,2] -> [2,0];
[0,1,3] -> [3,1,0];
[0,1] -> [1,0];
[3,2,1] -> [1,2,3];
[1] -> [1];
[2] -> [2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.311337 true true

[] -> [];
[1] -> [1];
[1,3] -> [3,1];
[1,1] -> [1,1];
[2] -> [2];
[3] -> [3];
[0,2] -> [2,0];
[1,1,3] -> [3,1,1];
[3,3,1] -> [1,3,3];
[2,2] -> [2,2];
[0] -> [0];
[3,2] -> [2,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.271996 true true

[1] -> [1];
[1,0] -> [0,1];
[0,0,3] -> [3,0,0];
[0] -> [0];
[] -> [];
[2,1] -> [1,2];
[0,2,1] -> [1,2,0];
[0,0] -> [0,0];
[3,0] -> [0,3];
[1,3,1] -> [1,3,1];
[0,2] -> [2,0];
[2,2] -> [2,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.287931 true true

[2,2,3] -> [3,2,2];
[0,1] -> [1,0];
[3,0,1] -> [1,0,3];
[0,2,0] -> [0,2,0];
[] -> [];
[2] -> [2];
[2,1] -> [1,2];
[3,3] -> [3,3];
[3] -> [3];
[1,2,3] -> [3,2,1];
[1,1,3] -> [3,1,1];
[1] -> [1];
[3,3,1] -> [1,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.37386 true true

[0] -> [0];
[2,0,3] -> [3,0,2];
[2] -> [2];
[2,1,1] -> [1,1,2];
[3,3] -> [3,3];
[] -> [];
[1,2] -> [2,1];
[1,3] -> [3,1];
[0,0] -> [0,0];
[0,3,3] -> [3,3,0];
[1,3,0] -> [0,3,1];
[2,2] -> [2,2];
[0,2,3] -> [3,2,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.359995 true true

[0,3,3] -> [3,3,0];
[] -> [];
[0,1] -> [1,0];
[3] -> [3];
[1,2,1] -> [1,2,1];
[0,3,2] -> [2,3,0];
[1,2] -> [2,1];
[3,1,2] -> [2,1,3];
[0,1,3] -> [3,1,0];
[0,3] -> [3,0];
[1] -> [1];
[2,3] -> [3,2];
[2,1] -> [1,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
24.226128 true true

[0,1] -> [1,0];
[] -> [];
[3,2] -> [2,3];
[3] -> [3];
[0,0,0] -> [0,0,0];
[1,2,3] -> [3,2,1];
[2,3,1] -> [1,3,2];
[0] -> [0];
[2,3,3] -> [3,3,2];
[0,3,1] -> [1,3,0];
[1] -> [1];
[3,3] -> [3,3];
[3,1] -> [1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.33961 true true

[0,1,1] -> [1,1,0];
[3] -> [3];
[0,3,2] -> [2,3,0];
[2] -> [2];
[3,2] -> [2,3];
[0,3,0] -> [0,3,0];
[1,1,1] -> [1,1,1];
[3,0,3] -> [3,0,3];
[3,3] -> [3,3];
[1] -> [1];
[1,1] -> [1,1];
[] -> [];
[1,2] -> [2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.350877 true true

[] -> [];
[1,2] -> [2,1];
[0] -> [0];
[1] -> [1];
[0,2,3] -> [3,2,0];
[0,3] -> [3,0];
[0,1,0] -> [0,1,0];
[2] -> [2];
[1,1,1] -> [1,1,1];
[3] -> [3];
[2,0,3] -> [3,0,2];
[2,1] -> [1,2];
[2,2] -> [2,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.325926 true true

[3,2] -> [2,3];
[2,2] -> [2,2];
[3,1,3] -> [3,1,3];
[2,3,1] -> [1,3,2];
[] -> [];
[0,2,0] -> [0,2,0];
[3,3,2] -> [2,3,3];
[0] -> [0];
[0,0] -> [0,0];
[3,3,0] -> [0,3,3];
[3] -> [3];
[3,3] -> [3,3];
[1] -> [1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.339957 true true

[0] -> [0];
[] -> [];
[1] -> [1];
[1,1] -> [1,1];
[1,1,3] -> [3,1,1];
[1,2,3] -> [3,2,1];
[3,2] -> [2,3];
[2,2,0] -> [0,2,2];
[2,2,1] -> [1,2,2];
[3,1] -> [1,3];
[2,0] -> [0,2];
[3,0,2] -> [2,0,3];
[1,2,1] -> [1,2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.368166 true true

[1,0,2] -> [2,0,1];
[0,1] -> [1,0];
[] -> [];
[2,0] -> [0,2];
[2,0,0] -> [0,0,2];
[0,0] -> [0,0];
[0,3] -> [3,0];
[0] -> [0];
[3,2,3] -> [3,2,3];
[2,1] -> [1,2];
[1,1,2] -> [2,1,1];
[3,3,3] -> [3,3,3];
[2,0,3] -> [3,0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.393562 true true

[2] -> [2];
[1] -> [1];
[2,0,0] -> [0,0,2];
[] -> [];
[1,2,2] -> [2,2,1];
[0,1,0] -> [0,1,0];
[2,1] -> [1,2];
[0,1,2] -> [2,1,0];
[1,3,3] -> [3,3,1];
[2,1,1] -> [1,1,2];
[3,2,0] -> [0,2,3];
[3,3,0] -> [0,3,3];
[2,0] -> [0,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.418984 true true

[2] -> [2];
[3,0,3] -> [3,0,3];
[1] -> [1];
[3] -> [3];
[3,3,0] -> [0,3,3];
[] -> [];
[0,0,0] -> [0,0,0];
[3,1,3] -> [3,1,3];
[1,2,3] -> [3,2,1];
[2,3,2] -> [2,3,2];
[3,1] -> [1,3];
[1,0,2] -> [2,0,1];
[2,2] -> [2,2];
[1,0] -> [0,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.410243 true true

[3,0,2] -> [2,0,3];
[3,3,0] -> [0,3,3];
[0,0,1] -> [1,0,0];
[0] -> [0];
[2] -> [2];
[] -> [];
[3] -> [3];
[3,2] -> [2,3];
[1] -> [1];
[0,1] -> [1,0];
[2,0] -> [0,2];
[3,3] -> [3,3];
[0,2,0] -> [0,2,0];
[3,1] -> [1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.357727 true true

[] -> [];
[1,1,2] -> [2,1,1];
[3] -> [3];
[0,2,0] -> [0,2,0];
[1,3,3] -> [3,3,1];
[1] -> [1];
[3,3,0] -> [0,3,3];
[0,2] -> [2,0];
[1,1,1] -> [1,1,1];
[1,3,1] -> [1,3,1];
[0] -> [0];
[2] -> [2];
[0,0] -> [0,0];
[3,1,0] -> [0,1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.381145 true true

[2,2,1] -> [1,2,2];
[1,3] -> [3,1];
[] -> [];
[1,1,3] -> [3,1,1];
[2] -> [2];
[1] -> [1];
[1,2,2] -> [2,2,1];
[3,1] -> [1,3];
[1,0] -> [0,1];
[2,0] -> [0,2];
[2,3,3] -> [3,3,2];
[2,1,3] -> [3,1,2];
[0,2] -> [2,0];
[0,3,1] -> [1,3,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.402212 true true

[2,0,1] -> [1,0,2];
[1,1,0] -> [0,1,1];
[0,1,1] -> [1,1,0];
[] -> [];
[0,2,1] -> [1,2,0];
[3,1] -> [1,3];
[0,0,0] -> [0,0,0];
[0] -> [0];
[3,1,1] -> [1,1,3];
[1] -> [1];
[2] -> [2];
[3,2,2] -> [2,2,3];
[0,2] -> [2,0];
[1,2,2] -> [2,2,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.411961 true true

[1,0,3] -> [3,0,1];
[] -> [];
[0] -> [0];
[2,0,1] -> [1,0,2];
[1] -> [1];
[3,1,0] -> [0,1,3];
[2,2,0] -> [0,2,2];
[0,2,0] -> [0,2,0];
[3] -> [3];
[2] -> [2];
[3,1] -> [1,3];
[1,3,2] -> [2,3,1];
[3,1,3] -> [3,1,3];
[1,0] -> [0,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.409077 true true

[3,1] -> [1,3];
[] -> [];
[1,2] -> [2,1];
[3] -> [3];
[2] -> [2];
[0,0,0] -> [0,0,0];
[0,1] -> [1,0];
[0,2,0] -> [0,2,0];
[1,0] -> [0,1];
[1,3,2] -> [2,3,1];
[1,1] -> [1,1];
[1,2,1] -> [1,2,1];
[2,2,3] -> [3,2,2];
[2,2] -> [2,2];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.381889 true true

[3,2] -> [2,3];
[2,3] -> [3,2];
[3,2,1] -> [1,2,3];
[0,3] -> [3,0];
[2] -> [2];
[1] -> [1];
[1,3] -> [3,1];
[1,2,0] -> [0,2,1];
[0,1] -> [1,0];
[0,1,3] -> [3,1,0];
[] -> [];
[0] -> [0];
[2,0,2] -> [2,0,2];
[3] -> [3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.345635 true true

[] -> [];
[1,3] -> [3,1];
[1,2] -> [2,1];
[0,3,0] -> [0,3,0];
[2] -> [2];
[2,3] -> [3,2];
[1,3,0] -> [0,3,1];
[0,2,3] -> [3,2,0];
[0] -> [0];
[3] -> [3];
[3,0] -> [0,3];
[1,2,2] -> [2,2,1];
[1,1,3] -> [3,1,1];
[3,1] -> [1,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.373166 true true

[] -> [];
[3,0] -> [0,3];
[3,3,0] -> [0,3,3];
[3,0,2] -> [2,0,3];
[2,2] -> [2,2];
[3] -> [3];
[1,3] -> [3,1];
[2] -> [2];
[0,0,2] -> [2,0,0];
[3,0,1] -> [1,0,3];
[1] -> [1];
[3,0,0] -> [0,0,3];
[1,3,0] -> [0,3,1];
[0] -> [0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.364845 true true

[3] -> [3];
[2,3,1] -> [1,3,2];
[0,2] -> [2,0];
[2] -> [2];
[2,1,3] -> [3,1,2];
[1] -> [1];
[3,1] -> [1,3];
[1,3] -> [3,1];
[0,0] -> [0,0];
[3,1,1] -> [1,1,3];
[] -> [];
[2,0] -> [0,2];
[1,0,1] -> [1,0,1];
[3,0] -> [0,3];
[1,3,1] -> [1,3,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.397869 true true

[2] -> [2];
[2,0] -> [0,2];
[0] -> [0];
[1,1] -> [1,1];
[] -> [];
[3] -> [3];
[3,2] -> [2,3];
[3,3] -> [3,3];
[3,2,1] -> [1,2,3];
[1] -> [1];
[3,0,3] -> [3,0,3];
[0,2,2] -> [2,2,0];
[0,3,3] -> [3,3,0];
[1,2] -> [2,1];
[0,1,3] -> [3,1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.37252 true true

[1] -> [1];
[2,2,2] -> [2,2,2];
[0,1] -> [1,0];
[3,2,0] -> [0,2,3];
[3] -> [3];
[0] -> [0];
[2] -> [2];
[3,0,2] -> [2,0,3];
[2,0] -> [0,2];
[2,2] -> [2,2];
[0,2] -> [2,0];
[3,3] -> [3,3];
[] -> [];
[2,0,3] -> [3,0,2];
[0,1,3] -> [3,1,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.387844 true true

[2] -> [2];
[2,0] -> [0,2];
[1,0] -> [0,1];
[1,1] -> [1,1];
[2,2] -> [2,2];
[] -> [];
[3,1,1] -> [1,1,3];
[3,0] -> [0,3];
[0,2] -> [2,0];
[2,1] -> [1,2];
[2,3] -> [3,2];
[3,2,3] -> [3,2,3];
[1,3,1] -> [1,3,1];
[3,1] -> [1,3];
[0,0,3] -> [3,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.384456 true true

[0,3] -> [3,0];
[0] -> [0];
[3,3,1] -> [1,3,3];
[0,1,1] -> [1,1,0];
[2] -> [2];
[1] -> [1];
[2,2] -> [2,2];
[2,3,1] -> [1,3,2];
[2,1,1] -> [1,1,2];
[] -> [];
[1,0,1] -> [1,0,1];
[2,2,1] -> [1,2,2];
[0,2,2] -> [2,2,0];
[1,3,0] -> [0,3,1];
[0,0] -> [0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.441449 true true

[2,3,2] -> [2,3,2];
[0] -> [0];
[] -> [];
[2,0] -> [0,2];
[1,0,0] -> [0,0,1];
[3,1] -> [1,3];
[0,0,1] -> [1,0,0];
[1,1] -> [1,1];
[0,3,2] -> [2,3,0];
[1,2,0] -> [0,2,1];
[1,3,3] -> [3,3,1];
[0,2] -> [2,0];
[3,1,2] -> [2,1,3];
[2,1] -> [1,2];
[3,3,2] -> [2,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.505327 true true

[1,0] -> [0,1];
[2,1,2] -> [2,1,2];
[] -> [];
[0] -> [0];
[1,3,3] -> [3,3,1];
[3,2] -> [2,3];
[1] -> [1];
[3,2,1] -> [1,2,3];
[3,2,0] -> [0,2,3];
[2,0] -> [0,2];
[2] -> [2];
[3] -> [3];
[0,3,1] -> [1,3,0];
[1,1,2] -> [2,1,1];
[3,3,0] -> [0,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.42231 true true

[2,2] -> [2,2];
[3,0,2] -> [2,0,3];
[] -> [];
[1,3] -> [3,1];
[2,2,2] -> [2,2,2];
[3,1,2] -> [2,1,3];
[3,3] -> [3,3];
[3,1] -> [1,3];
[3,1,3] -> [3,1,3];
[2] -> [2];
[0,3,3] -> [3,3,0];
[0,0,0] -> [0,0,0];
[2,1,0] -> [0,1,2];
[0,2] -> [2,0];
[1,1,3] -> [3,1,1];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.46854 true true

[] -> [];
[2] -> [2];
[0,2] -> [2,0];
[3,0,0] -> [0,0,3];
[3,0,3] -> [3,0,3];
[0,0,1] -> [1,0,0];
[0] -> [0];
[3] -> [3];
[3,2,2] -> [2,2,3];
[0,3] -> [3,0];
[2,2] -> [2,2];
[1,0] -> [0,1];
[3,2,1] -> [1,2,3];
[2,1,3] -> [3,1,2];
[0,0,3] -> [3,0,0];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.430454 true true

[1,3] -> [3,1];
[0,0,3] -> [3,0,0];
[2,1] -> [1,2];
[0,3] -> [3,0];
[0,2,2] -> [2,2,0];
[2] -> [2];
[] -> [];
[2,3,1] -> [1,3,2];
[1,1] -> [1,1];
[3,0] -> [0,3];
[1,2] -> [2,1];
[3,0,0] -> [0,0,3];
[0,3,2] -> [2,3,0];
[3,1,0] -> [0,1,3];
[3,3,2] -> [2,3,3];

=================================
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
(\append -> (\list_rev_append -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_append = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      append (list_rev_append (#2.2 y1)) [#2.1 y1] in list_rev_append) : NatList -> NatList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : NatList -> NatList -> NatList)
0.430407 true true

