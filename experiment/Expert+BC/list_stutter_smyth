list_stutter
[0] -> [0, 0];
[] -> [];
=================================
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons (0, xs) in list_stutter) : NatList -> NatList)
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( 0
        , Cons (0, list_stutter (#2.2 y1))
        ) in list_stutter) : NatList -> NatList)
0.00335999999993 false false

[1, 0] -> [1, 1, 0, 0];
[] -> [];
=================================
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (#2.1 y1, list_stutter (#2.2 y1))
        ) in list_stutter) : NatList -> NatList)
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (#2.1 y1, list_stutter (#2.2 y1))
        ) in list_stutter) : NatList -> NatList)
0.00470300000006 true true

[0] -> [0, 0];
[1, 0] -> [1, 1, 0, 0];
[] -> [];
=================================
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (#2.1 y1, list_stutter (#2.2 y1))
        ) in list_stutter) : NatList -> NatList)
(\list_stutter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_stutter = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , Cons (#2.1 y1, list_stutter (#2.2 y1))
        ) in list_stutter) : NatList -> NatList)
0.0029219999999 true true

