list_pairwise_swap
[0] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.00178899999992 false false

[1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.0016619999999 false false

[0, 1] -> [1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [1, 0] in list_pairwise_swap) : NatList -> NatList)
0.00320499999998 false false

[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [0, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
0.00300500000003 false false

[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.00168699999995 false false

[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [1, 0, 1, 0] in list_pairwise_swap) : NatList -> NatList)
0.00646499999993 false false

[0] -> [];
[1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.00167499999998 false false

[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [1, 0, 1, 0]

        S y2 -> 
          [0, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
0.011248 false false

[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [1, 0, 1, 0]

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 1
            , Cons
                ( 0
                , Cons
                    ( 1
                    , Cons (0, list_pairwise_swap (#2.2 y1))
                    )
                )
            )

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
0.0083810000001 false false

[0] -> [];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.00166100000001 false false

[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [1, 0]

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 1
            , Cons (0, list_pairwise_swap (#2.2 y1))
            )

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
0.00658300000009 false false

[1] -> [];
[0, 1] -> [1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y2, 0] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons (0, list_pairwise_swap (#2.2 y1))
            ) in list_pairwise_swap) : NatList -> NatList)
0.0071640000001 false false

[1] -> [];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [0, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( 0
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y1)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00730900000008 false false

[1] -> [];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.0017600000001 false false

[1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons (0, list_pairwise_swap (#2.2 y2))
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons (0, list_pairwise_swap (#2.2 y2))
            ) in list_pairwise_swap) : NatList -> NatList)
0.011242 false false

[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons (1, list_pairwise_swap (#2.2 y1))

        S y2 -> 
          Cons (0, list_pairwise_swap (#2.2 y1)) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons (1, list_pairwise_swap (#2.2 y1))

        S y2 -> 
          Cons (0, list_pairwise_swap (#2.2 y1)) in list_pairwise_swap) : NatList -> NatList)
0.0105599999999 false false

[1] -> [];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [1, 0, 1, 0]

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 1
            , Cons
                ( 0
                , Cons
                    ( 1
                    , Cons (0, list_pairwise_swap (#2.2 y1))
                    )
                )
            )

        S y2 -> 
          [] in list_pairwise_swap) : NatList -> NatList)
0.00938799999994 false false

[0] -> [];
[1] -> [];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [0, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( 0
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y1)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00744299999997 false false

[0] -> [];
[1] -> [];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_pairwise_swap = \xs -> [] in list_pairwise_swap) : NatList -> NatList)
0.00167299999998 false false

[0] -> [];
[1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons (0, list_pairwise_swap (#2.2 y2))
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons (0, list_pairwise_swap (#2.2 y2))
            ) in list_pairwise_swap) : NatList -> NatList)
0.0113670000001 false false

[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y2, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y1)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.008601 false false

[0] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              [#2.1 y2, 0]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y1))
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.017983 false false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y2, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y1)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.0084240000001 false false

[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( 1
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, 1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( 1
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, 1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.0193340000001 false false

[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( case #2.1 y1 of
            Z y2 -> 
              1

            S y2 -> 
              0
        , list_pairwise_swap (#2.2 y1)
        ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      Cons
        ( case #2.1 y1 of
            Z y2 -> 
              1

            S y2 -> 
              0
        , list_pairwise_swap (#2.2 y1)
        ) in list_pairwise_swap) : NatList -> NatList)
0.0306639999999 false false

[1] -> [];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00840500000004 false false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y2, #2.1 y1] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y1)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00829300000009 false false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              [#2.1 y2, 0]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y1))
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.0364010000001 false false

[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( #2.1 y3
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( #2.1 y3
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.02422 false false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00911199999996 false false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              [#2.1 y2, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y1)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.0208319999999 false false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.034267 false false

[1] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.338846 true true

[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00951499999996 false false

[0] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.042596 false false

[0] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( 1
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, 1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( 1
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, 1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.057849 false false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              [#2.1 y2, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.2 y2 of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y1)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.023817 false false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , Cons
                ( #2.1 y1
                , list_pairwise_swap (#2.2 y2)
                )
            ) in list_pairwise_swap) : NatList -> NatList)
0.00863600000002 false false

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              []

            S y3 -> 
              []

        Cons y2 -> 
          case #2.1 y1 of
            Z y3 -> 
              Cons
                ( #2.1 y2
                , Cons (0, list_pairwise_swap (#2.2 y2))
                )

            S y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.042463 false false

[0] -> [];
[1] -> [];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.356458 true true

[0] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( #2.1 y3
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              []

            Cons y3 -> 
              Cons
                ( #2.1 y3
                , Cons (0, list_pairwise_swap (#2.2 y3))
                )

        S y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              [0, #2.1 y1]

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.0561270000001 false false

[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.590394 true true

[0] -> [];
[1] -> [];
[0, 1] -> [1, 0];
[1, 0] -> [0, 1];
[1, 0, 1] -> [];
[0, 1, 0, 1] -> [1, 0, 1, 0];
[] -> [];
=================================
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
(\list_pairwise_swap -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_pairwise_swap = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          case list_pairwise_swap (#2.2 y1) of
            Nil y3 -> 
              Cons
                ( #2.1 y2
                , Cons
                    ( #2.1 y1
                    , list_pairwise_swap (#2.2 y2)
                    )
                )

            Cons y3 -> 
              [] in list_pairwise_swap) : NatList -> NatList)
0.586203 true true

