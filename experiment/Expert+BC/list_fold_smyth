list_fold
(add, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.179317 false false

(add, 0, [2, 1]) -> 3;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.182587 false false

(add, 0, [3, 2, 1]) -> 6;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        6 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S (countOdd acc (fixListFold (#2.2 y1)))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.204038 false false

(add, 1, []) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> acc in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.171566 false false

(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold) ((let fixListFold = \xs -> 0 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.165025 false false

(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.179615 false false

(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.183445 false false

(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.196888 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.37619 false false

(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (countOdd acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.23871 false false

(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.207096 false false

(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (fixListFold (#2.2 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.202333 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (S (S (#2.1 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.334128 false false

(add, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.215353 false false

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        6 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (S (S (S (S (S (countOdd acc (fixListFold (#2.2 y1)))))))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.233047 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.773632 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.291863 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        3 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.212357 false false

(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.49612 false false

(add, 0, [1]) -> 1;
(add, 1, []) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.244361 false false

(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        2 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (countOdd acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.25045 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.416009 false false

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.423729 true true

(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.314922 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.267282 false false

(add, 0, [2, 1]) -> 3;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (f acc (S (S acc))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.305569 false false

(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (f acc (S (#2.1 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (S (f acc (fixListFold (#2.2 y1)))) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.295456 false false

(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        S (countOdd acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.268014 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.533962 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.473112 false false

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.450905 true true

(add, 0, [1]) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        0

      Cons y1 -> 
        1 in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.285241 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.579242 true true

(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.508493 true true

(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.669883 true true

(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        S (f acc (#2.1 y1)) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.425806 false false

(add, 0, [1]) -> 1;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.473895 false false

(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.470917 false false

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.578975 false false

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.560752 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.704108 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.623008 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        add (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.581877 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.576118 true true

(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        countOdd (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.569845 false false

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.684438 true true

(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.606716 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.726911 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.777301 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.632263 true true

(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.694717 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.636567 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.571998 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.633314 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.694393 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.651603 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.702824 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.7936 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.689721 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.722742 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.7503 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.768349 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.847936 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.692411 true true

(add, 0, [1]) -> 1;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.713888 true true

(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.741865 true true

(add, 0, [1]) -> 1;
(add, 0, [2, 1]) -> 3;
(add, 0, [3, 2, 1]) -> 6;
(add, 1, []) -> 1;
(countOdd, 0, []) -> 0;
(countOdd, 0, [1]) -> 1;
(countOdd, 0, [2, 1]) -> 1;
(countOdd, 0, [3, 2, 1]) -> 2;
(add, 0, []) -> 0;
=================================
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
(\add -> (\isOdd -> (\countOdd -> (\list_fold -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_fold = \f -> \acc -> (\fixListFold -> fixListFold)
    ((let fixListFold = \xs -> case xs of
      Nil y1 -> 
        acc

      Cons y1 -> 
        f (fixListFold (#2.2 y1)) (#2.1 y1) in fixListFold) : NatList -> Nat) in list_fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat))
  ((let countOdd = \n1 -> \n2 -> case isOdd n2 of
    T _ -> 
      S n1

    F _ -> 
      n1 in countOdd) : Nat -> Nat -> Nat))
  ((let isOdd = \n -> case n of
    Z _ -> 
      F

    S m1 -> 
      case m1 of
        Z _ -> 
          T

        S m2 -> 
          isOdd m2 in isOdd) : Nat -> Boolean))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat)
0.807497 true true

