list_map
(inc, [0]) -> [1];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039765 false false

(inc, [0, 0]) -> [1, 1];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1, 1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042565 false false

(inc, [1]) -> [2];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040679 false false

(inc, [1, 1]) -> [2, 2];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0456079999999 false false

(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> [] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0312530000001 false false

(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.031921 false false

(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0314330000001 false false

(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0314049999999 false false

(inc, [1]) -> [2];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040244 false true

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044609 false false

(inc, [0]) -> [1];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039792 false false

(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.031015 false false

(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0460439999999 true true

(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2, 2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044842 false false

(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.066973 false false

(inc, [1]) -> [2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0405020000001 false false

(inc, [0, 0]) -> [1, 1];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0431149999999 true true

(inc, [1]) -> [2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0423579999999 false true

(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0428429999999 true true

(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0464750000001 true true

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (2, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (2, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0424559999999 false false

(inc, [1]) -> [2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0437260000001 false true

(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0662090000001 false false

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [S (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0485590000001 false false

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041283 false true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041649 false true

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0425110000001 true true

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043066 true true

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0430650000001 true true

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0455300000001 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0434319999999 true true

(inc, [0]) -> [1];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041295 false true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04269 true true

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0420280000001 true true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (f (#2.1 y1), #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0425459999999 false true

(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0442599999999 true true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(zero, []) -> [];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [f (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0414229999999 false true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0486410000001 false false

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044887 true true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0636119999999 true true

(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0459510000001 true true

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0430449999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0442969999999 true true

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04278 true true

(inc, [0]) -> [1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043261 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0446790000001 true true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0433579999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0444259999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0444849999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0460370000001 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044609 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044721 true true

(inc, [0]) -> [1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0464910000001 true true

(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0441129999999 true true

(inc, [0]) -> [1];
(inc, [0, 0]) -> [1, 1];
(inc, [1]) -> [2];
(inc, [1, 1]) -> [2, 2];
(zero, []) -> [];
(zero, [0]) -> [0];
(zero, [0, 0]) -> [0, 0];
(inc, []) -> [];
=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04557 true true

