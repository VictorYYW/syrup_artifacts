list_sorted_insert
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      [0, 1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0159160000001 false false

([], 2) -> [2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00559100000009 false false

([0], 0) -> [0];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.005717 false false

([0], 1) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      [0, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 0
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0106310000001 false false

([1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00570300000004 false false

([1], 1) -> [1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00565299999994 false false

([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      [#2.1 y1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( 1
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0112810000001 false false

([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00573899999995 false false

([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00570300000004 false false

([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0113719999999 false false

([], 2) -> [2];
([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      [#2.1 y1, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0143410000001 false false

([], 1) -> [1];
([0], 0) -> [0];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00578799999994 false false

([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (0, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00588999999991 false false

([0], 0) -> [0];
([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case n of
      Z y1 -> 
        (0, [])

      S y1 -> 
        (y1, [n])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016521 false false

([], 2) -> [2];
([1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00587300000007 false false

([1], 1) -> [1];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015533 false false

([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (0, [])

      Cons y1 -> 
        (#2.1 y1, [n])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      Cons
        ( #2.1 y1
        , list_sorted_insert (#2.2 y1) n
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015678 false false

([0], 0) -> [0];
([1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          [0, #2.1 y1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0287980000001 false false

([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case n of
      Z y1 -> 
        (0, xs)

      S y1 -> 
        (y1, [n])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019652 false false

([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (0, [])

      Cons y1 -> 
        (1, [2])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        ( 1
        , list_sorted_insert (#2.2 y1) 2
        )) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.021371 false false

([], 2) -> [2];
([0], 1) -> [0, 1];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (0, [1])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017355 false false

([0], 0) -> [0];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [1, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [1, S n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.055026 false false

([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      Cons
        ( 0
        , Cons
            ( S
                (case n of
                  Z y2 -> 
                    1

                  S y2 -> 
                    0)
            , case #2.2 y1 of
                Nil y2 -> 
                  []

                Cons y2 -> 
                  [2]
            )
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.006305 false false

([], 2) -> [2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [2]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0, #2.1 y1]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0704639999999 false false

([], 2) -> [2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00586999999996 false false

([0], 0) -> [0];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      [0, 1, n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      Cons
        (case xs of
          Nil y2 -> 
            (0, [1])

          Cons y2 -> 
            (0, [1, n]))

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          list_sorted_insert (#2.2 y2) (#2.1 y2) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.870658 false false

([0], 0) -> [0];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [1, S y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [1, S y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.049788 false false

([], 1) -> [1];
([0], 0) -> [0];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      xs in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017079 false false

([], 2) -> [2];
([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [2]

    Cons y1 -> 
      case n of
        Z y2 -> 
          [0, #2.1 y1]

        S y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0426210000001 false false

([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [1]

    Cons y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [0, n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.032663 false false

([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) (S (#2.1 y1))
            )

        S y2 -> 
          [n, 2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y1) (S (#2.1 y1))
            )

        S y2 -> 
          [n, 2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.493228 false false

([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.194118 false false

([], 1) -> [1];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          [1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.196207 false false

([0], 1) -> [0, 1];
([1], 1) -> [1];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.551365 false false

([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      Cons
        (case n of
          Z y2 -> 
            (0, [])

          S y2 -> 
            (0, [n]))

    Cons y1 -> 
      case n of
        Z y2 -> 
          list_sorted_insert (#2.2 y1) (#2.1 y1)

        S y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.689602 false false

([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          ?? in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.49615 false false

([], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , list_sorted_insert (#2.2 y2) n
            )

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          Cons
            ( #2.1 y2
            , list_sorted_insert (#2.2 y2) n
            )

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.641093 false false

([], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [1]

    Cons y1 -> 
      [ case n of
          Z y2 -> 
            0

          S y2 -> 
            1
      , S
          (case #2.2 y1 of
            Nil y2 -> 
              1

            Cons y2 -> 
              0)
      ] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.805717 false false

([], 1) -> [1];
([], 2) -> [2];
([1], 0) -> [0, 1];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00589100000002 false false

([], 1) -> [1];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sorted_insert = \xs -> \n -> Cons (n, xs) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00634300000002 false false

([], 1) -> [1];
([], 2) -> [2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 1) -> [1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    ( case n of
        Z y1 -> 
          Z
            (case xs of
              Nil y2 -> 
                ()

              Cons y2 -> 
                ())

        S y1 -> 
          case compare y1 0 of
            LT y2 -> 
              ??

            GT y2 -> 
              0

            EQ y2 -> 
              1
    , case xs of
        Nil y1 -> 
          []

        Cons y1 -> 
          case compare n (#2.1 y1) of
            LT y2 -> 
              [2]

            GT y2 -> 
              [1, 2]

            EQ y2 -> 
              []
    ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
6.231959 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> Cons
    (case xs of
      Nil y1 -> 
        (n, [])

      Cons y1 -> 
        (#2.1 y1, [S (#2.1 y1)])) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015326 false false

([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [2]

    Cons y1 -> 
      [ case #2.1 y1 of
          Z y2 -> 
            0

          S y2 -> 
            1
      , S
          (case #2.1 y1 of
            Z y2 -> 
              0

            S y2 -> 
              1)
      ] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.89205 false false

([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.74934 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          [0, n]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, #2.2 y2) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          Cons
            ( 0
            , list_sorted_insert (#2.2 y2) n
            )

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          Cons (0, #2.2 y2) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.628875 false false

([], 1) -> [1];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          [0]

        S y2 -> 
          [1]

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n, #2.1 y1]

        Cons y2 -> 
          [0, #2.1 y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0859359999999 false false

([], 2) -> [2];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, #2.1 y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, #2.1 y2] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.290256 false false

([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          [1, n]

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.486982 false false

([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [2]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          [0, 1, n]

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.164505 false false

([], 1) -> [1];
([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      Cons
        ( case compare (#2.1 y1) (S n) of
            LT y2 -> 
              0

            GT y2 -> 
              0

            EQ y2 -> 
              1
        , Cons
            ( S
                (case #2.1 y1 of
                  Z y2 -> 
                    0

                  S y2 -> 
                    1)
            , case compare n (S (#2.1 y1)) of
                LT y2 -> 
                  []

                GT y2 -> 
                  [2]

                EQ y2 -> 
                  []
            )
        ) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.803087 false false

([], 1) -> [1];
([], 2) -> [2];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              [0, 1, n]

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
12.152261 false false

([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.654308 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.422192 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          [1, n]

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.404604 false false

([], 2) -> [2];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              ??

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, #2.1 y2]

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              ??

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, 2]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
15.243737 false false

([], 1) -> [1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [1]

        Cons y2 -> 
          Cons
            ( case #2.2 y2 of
                Nil y3 -> 
                  1

                Cons y3 -> 
                  0
            , case compare n (S (#2.1 y2)) of
                LT y3 -> 
                  []

                GT y3 -> 
                  [1, 2]

                EQ y3 -> 
                  [2]
            )

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, 1]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
18.419771 false false

([], 2) -> [2];
([0], 0) -> [0];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.77497 false false

([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [1, S n]

            GT y3 -> 
              [0, 1]

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, 1]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
12.423216 false false

([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [1]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          [0, n]

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.988667 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
None
([], 1) -> [1];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
23.642503 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.497429 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.405359 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          [1, n]

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.058249 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.28452 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([], 0) -> [0];
=================================
None
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.001716 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          [#2.1 y1, S (#2.1 y1)]

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.213264 false false

([], 1) -> [1];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.753368 false false

([], 1) -> [1];
([], 2) -> [2];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.505032 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [1, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [1, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.921851 false false

([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      [n]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
1.749123 false false

([], 2) -> [2];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, #2.1 y2]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case compare n 0 of
    LT y1 -> 
      ??

    GT y1 -> 
      case xs of
        Nil y2 -> 
          [2]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              Cons (1, xs)

            GT y3 -> 
              Cons
                ( #2.1 y2
                , list_sorted_insert (#2.2 y2) n
                )

            EQ y3 -> 
              [1]

    EQ y1 -> 
      case xs of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare n (#2.1 y2) of
            LT y3 -> 
              [0, #2.1 y2]

            GT y3 -> 
              ??

            EQ y3 -> 
              [0, 1] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
34.193726 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.71257 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons
            ( n
            , list_sorted_insert (#2.2 y1) (#2.1 y1)
            )

        GT y2 -> 
          ??

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.687954 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.702823 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [0, #2.1 y1]

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.476442 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.846654 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.747248 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.892398 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [0] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.892784 false false

([], 1) -> [1];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.888561 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.087397 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          [n, #2.1 y1]

        GT y2 -> 
          [#2.1 y1, n]

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.526679 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          [n] in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.939792 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (0, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.986382 false false

([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.158962 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.169797 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (0, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.162625 false false

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.966202 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.004471 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
None
([], 1) -> [1];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.236546 true true

([], 1) -> [1];
([], 2) -> [2];
([0], 0) -> [0];
([0], 1) -> [0, 1];
([1], 0) -> [0, 1];
([1], 1) -> [1];
([1], 2) -> [1, 2];
([2], 0) -> [0, 2];
([2], 1) -> [1, 2];
([0, 1], 0) -> [0, 1];
([0, 1], 2) -> [0, 1, 2];
([], 0) -> [0];
=================================
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sorted_insert = \xs -> \n -> case xs of
    Nil y1 -> 
      case compare n (Z y1) of
        LT y2 -> 
          ??

        GT y2 -> 
          [n]

        EQ y2 -> 
          [0]

    Cons y1 -> 
      case compare n (#2.1 y1) of
        LT y2 -> 
          Cons (n, xs)

        GT y2 -> 
          Cons
            ( #2.1 y1
            , list_sorted_insert (#2.2 y1) n
            )

        EQ y2 -> 
          Cons (n, #2.2 y1) in list_sorted_insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.375812 true true

