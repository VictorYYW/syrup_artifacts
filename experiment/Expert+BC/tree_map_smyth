tree_map
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> tree in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0394349999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0534 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Node (Leaf, 1, Leaf), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0631209999999 false false

(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 0, Node (Leaf, 1, Leaf))

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0574320000001 false false

(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.039732 false false

(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0519409999999 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, div2 (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0534540000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0540040000001 false false

(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.077732 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> tree in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0401360000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, f (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0526 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.056703 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.061369 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Node (Leaf, 1, Leaf), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0639759999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0628959999999 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0605149999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0563500000001 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0603960000001 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0599239999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0582010000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0632450000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0539510000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.059538 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0695840000001 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.060307 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, f (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.052412 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0558490000001 true true

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0518729999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0719810000001 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.056212 true true

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0573790000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, f (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0534580000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0602859999999 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.059072 true true

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0575470000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.085088 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0601140000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.058448 true true

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0563159999999 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0778780000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0619999999999 true true

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0600360000001 true true

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0603779999999 true true

