list_take
(0, [1]) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00384499999996 false false

(0, [0, 1]) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00388999999996 false false

(0, [1, 0, 1]) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00389799999994 false false

(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1, 0] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (y1, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00785599999995 false false

(1, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00382100000002 false false

(1, [0, 1]) -> [0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [0] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (0, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00695500000006 false false

(1, [1, 0, 1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00724700000001 false false

(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00395200000003 false false

(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00384699999995 false false

(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00390900000002 false false

(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.00671000000011 false false

(0, [0, 1]) -> [];
(1, [1, 0, 1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00618499999996 false false

(0, [1]) -> [];
(1, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00386000000003 false false

(1, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          [1, 0] in list_take) : Nat -> NatList -> NatList)
0.0259349999999 false false

(0, [1]) -> [];
(1, [0, 1]) -> [0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [0] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (0, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00591800000007 false false

(0, [1]) -> [];
(1, [1, 0, 1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00617800000009 false false

(0, [0, 1]) -> [];
(1, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.0061740000001 false false

(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.0066569999999 false false

(1, []) -> [];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00387799999999 false false

(0, [1]) -> [];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [y1, 0] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (y1, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.0088639999999 false false

(0, [1]) -> [];
(1, [0, 1]) -> [0];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [y1] in list_take) : Nat -> NatList -> NatList)
0.00605799999994 false false

(0, [0, 1]) -> [];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [1] in list_take) : Nat -> NatList -> NatList)
0.00604999999996 false false

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.0061290000001 false false

(1, []) -> [];
(1, [0, 1]) -> [0];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [0] in list_take) : Nat -> NatList -> NatList)
0.00664000000006 false false

(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.00698000000011 false false

(1, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          Cons (0, #2.2 y1)

        S y2 -> 
          [#2.1 y1, 0] in list_take) : Nat -> NatList -> NatList)
0.0607419999999 false false

(1, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          [#2.1 y1, 0] in list_take) : Nat -> NatList -> NatList)
0.0262769999999 false false

(1, []) -> [];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [n] in list_take) : Nat -> NatList -> NatList)
0.00681400000008 false false

(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1, 0, 1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (n, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.021483 false false

(0, [0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.024467 false false

(1, []) -> [];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case xs of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons (#2.1 y2, list_take y1 (#2.2 y2)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case xs of
        Nil y2 -> 
          []

        Cons y2 -> 
          Cons (#2.1 y2, list_take y1 (#2.2 y2)) in list_take) : Nat -> NatList -> NatList)
0.053701 true true

(0, [0, 1]) -> [];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00613799999996 false false

(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.00695300000007 false false

(0, [1, 0, 1]) -> [];
(1, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (y2, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (y2, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0411180000001 false false

(1, []) -> [];
(1, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          list_take y2 xs

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [n]

        Cons y2 -> 
          [#2.1 y1, #2.1 y2] in list_take) : Nat -> NatList -> NatList)
0.030939 false false

(0, [0, 1]) -> [];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0316350000001 true true

(0, [1]) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.049207 true true

(0, [1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0485659999999 true true

(0, [0, 1]) -> [];
(1, [1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00631500000009 false false

(0, [1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00619000000006 false false

(0, [1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          list_take y2 xs

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          []

        Cons y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.0290190000001 false false

(0, [1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0570700000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00629200000003 false false

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.0231249999999 false false

(0, [1]) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.043508 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.0228569999999 false false

(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.044533 true true

(0, [1, 0, 1]) -> [];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0394799999999 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.04097 true true

(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.055263 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      case xs of
        Nil y2 -> 
          []

        Cons y2 -> 
          []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [n]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0354580000001 false true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      case xs of
        Nil y2 -> 
          []

        Cons y2 -> 
          []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0457269999999 false true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00622900000008 false false

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.039051 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.033897 false true

(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0551579999999 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.043134 false true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0353279999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(2, []) -> [];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [y2, 0] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (y2, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.0257389999999 false false

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.027814 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0562649999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.054817 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.047104 true true

(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0560969999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0367920000001 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0546670000001 true true

(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.055889 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.043146 true true

(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.056855 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0514599999999 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0605599999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0566080000001 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0567960000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [0, 1]) -> [0];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0527549999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0303739999999 false true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0568069999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.05494 true true

(0, [1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.066505 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.058 true true

(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0613069999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0619280000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.061874 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0862810000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0548490000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0643500000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0632089999999 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.064132 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0565799999999 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0659000000001 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.060759 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.061766 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0632519999999 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.063989 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0621470000001 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.066129 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0646159999999 true true

(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.068456 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.066519 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0663529999999 true true

(0, [1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.066302 true true

(0, [1]) -> [];
(0, [0, 1]) -> [];
(0, [1, 0, 1]) -> [];
(1, []) -> [];
(1, [1]) -> [1];
(1, [0, 1]) -> [0];
(1, [1, 0, 1]) -> [1];
(2, []) -> [];
(2, [1]) -> [1];
(2, [0, 1]) -> [0, 1];
(2, [1, 0, 1]) -> [1, 0];
(0, []) -> [];
=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0683759999999 true true

