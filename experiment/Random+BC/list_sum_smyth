list_sum
[1,3,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.02801 true false

[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028693 true false

[1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0282400000001 true false

[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.027621 true false

[2,0,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0279849999999 true false

[3,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0289769999999 true false

[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028548 true false

[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0287900000001 true false

[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028035 true false

[1,1,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0296619999999 true false

[0,1] -> 1;
[2,2,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0284710000001 true false

[3,2] -> 5;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0282070000001 true false

[0,3,2] -> 5;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029086 true false

[1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029086 true false

[1] -> 1;
[3,2,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029325 true false

[0] -> 0;
[2,3,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0287719999999 true false

[1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029153 true false

[0,3] -> 3;
[3,1,1] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.028793 true false

[0,1,3] -> 4;
[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0300990000001 true false

[3,1] -> 4;
[1,2,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029243 true false

[1] -> 1;
[1,2] -> 3;
[3,3,3] -> 9;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029072 true false

[2] -> 2;
[0] -> 0;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029233 true false

[0,0] -> 0;
[0,2] -> 2;
[0,3,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029702 true false

[1,3,3] -> 7;
[1,0,2] -> 3;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029483 true false

[3] -> 3;
[3,1] -> 4;
[3,1,0] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029004 true false

[2,2,0] -> 4;
[0] -> 0;
[1,0,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029493 true false

[0,0] -> 0;
[0,1,0] -> 1;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029552 true false

[1,0] -> 1;
[2,0] -> 2;
[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0294280000001 true false

[3,0,1] -> 4;
[2,1] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0297559999999 true false

[1,2,2] -> 5;
[1,0] -> 1;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029147 true false

[2] -> 2;
[2,3,2] -> 7;
[0,0,0] -> 0;
[2,3,0] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030407 true false

[3,0,1] -> 4;
[0] -> 0;
[3,2,0] -> 5;
[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0299930000001 true false

[2] -> 2;
[2,3] -> 5;
[1,2] -> 3;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029935 true false

[3] -> 3;
[0,3,3] -> 6;
[1,0,3] -> 4;
[1,1,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030364 true false

[1,2,0] -> 3;
[0,3,2] -> 5;
[0,1,1] -> 2;
[0,1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030718 true false

[2,0] -> 2;
[0,2,0] -> 2;
[3,3,1] -> 7;
[2,3,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0302469999999 true false

[3] -> 3;
[1] -> 1;
[2] -> 2;
[0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0300830000001 true false

[0] -> 0;
[3] -> 3;
[1,1] -> 2;
[2,3,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0299600000001 true false

[0,0] -> 0;
[3] -> 3;
[1,0,2] -> 3;
[2,1,1] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029984 true false

[1,0] -> 1;
[3,1,2] -> 6;
[2] -> 2;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.029483 true false

[0,1,0] -> 1;
[1,2] -> 3;
[2] -> 2;
[3] -> 3;
[2,1,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03051 true false

[3,2,1] -> 6;
[3,3,2] -> 8;
[3,1,0] -> 4;
[0,1,1] -> 2;
[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03217 true false

[2,3,1] -> 6;
[0,2] -> 2;
[3,1,3] -> 7;
[2,1] -> 3;
[0,1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03208 true false

[1,0] -> 1;
[0,1] -> 1;
[2] -> 2;
[1,1,2] -> 4;
[0,0,2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0310589999999 true false

[3] -> 3;
[2] -> 2;
[3,3,1] -> 7;
[1,2] -> 3;
[0,1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031518 true false

[2,0] -> 2;
[1,3,3] -> 7;
[2,2,2] -> 6;
[0,2] -> 2;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0310629999999 true false

[2,2] -> 4;
[1,1,2] -> 4;
[3] -> 3;
[1] -> 1;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0303610000001 true false

[3] -> 3;
[0,1,1] -> 2;
[2] -> 2;
[1,0] -> 1;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03097 true false

[0,3,1] -> 4;
[2] -> 2;
[3,3] -> 6;
[3,2,1] -> 6;
[0,2,2] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0308709999999 true false

[0] -> 0;
[0,1] -> 1;
[3,3,2] -> 8;
[0,0] -> 0;
[3,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.030984 true false

[0] -> 0;
[3,2,2] -> 7;
[3,2] -> 5;
[1] -> 1;
[0,3] -> 3;
[0,1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031847 true false

[1,2,2] -> 5;
[2,0,3] -> 5;
[3,3] -> 6;
[2,0,1] -> 3;
[3,1] -> 4;
[3,3,1] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0332490000001 true false

[3] -> 3;
[0,2] -> 2;
[2,0,2] -> 4;
[0,1] -> 1;
[3,0,0] -> 3;
[3,2,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033179 true false

[1,1] -> 2;
[0] -> 0;
[1,0,2] -> 3;
[2,2,3] -> 7;
[1,3] -> 4;
[1,2,1] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0325789999999 true false

[0] -> 0;
[1,1] -> 2;
[1,2] -> 3;
[0,3,1] -> 4;
[0,3,2] -> 5;
[2,1] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0329119999999 true false

[2] -> 2;
[2,0] -> 2;
[3,3,2] -> 8;
[0,2,3] -> 5;
[3,0,2] -> 5;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0321429999999 true false

[0] -> 0;
[0,1] -> 1;
[3,1] -> 4;
[2,2] -> 4;
[1,2,1] -> 4;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033694 true false

[2] -> 2;
[3,1,3] -> 7;
[1,0] -> 1;
[0] -> 0;
[0,0] -> 0;
[2,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033723 true false

[1] -> 1;
[3] -> 3;
[1,0] -> 1;
[1,2,3] -> 6;
[3,3] -> 6;
[2,3,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033169 true false

[1] -> 1;
[2,0,0] -> 2;
[0,1] -> 1;
[1,3,1] -> 5;
[3,0] -> 3;
[0,3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0320979999999 true false

[1] -> 1;
[3,2,0] -> 5;
[3,2,1] -> 6;
[3] -> 3;
[1,2] -> 3;
[2,3] -> 5;
[3,3,1] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033803 true false

[0] -> 0;
[3,3,3] -> 9;
[1] -> 1;
[3,0,0] -> 3;
[3,1] -> 4;
[2] -> 2;
[2,3,3] -> 8;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0329750000001 true false

[3,3] -> 6;
[2,1,2] -> 5;
[2,0,3] -> 5;
[3,3,1] -> 7;
[0,2,1] -> 3;
[0,0,2] -> 2;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0328709999999 true false

[0,3] -> 3;
[2] -> 2;
[1,3,0] -> 4;
[3,3,1] -> 7;
[2,3,0] -> 5;
[1,2] -> 3;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033205 true false

[1,3,1] -> 5;
[0,3] -> 3;
[3,2,3] -> 8;
[0,3,1] -> 4;
[0] -> 0;
[1,2] -> 3;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0324390000001 true false

[1] -> 1;
[2,0] -> 2;
[3,1,1] -> 5;
[3] -> 3;
[2,1] -> 3;
[2,2] -> 4;
[1,0] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031131 true false

[0,1] -> 1;
[2,0] -> 2;
[0] -> 0;
[1,3] -> 4;
[1] -> 1;
[3,2] -> 5;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0315929999999 true false

[0] -> 0;
[3,2] -> 5;
[0,1] -> 1;
[3] -> 3;
[1,1,2] -> 4;
[1,2] -> 3;
[0,0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.031459 true false

[3,1] -> 4;
[1,2,2] -> 5;
[2,1,0] -> 3;
[0,1] -> 1;
[0] -> 0;
[2] -> 2;
[3,0,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0329710000001 true false

[3,2,2] -> 7;
[1] -> 1;
[0,0,2] -> 2;
[3,2,3] -> 8;
[2] -> 2;
[1,1,1] -> 3;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0341080000001 true false

[0,2] -> 2;
[3] -> 3;
[0] -> 0;
[1,0] -> 1;
[2] -> 2;
[3,0] -> 3;
[3,0,2] -> 5;
[3,1,2] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.03394 true false

[1,1] -> 2;
[0,2,0] -> 2;
[0,0,2] -> 2;
[3,2] -> 5;
[2,2] -> 4;
[2,3] -> 5;
[3,3,3] -> 9;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.037149 true false

[2] -> 2;
[2,2] -> 4;
[1] -> 1;
[3,1,1] -> 5;
[3,3] -> 6;
[3,3,0] -> 6;
[0] -> 0;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034185 true false

[3,1,3] -> 7;
[2,2,3] -> 7;
[0,0] -> 0;
[1,0] -> 1;
[0] -> 0;
[3,3] -> 6;
[0,1] -> 1;
[2,1,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0333029999999 true false

[3] -> 3;
[1,0,2] -> 3;
[1,1] -> 2;
[0] -> 0;
[3,1] -> 4;
[0,3] -> 3;
[2,0] -> 2;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.032271 true false

[1,1,1] -> 3;
[1,3] -> 4;
[2,0] -> 2;
[1,3,1] -> 5;
[3,0] -> 3;
[1] -> 1;
[3,1,2] -> 6;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0329819999999 true false

[1,3,1] -> 5;
[2] -> 2;
[0,1] -> 1;
[2,0,2] -> 4;
[2,2,1] -> 5;
[0,2] -> 2;
[3,1,2] -> 6;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0333860000001 true false

[0] -> 0;
[2,2] -> 4;
[0,1] -> 1;
[1,2] -> 3;
[1,3] -> 4;
[1] -> 1;
[2,0,0] -> 2;
[3,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0321879999999 true false

[1,0,1] -> 2;
[2,1,1] -> 4;
[2] -> 2;
[0,0,2] -> 2;
[0,3,2] -> 5;
[1,2] -> 3;
[1,2,1] -> 4;
[3,0] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.035042 true false

[1] -> 1;
[1,1,3] -> 5;
[3,1,3] -> 7;
[1,1] -> 2;
[2,0] -> 2;
[2] -> 2;
[0] -> 0;
[2,3] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.033645 true false

[0,3,2] -> 5;
[1,2] -> 3;
[2,1,2] -> 5;
[0,1,0] -> 1;
[3,3,0] -> 6;
[2,1] -> 3;
[0] -> 0;
[2] -> 2;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0350559999999 true false

[3,0] -> 3;
[1] -> 1;
[2,1] -> 3;
[0,2] -> 2;
[0] -> 0;
[2,0] -> 2;
[3] -> 3;
[2] -> 2;
[2,2] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034535 true false

[2] -> 2;
[3,0] -> 3;
[3,2,0] -> 5;
[3,0,0] -> 3;
[3,3] -> 6;
[0,1] -> 1;
[2,3] -> 5;
[3,1,3] -> 7;
[1,3] -> 4;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034553 true false

[1,2] -> 3;
[3,1] -> 4;
[1,1,1] -> 3;
[1] -> 1;
[0,3,0] -> 3;
[0,2,0] -> 2;
[3] -> 3;
[2] -> 2;
[2,0] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0351209999999 true false

[3] -> 3;
[2,1] -> 3;
[1] -> 1;
[3,0] -> 3;
[2,2] -> 4;
[1,0] -> 1;
[1,3,0] -> 4;
[1,2] -> 3;
[0] -> 0;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034619 true false

[3,1,3] -> 7;
[3,1] -> 4;
[3] -> 3;
[0,2] -> 2;
[1,2,0] -> 3;
[0,0] -> 0;
[2,2] -> 4;
[2] -> 2;
[3,3,3] -> 9;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0357039999999 true false

[2] -> 2;
[0,2,3] -> 5;
[0] -> 0;
[2,3] -> 5;
[0,0,1] -> 1;
[2,1,1] -> 4;
[3] -> 3;
[0,0] -> 0;
[3,2,3] -> 8;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0368920000001 true false

[3,0] -> 3;
[2,3,1] -> 6;
[0,0] -> 0;
[1,3] -> 4;
[0,3] -> 3;
[2,1] -> 3;
[1] -> 1;
[3,1,3] -> 7;
[3,2,2] -> 7;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0349189999999 true false

[1,2] -> 3;
[1,0,1] -> 2;
[1,1,2] -> 4;
[3] -> 3;
[1] -> 1;
[1,0,2] -> 3;
[3,0,0] -> 3;
[1,0] -> 1;
[2] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034924 true false

[0,0,3] -> 3;
[0,2] -> 2;
[1,0] -> 1;
[1] -> 1;
[3,2,3] -> 8;
[2] -> 2;
[2,0,0] -> 2;
[3,1] -> 4;
[3,2,1] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0355199999999 true false

[0,1,0] -> 1;
[2,3,1] -> 6;
[1,2,2] -> 5;
[2] -> 2;
[1,0] -> 1;
[3] -> 3;
[2,1] -> 3;
[2,1,1] -> 4;
[1,3] -> 4;
[0,1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.037239 true false

[2,0] -> 2;
[0,2,0] -> 2;
[1] -> 1;
[2] -> 2;
[0,2,3] -> 5;
[1,3,1] -> 5;
[3] -> 3;
[3,1] -> 4;
[1,2,0] -> 3;
[2,1,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.035871 true false

[1,0,3] -> 4;
[2,3,2] -> 7;
[2] -> 2;
[3,1,2] -> 6;
[3,2] -> 5;
[0,0] -> 0;
[1,2,0] -> 3;
[0] -> 0;
[1] -> 1;
[3,2,0] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.035932 true false

[3] -> 3;
[2,2,3] -> 7;
[2,1] -> 3;
[3,3,1] -> 7;
[0,0,1] -> 1;
[1,0,1] -> 2;
[2,1,3] -> 6;
[0,0,0] -> 0;
[1,2] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.035615 true false

[3,1] -> 4;
[0,2,0] -> 2;
[0,1] -> 1;
[2,0] -> 2;
[1,2,3] -> 6;
[0] -> 0;
[0,3] -> 3;
[1] -> 1;
[1,2] -> 3;
[3,2] -> 5;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034506 true false

[2] -> 2;
[3,3] -> 6;
[3,3,1] -> 7;
[2,1] -> 3;
[2,2,0] -> 4;
[0,1,0] -> 1;
[0,2] -> 2;
[1,1] -> 2;
[1,2] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0347939999999 true false

[2] -> 2;
[2,1,3] -> 6;
[3] -> 3;
[2,2,2] -> 6;
[1,0,2] -> 3;
[2,0,2] -> 4;
[0,1] -> 1;
[3,2] -> 5;
[0] -> 0;
[0,1,1] -> 2;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0352559999999 true false

[2,2] -> 4;
[3,1,3] -> 7;
[3,0,3] -> 6;
[3,1,0] -> 4;
[1] -> 1;
[1,2,3] -> 6;
[0] -> 0;
[0,0] -> 0;
[2,1] -> 3;
[3] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.0346059999999 true false

[0,1] -> 1;
[2,3] -> 5;
[3,3,1] -> 7;
[2,3,3] -> 8;
[2,0] -> 2;
[1] -> 1;
[2,2] -> 4;
[3,3] -> 6;
[0,0,0] -> 0;
[1,2] -> 3;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034549 true false

[0,3,3] -> 6;
[1] -> 1;
[2] -> 2;
[1,3,3] -> 7;
[1,3,0] -> 4;
[3,2,3] -> 8;
[0,3,0] -> 3;
[0] -> 0;
[1,1,0] -> 2;
[2,1,3] -> 6;
[] -> 0;

=================================
(\fold -> (\add -> (\list_sum -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sum = \xs -> fold add 0 xs in list_sum) : NatList -> Nat))
  ((let add = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (add m n2) in add) : Nat -> Nat -> Nat))
  ((let fold = \f -> \acc -> (\fixFold -> fixFold)
    ((let fixFold = \xs -> case xs of
      Nil _ -> 
        acc

      Cons p -> 
        f (fixFold (#2.2 p)) (#2.1 p) in fixFold) : NatList -> Nat) in fold) : (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat)
0.034958 true false

