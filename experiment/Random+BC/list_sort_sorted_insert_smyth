list_sort_sorted_insert
[1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014111 false true

[3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00794599999995 false false

[0,0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      #2.2 y1 in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0128930000001 false true

[1,2,1] -> [1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0170390000001 true true

[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00776700000006 false false

[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00789200000008 false false

[1,1,1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0140940000001 false true

[3,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0141799999999 false true

[1,2,3] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00784300000009 false false

[3,0,0] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [0, #2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0153130000001 false true

[3,2,0] -> [0,2,3];
[3,2] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0121099999999 true true

[1,3] -> [1,3];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00819299999989 false false

[0,1] -> [0,1];
[1,3] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00828799999999 false false

[1] -> [1];
[2,1,3] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0142000000001 false true

[2,1,2] -> [1,2];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0140980000001 false true

[2,3,1] -> [1,2,3];
[0,0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0119790000001 true true

[2] -> [2];
[2,3] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00800600000002 false false

[3,2] -> [2,3];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013144 false true

[0,1,0] -> [0,1];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.012956 true true

[1,2] -> [1,2];
[0,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0080989999999 false false

[3] -> [3];
[1,1] -> [1];
[3,3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016288 false true

[0,3] -> [0,3];
[2,0,0] -> [0,2];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0126310000001 true true

[3] -> [3];
[1,1,3] -> [1,3];
[0,3] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014958 false true

[3,3,2] -> [2,3];
[1,0,0] -> [0,1];
[0,2,3] -> [0,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01367 true true

[0,1,2] -> [0,1,2];
[3,0] -> [0,3];
[2,0,2] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.019186 false true

[3,1,1] -> [1,3];
[1,3,3] -> [1,3];
[0,0,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0136789999999 true true

[1,0,0] -> [0,1];
[1,1,1] -> [1];
[2,3,3] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0132619999999 true true

[1,2] -> [1,2];
[2] -> [2];
[3,2,2] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014451 true true

[1,1,0] -> [0,1];
[0] -> [0];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.012559 true true

[3] -> [3];
[1,3] -> [1,3];
[0,3,1] -> [0,1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014586 true true

[3,3] -> [3];
[0,2,2] -> [0,2];
[0,1] -> [0,1];
[1,1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0145640000001 true true

[3] -> [3];
[3,2,2] -> [2,3];
[3,2] -> [2,3];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016576 true true

[0,3,0] -> [0,3];
[3,2] -> [2,3];
[3] -> [3];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0131610000001 true true

[3] -> [3];
[1] -> [1];
[1,3,2] -> [1,2,3];
[3,3,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016873 true true

[3] -> [3];
[2] -> [2];
[3,3] -> [3];
[0,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0152869999999 false true

[2,1] -> [1,2];
[2,3] -> [2,3];
[1] -> [1];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0160719999999 false true

[2] -> [2];
[1,0] -> [0,1];
[0,1,2] -> [0,1,2];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0136480000001 false true

[0] -> [0];
[1,2,2] -> [1,2];
[1,2,1] -> [1,2];
[1,2,3] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017231 true true

[1,0] -> [0,1];
[2] -> [2];
[0,2] -> [0,2];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0135680000001 false true

[3,2] -> [2,3];
[2,2,3] -> [2,3];
[1,3,1] -> [1,3];
[1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014447 true true

[1,3,3] -> [1,3];
[3,3,3] -> [3];
[1,2,2] -> [1,2];
[0] -> [0];
[0,3,3] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0205739999999 true true

[3,1,3] -> [1,3];
[1] -> [1];
[1,2,1] -> [1,2];
[0,3,3] -> [0,3];
[2,2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015854 true true

[3,3,2] -> [2,3];
[2] -> [2];
[1,3] -> [1,3];
[1,0] -> [0,1];
[1,2] -> [1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014876 true true

[2,0] -> [0,2];
[3,1,2] -> [1,2,3];
[2,3] -> [2,3];
[1,3,1] -> [1,3];
[2,2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0154709999999 true true

[3,1] -> [1,3];
[1,1] -> [1];
[1,3,2] -> [1,2,3];
[3,0] -> [0,3];
[0,2] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0144459999999 true true

[0] -> [0];
[1,2] -> [1,2];
[2,1] -> [1,2];
[0,3,2] -> [0,2,3];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013993 true true

[3] -> [3];
[1,2] -> [1,2];
[0] -> [0];
[0,0] -> [0];
[2,3,1] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013931 true true

[2,3,2] -> [2,3];
[3,0] -> [0,3];
[2,3] -> [2,3];
[1,1] -> [1];
[2,0] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014545 true true

[1,1,1] -> [1];
[3,1] -> [1,3];
[1] -> [1];
[0] -> [0];
[3,2,0] -> [0,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0144949999999 true true

[0,1,0] -> [0,1];
[1,0] -> [0,1];
[1,3,1] -> [1,3];
[0,0] -> [0];
[3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015249 true true

[0,2,2] -> [0,2];
[3,2,2] -> [2,3];
[3] -> [3];
[2] -> [2];
[1] -> [1];
[0,3] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015414 true true

[3] -> [3];
[3,3,1] -> [1,3];
[3,2,3] -> [2,3];
[2,3] -> [2,3];
[3,3,0] -> [0,3];
[0,3,1] -> [0,1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016044 true true

[1,0] -> [0,1];
[3] -> [3];
[2,0,1] -> [0,1,2];
[3,0,3] -> [0,3];
[3,3] -> [3];
[3,3,0] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015746 true true

[0,2,1] -> [0,1,2];
[3] -> [3];
[0,1,0] -> [0,1];
[1,1,3] -> [1,3];
[3,0,0] -> [0,3];
[3,2] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015891 true true

[1] -> [1];
[0,1,1] -> [0,1];
[1,2] -> [1,2];
[3,3] -> [3];
[3] -> [3];
[2,1,3] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0156500000001 true true

[1,1] -> [1];
[0,1] -> [0,1];
[2,0,2] -> [0,2];
[3,0,3] -> [0,3];
[1,2] -> [1,2];
[3,1,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0156030000001 true true

[3] -> [3];
[1,1,1] -> [1];
[0,0] -> [0];
[0,2,1] -> [0,1,2];
[2,0] -> [0,2];
[3,1,3] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0162379999999 true true

[0,0,1] -> [0,1];
[3] -> [3];
[0] -> [0];
[2] -> [2];
[0,0] -> [0];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018028 false true

[2,2] -> [2];
[3,0] -> [0,3];
[0,3] -> [0,3];
[1] -> [1];
[0,1,2] -> [0,1,2];
[2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0152390000001 false true

[0] -> [0];
[3,0,0] -> [0,3];
[0,1] -> [0,1];
[0,2,1] -> [0,1,2];
[1,1,2] -> [1,2];
[2,3,3] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0159209999999 true true

[3,2] -> [2,3];
[3] -> [3];
[0] -> [0];
[2,3] -> [2,3];
[2,0,0] -> [0,2];
[1,3,2] -> [1,2,3];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016435 true true

[3,3] -> [3];
[3] -> [3];
[1] -> [1];
[1,1,3] -> [1,3];
[0,2,1] -> [0,1,2];
[3,3,0] -> [0,3];
[1,3,3] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016468 true true

[0] -> [0];
[0,0,2] -> [0,2];
[1] -> [1];
[3] -> [3];
[2,2] -> [2];
[1,3] -> [1,3];
[0,2,1] -> [0,1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0272480000001 true true

[3,3] -> [3];
[0,3,0] -> [0,3];
[1] -> [1];
[2,2] -> [2];
[3] -> [3];
[2,3,3] -> [2,3];
[2,2,0] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0167550000001 true true

[1] -> [1];
[2] -> [2];
[2,0,3] -> [0,2,3];
[3] -> [3];
[1,1] -> [1];
[2,0] -> [0,2];
[0,2,1] -> [0,1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.029622 true true

[2] -> [2];
[2,0] -> [0,2];
[3,2] -> [2,3];
[0] -> [0];
[1,0,0] -> [0,1];
[1,2] -> [1,2];
[1] -> [1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0159020000001 true true

[3] -> [3];
[3,2] -> [2,3];
[2] -> [2];
[0,0] -> [0];
[1,2,3] -> [1,2,3];
[0,2,1] -> [0,1,2];
[0,3] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0164569999999 true true

[0,0] -> [0];
[1,0] -> [0,1];
[3,2] -> [2,3];
[0,2] -> [0,2];
[3,3] -> [3];
[2,2,0] -> [0,2];
[2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0161250000001 true true

[3] -> [3];
[0] -> [0];
[1,1,3] -> [1,3];
[3,0,3] -> [0,3];
[2,2,3] -> [2,3];
[2,0] -> [0,2];
[2,0,3] -> [0,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017151 false true

[0,3,3] -> [0,3];
[1] -> [1];
[3,0,2] -> [0,2,3];
[2,2,1] -> [1,2];
[3,1] -> [1,3];
[3,2,3] -> [2,3];
[1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016924 true true

[0,3,0] -> [0,3];
[2] -> [2];
[2,3,1] -> [1,2,3];
[0] -> [0];
[2,0,0] -> [0,2];
[3,0] -> [0,3];
[2,1,0] -> [0,1,2];
[3,3,3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017122 true true

[1,2] -> [1,2];
[3,1] -> [1,3];
[2,2] -> [2];
[1,1] -> [1];
[2,3,2] -> [2,3];
[3,0] -> [0,3];
[0,1,1] -> [0,1];
[2,1] -> [1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017685 true true

[0,2,3] -> [0,2,3];
[0,1] -> [0,1];
[0,0] -> [0];
[2] -> [2];
[3] -> [3];
[1,1,0] -> [0,1];
[0,3] -> [0,3];
[3,2] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0171580000001 true true

[0,3,3] -> [0,3];
[3] -> [3];
[2] -> [2];
[1,0,0] -> [0,1];
[2,2,2] -> [2];
[0,3,0] -> [0,3];
[1,1] -> [1];
[2,2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0166079999999 true true

[0,1,2] -> [0,1,2];
[2,0] -> [0,2];
[1] -> [1];
[3,1] -> [1,3];
[3] -> [3];
[0] -> [0];
[2] -> [2];
[0,2] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0161430000001 false true

[3,1,3] -> [1,3];
[2] -> [2];
[0,1,1] -> [0,1];
[3,2,1] -> [1,2,3];
[0,2] -> [0,2];
[2,0] -> [0,2];
[2,2,2] -> [2];
[2,1,3] -> [1,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0174890000001 true true

[1,2] -> [1,2];
[1,3,3] -> [1,3];
[3] -> [3];
[2,0,3] -> [0,2,3];
[2,1] -> [1,2];
[3,3] -> [3];
[2,2] -> [2];
[0,1,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0172219999999 true true

[2,1] -> [1,2];
[0,0] -> [0];
[0] -> [0];
[3,2,3] -> [2,3];
[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];
[3,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016441 false true

[3,2,3] -> [2,3];
[0,1] -> [0,1];
[1,1] -> [1];
[2] -> [2];
[0,2] -> [0,2];
[3] -> [3];
[0] -> [0];
[3,3,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0168200000001 true true

[1,0] -> [0,1];
[0,3,0] -> [0,3];
[3] -> [3];
[2] -> [2];
[2,0] -> [0,2];
[2,3,2] -> [2,3];
[1,3] -> [1,3];
[3,0] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0166899999999 true true

[2,1,3] -> [1,2,3];
[0] -> [0];
[2] -> [2];
[1,2] -> [1,2];
[3,0] -> [0,3];
[1] -> [1];
[3,3,2] -> [2,3];
[3,2] -> [2,3];
[3,1] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017664 true true

[3,3,2] -> [2,3];
[3,1] -> [1,3];
[2] -> [2];
[1,1] -> [1];
[2,3] -> [2,3];
[3,1,2] -> [1,2,3];
[1,0] -> [0,1];
[2,0] -> [0,2];
[3,2] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017566 true true

[3,2,3] -> [2,3];
[2] -> [2];
[3,0,0] -> [0,3];
[3,1,2] -> [1,2,3];
[0] -> [0];
[1,2] -> [1,2];
[3,3] -> [3];
[0,0] -> [0];
[0,2,1] -> [0,1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018249 true true

[1] -> [1];
[3] -> [3];
[3,3] -> [3];
[1,0,1] -> [0,1];
[2,0] -> [0,2];
[0] -> [0];
[2,3] -> [2,3];
[2,1,2] -> [1,2];
[1,0] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0174059999999 false true

[3,2,3] -> [2,3];
[1,3] -> [1,3];
[0,2,0] -> [0,2];
[3] -> [3];
[0,3,3] -> [0,3];
[0,2] -> [0,2];
[3,2] -> [2,3];
[0,1,3] -> [0,1,3];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017726 true true

[1,0,0] -> [0,1];
[1] -> [1];
[0,0] -> [0];
[0,2] -> [0,2];
[3] -> [3];
[2,1] -> [1,2];
[1,1,0] -> [0,1];
[2] -> [2];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016672 true true

[2,2,3] -> [2,3];
[3] -> [3];
[2] -> [2];
[0,0] -> [0];
[1,2] -> [1,2];
[1] -> [1];
[2,3,0] -> [0,2,3];
[2,1,0] -> [0,1,2];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0174569999999 true true

[0,3,2] -> [0,2,3];
[3,1] -> [1,3];
[2,0] -> [0,2];
[3,0,1] -> [0,1,3];
[0,2] -> [0,2];
[2,0,1] -> [0,1,2];
[3,0,2] -> [0,2,3];
[0,0] -> [0];
[2,1] -> [1,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01803 true true

[0,3,0] -> [0,3];
[3,3,3] -> [3];
[0,3] -> [0,3];
[1,1,0] -> [0,1];
[0,1] -> [0,1];
[0,2,0] -> [0,2];
[3,0,3] -> [0,3];
[1] -> [1];
[0,1,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0183320000001 true true

[0,0] -> [0];
[2] -> [2];
[1] -> [1];
[3,0,2] -> [0,2,3];
[1,1,2] -> [1,2];
[3] -> [3];
[0,0,2] -> [0,2];
[3,1] -> [1,3];
[0,1,1] -> [0,1];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018329 true true

[0,3,2] -> [0,2,3];
[3] -> [3];
[3,3,1] -> [1,3];
[1,1,2] -> [1,2];
[0,3] -> [0,3];
[2,1,0] -> [0,1,2];
[2,0,1] -> [0,1,2];
[1] -> [1];
[2,3] -> [2,3];
[0] -> [0];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01963 true true

[1,2,0] -> [0,1,2];
[1,3,3] -> [1,3];
[0,1,0] -> [0,1];
[2,2,3] -> [2,3];
[2,1] -> [1,2];
[2,2,1] -> [1,2];
[1,2] -> [1,2];
[0,2,2] -> [0,2];
[2] -> [2];
[2,3,0] -> [0,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0196510000001 true true

[2,0,3] -> [0,2,3];
[2] -> [2];
[3] -> [3];
[1,0] -> [0,1];
[1,1] -> [1];
[0] -> [0];
[0,3] -> [0,3];
[2,1] -> [1,2];
[3,0] -> [0,3];
[1,1,3] -> [1,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018174 false true

[0,3] -> [0,3];
[0] -> [0];
[3,1] -> [1,3];
[0,1] -> [0,1];
[1] -> [1];
[2,3] -> [2,3];
[3,0] -> [0,3];
[2] -> [2];
[1,2,1] -> [1,2];
[2,0,3] -> [0,2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0182850000001 true true

[0,3] -> [0,3];
[1,0] -> [0,1];
[2] -> [2];
[3,1] -> [1,3];
[1,3] -> [1,3];
[0] -> [0];
[3] -> [3];
[1] -> [1];
[1,2] -> [1,2];
[2,3] -> [2,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017822 false true

[3] -> [3];
[1] -> [1];
[1,2] -> [1,2];
[0,2,1] -> [0,1,2];
[2] -> [2];
[0] -> [0];
[1,0] -> [0,1];
[1,0,3] -> [0,1,3];
[0,0] -> [0];
[0,3,3] -> [0,3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.017795 true true

[2,1] -> [1,2];
[0,0,2] -> [0,2];
[0,0] -> [0];
[3,0] -> [0,3];
[0,0,1] -> [0,1];
[2,0] -> [0,2];
[3,1,3] -> [1,3];
[1] -> [1];
[0,2,1] -> [0,1,2];
[2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.01857 true true

[1,3,3] -> [1,3];
[3] -> [3];
[1,2] -> [1,2];
[2,0] -> [0,2];
[1] -> [1];
[3,0,2] -> [0,2,3];
[0,2] -> [0,2];
[3,1,3] -> [1,3];
[1,3] -> [1,3];
[2] -> [2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018026 true true

[2] -> [2];
[1,0,3] -> [0,1,3];
[2,1,3] -> [1,2,3];
[2,0,2] -> [0,2];
[2,2,3] -> [2,3];
[0,2,3] -> [0,2,3];
[1,1] -> [1];
[1,0] -> [0,1];
[3,1,2] -> [1,2,3];
[2,0] -> [0,2];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0203180000001 false true

[1,1] -> [1];
[1] -> [1];
[1,0,0] -> [0,1];
[3,0,2] -> [0,2,3];
[0] -> [0];
[1,2,3] -> [1,2,3];
[2] -> [2];
[2,1] -> [1,2];
[1,3] -> [1,3];
[3,3] -> [3];
[] -> [];

=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018716 true true

