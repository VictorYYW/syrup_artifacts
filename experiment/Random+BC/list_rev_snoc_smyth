list_rev_snoc
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00543500000003 false false

[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00532199999998 false false

[1,3,3] -> [3,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022884 false true

[0,3,0] -> [0,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00546000000008 false false

[3,2,2] -> [2,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01358 false true

[1,2,3] -> [3,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.022142 true true

[0,2] -> [2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0111750000001 false true

[0,2] -> [2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011115 false true

[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00534100000004 false false

[1,2,2] -> [2,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0220670000001 false true

[3] -> [3];
[3,1,2] -> [2,1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00961800000005 true true

[0] -> [0];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00573099999997 false false

[2,3] -> [3,2];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00915600000008 false true

[1,2] -> [2,1];
[3,2,1] -> [1,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0101749999999 true true

[1,1,1] -> [1,1,1];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0108499999999 true true

[3] -> [3];
[0,1] -> [1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00924400000008 false true

[2,0] -> [0,2];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00848199999996 false true

[2] -> [2];
[0,0,1] -> [1,0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00969299999997 true true

[3,0] -> [0,3];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00857900000005 false true

[1,1] -> [1,1];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0059060000001 false false

[1,2,3] -> [3,2,1];
[2] -> [2];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105040000001 true true

[3,2] -> [2,3];
[1] -> [1];
[2,3] -> [3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0104369999999 false true

[1,3] -> [3,1];
[1,2,0] -> [0,2,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0089680000001 true true

[3] -> [3];
[0,1,0] -> [0,1,0];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0090580000001 true true

[2,2] -> [2,2];
[2,0,3] -> [3,0,2];
[2,3] -> [3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0118640000001 true true

[3] -> [3];
[0,0] -> [0,0];
[1,3] -> [3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00895799999989 false true

[0,2] -> [2,0];
[2] -> [2];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010628 true true

[0,2] -> [2,0];
[2,1,3] -> [3,1,2];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011829 true true

[0] -> [0];
[2,1] -> [1,2];
[2,0] -> [0,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00888699999996 false true

[1] -> [1];
[2,2,1] -> [1,2,2];
[2,1,1] -> [1,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011456 true true

[0] -> [0];
[2] -> [2];
[1,1] -> [1,1];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00626200000011 false false

[2] -> [2];
[0] -> [0];
[0,2] -> [2,0];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00953400000003 true true

[0,1,0] -> [0,1,0];
[1,1] -> [1,1];
[2] -> [2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_rev_snoc = \xs -> xs in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00619800000004 false false

[3] -> [3];
[2] -> [2];
[3,2] -> [2,3];
[1,1,0] -> [0,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00940799999989 true true

[0] -> [0];
[3,0] -> [0,3];
[1,3] -> [3,1];
[0,3,3] -> [3,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00965799999994 false true

[1] -> [1];
[0,0] -> [0,0];
[2,3] -> [3,2];
[3,3] -> [3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00963299999989 false true

[2,2,3] -> [3,2,2];
[1] -> [1];
[3,2,0] -> [0,2,3];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00999999999999 true true

[1,3,3] -> [3,3,1];
[3,2,3] -> [3,2,3];
[1] -> [1];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.00972999999999 true true

[2,0,1] -> [1,0,2];
[1,0,2] -> [2,0,1];
[0,3,0] -> [0,3,0];
[1,1,3] -> [3,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0103059999999 true true

[0,2,1] -> [1,2,0];
[0] -> [0];
[3,3,0] -> [0,3,3];
[1,2,0] -> [0,2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0099130000001 true true

[0] -> [0];
[2] -> [2];
[0,1,1] -> [1,1,0];
[3] -> [3];
[2,3] -> [3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.009996 false true

[2,1] -> [1,2];
[1,0,2] -> [2,0,1];
[0,3,0] -> [0,3,0];
[3,1] -> [1,3];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0106639999999 true true

[0,2] -> [2,0];
[3,0,3] -> [3,0,3];
[1,1] -> [1,1];
[2] -> [2];
[0,2,3] -> [3,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0133659999999 true true

[0,1] -> [1,0];
[0,1,2] -> [2,1,0];
[1,3] -> [3,1];
[1,3,2] -> [2,3,1];
[3,0,0] -> [0,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0109930000001 true true

[1,1] -> [1,1];
[2,3] -> [3,2];
[1] -> [1];
[0,1,2] -> [2,1,0];
[0,3,3] -> [3,3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01331 true true

[2,1] -> [1,2];
[0,3,0] -> [0,3,0];
[3,2,1] -> [1,2,3];
[0] -> [0];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0102810000001 true true

[2] -> [2];
[0] -> [0];
[0,2] -> [2,0];
[0,0,3] -> [3,0,0];
[2,1] -> [1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010254 true true

[0] -> [0];
[3] -> [3];
[0,1] -> [1,0];
[1,3,3] -> [3,3,1];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010057 false true

[0,0] -> [0,0];
[1,3] -> [3,1];
[3,1] -> [1,3];
[0] -> [0];
[1,1,0] -> [0,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010526 true true

[0,0,0] -> [0,0,0];
[3,1,0] -> [0,1,3];
[1,2,3] -> [3,2,1];
[0] -> [0];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0105699999999 true true

[3,1] -> [1,3];
[0,3] -> [3,0];
[3,2,3] -> [3,2,3];
[2] -> [2];
[3] -> [3];
[0,1] -> [1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0136809999999 true true

[2,3,0] -> [0,3,2];
[0,2] -> [2,0];
[0,0,1] -> [1,0,0];
[3,2] -> [2,3];
[2] -> [2];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010988 true true

[2] -> [2];
[2,3,0] -> [0,3,2];
[2,2,2] -> [2,2,2];
[3,1] -> [1,3];
[0,1,2] -> [2,1,0];
[3,3,2] -> [2,3,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.01153 true true

[3,3] -> [3,3];
[3,1] -> [1,3];
[3,2,2] -> [2,2,3];
[2,0] -> [0,2];
[0,0,2] -> [2,0,0];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011407 true true

[3,3,3] -> [3,3,3];
[1,2] -> [2,1];
[3,0] -> [0,3];
[0,2,1] -> [1,2,0];
[0] -> [0];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0110999999999 true true

[1] -> [1];
[1,0,0] -> [0,0,1];
[3,1] -> [1,3];
[2,1] -> [1,2];
[3,3,1] -> [1,3,3];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0111429999999 true true

[1,0] -> [0,1];
[3,2,3] -> [3,2,3];
[3,2,0] -> [0,2,3];
[1,2] -> [2,1];
[2] -> [2];
[2,1,0] -> [0,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0115029999999 true true

[3,1] -> [1,3];
[2,0] -> [0,2];
[1] -> [1];
[0] -> [0];
[2] -> [2];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.010573 false true

[0,3] -> [3,0];
[0,2,2] -> [2,2,0];
[0,3,1] -> [1,3,0];
[3,0,1] -> [1,0,3];
[3] -> [3];
[0,0] -> [0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0114719999999 true true

[3] -> [3];
[0,0,1] -> [1,0,0];
[1,1] -> [1,1];
[2,1] -> [1,2];
[1,0,1] -> [1,0,1];
[3,1,0] -> [0,1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011227 true true

[2] -> [2];
[2,3,3] -> [3,3,2];
[1,1] -> [1,1];
[2,3,0] -> [0,3,2];
[1,3,1] -> [1,3,1];
[1,2,1] -> [1,2,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012383 true true

[2] -> [2];
[1,2] -> [2,1];
[2,2] -> [2,2];
[0,2] -> [2,0];
[3,1] -> [1,3];
[1,0] -> [0,1];
[1,3] -> [3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011475 false true

[2,0] -> [0,2];
[3] -> [3];
[1] -> [1];
[0,1] -> [1,0];
[2] -> [2];
[0,1,1] -> [1,1,0];
[2,2] -> [2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0112670000001 false true

[0] -> [0];
[1,0] -> [0,1];
[0,1,0] -> [0,1,0];
[0,2] -> [2,0];
[3,1] -> [1,3];
[2,0,3] -> [3,0,2];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011982 true true

[3,3,1] -> [1,3,3];
[3,2,1] -> [1,2,3];
[1,2] -> [2,1];
[3,3] -> [3,3];
[3,2,3] -> [3,2,3];
[2,2,2] -> [2,2,2];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0174910000001 true true

[3,2,1] -> [1,2,3];
[2,0,1] -> [1,0,2];
[2] -> [2];
[1] -> [1];
[2,0,0] -> [0,0,2];
[3] -> [3];
[1,1,0] -> [0,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0119480000001 true true

[3] -> [3];
[0,0] -> [0,0];
[2] -> [2];
[1,0,2] -> [2,0,1];
[3,2] -> [2,3];
[0,0,3] -> [3,0,0];
[3,2,3] -> [3,2,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0117459999999 true true

[1,1] -> [1,1];
[2,2,1] -> [1,2,2];
[0,3] -> [3,0];
[3] -> [3];
[1,2] -> [2,1];
[0,2] -> [2,0];
[3,1,1] -> [1,1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.015543 true true

[3] -> [3];
[0] -> [0];
[3,3] -> [3,3];
[2,1] -> [1,2];
[0,3] -> [3,0];
[3,0] -> [0,3];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0112449999999 false true

[0] -> [0];
[1] -> [1];
[2] -> [2];
[0,0] -> [0,0];
[1,0] -> [0,1];
[3,3,2] -> [2,3,3];
[0,2] -> [2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011115 true true

[1,0,2] -> [2,0,1];
[0,1] -> [1,0];
[2,1] -> [1,2];
[1] -> [1];
[3] -> [3];
[3,0,1] -> [1,0,3];
[3,0,2] -> [2,0,3];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.016615 true true

[1] -> [1];
[1,2] -> [2,1];
[2,2,1] -> [1,2,2];
[2] -> [2];
[3] -> [3];
[3,0,1] -> [1,0,3];
[2,2,0] -> [0,2,2];
[3,0] -> [0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012305 true true

[2] -> [2];
[3,3] -> [3,3];
[1] -> [1];
[3,0,3] -> [3,0,3];
[2,0] -> [0,2];
[2,3] -> [3,2];
[2,3,3] -> [3,3,2];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.011949 true true

[1] -> [1];
[3] -> [3];
[2,0] -> [0,2];
[0,0,2] -> [2,0,0];
[1,0,0] -> [0,0,1];
[0,3,3] -> [3,3,0];
[2,3] -> [3,2];
[1,1] -> [1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0125519999999 true true

[0,1,2] -> [2,1,0];
[1,3] -> [3,1];
[0] -> [0];
[2,1,3] -> [3,1,2];
[2,1] -> [1,2];
[1,1] -> [1,1];
[0,0] -> [0,0];
[1,0] -> [0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0125760000001 true true

[1] -> [1];
[1,3] -> [3,1];
[0,2] -> [2,0];
[0,3,2] -> [2,3,0];
[0,0,0] -> [0,0,0];
[2] -> [2];
[2,3,1] -> [1,3,2];
[1,1] -> [1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0126749999999 true true

[2,3] -> [3,2];
[1,2,3] -> [3,2,1];
[3,2,1] -> [1,2,3];
[2,0] -> [0,2];
[2] -> [2];
[2,2,0] -> [0,2,2];
[0] -> [0];
[0,3] -> [3,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0125230000001 true true

[1] -> [1];
[3] -> [3];
[0,3,3] -> [3,3,0];
[2,2,1] -> [1,2,2];
[3,0] -> [0,3];
[0,1,2] -> [2,1,0];
[1,1] -> [1,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0121999999999 true true

[2] -> [2];
[2,3,0] -> [0,3,2];
[0,0,1] -> [1,0,0];
[0] -> [0];
[3,3] -> [3,3];
[3] -> [3];
[0,0] -> [0,0];
[0,1,2] -> [2,1,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012242 true true

[3] -> [3];
[0] -> [0];
[2] -> [2];
[2,3,2] -> [2,3,2];
[2,0] -> [0,2];
[1,2,1] -> [1,2,1];
[0,2,2] -> [2,2,0];
[1,2] -> [2,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0121859999999 true true

[1] -> [1];
[2,1,0] -> [0,1,2];
[3] -> [3];
[1,3,0] -> [0,3,1];
[0] -> [0];
[1,0,2] -> [2,0,1];
[3,2,1] -> [1,2,3];
[0,2,2] -> [2,2,0];
[1,0,3] -> [3,0,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0131919999999 true true

[2] -> [2];
[2,0] -> [0,2];
[0] -> [0];
[3] -> [3];
[0,2,2] -> [2,2,0];
[1,0,1] -> [1,0,1];
[0,2,1] -> [1,2,0];
[1,1,0] -> [0,1,1];
[2,1,2] -> [2,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0131369999999 true true

[1,2] -> [2,1];
[0,2,3] -> [3,2,0];
[1] -> [1];
[1,2,3] -> [3,2,1];
[2] -> [2];
[0,3,3] -> [3,3,0];
[0,2] -> [2,0];
[3] -> [3];
[3,0,1] -> [1,0,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0177140000001 true true

[3,3,0] -> [0,3,3];
[2,2] -> [2,2];
[3] -> [3];
[1,2] -> [2,1];
[0] -> [0];
[3,1,0] -> [0,1,3];
[0,0,0] -> [0,0,0];
[3,0] -> [0,3];
[1,1,1] -> [1,1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0131879999999 true true

[3] -> [3];
[1] -> [1];
[1,3,3] -> [3,3,1];
[2,2] -> [2,2];
[0,0] -> [0,0];
[2,1] -> [1,2];
[3,0] -> [0,3];
[2] -> [2];
[1,3] -> [3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.012645 false true

[3,2,3] -> [3,2,3];
[1,2,2] -> [2,2,1];
[0,1,1] -> [1,1,0];
[3,1] -> [1,3];
[2,2] -> [2,2];
[0,1] -> [1,0];
[3,2,1] -> [1,2,3];
[1] -> [1];
[0,0,0] -> [0,0,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013952 true true

[3] -> [3];
[2] -> [2];
[0,2] -> [2,0];
[3,3] -> [3,3];
[1] -> [1];
[0] -> [0];
[1,3,3] -> [3,3,1];
[2,2] -> [2,2];
[2,1] -> [1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0124209999999 false true

[3,2] -> [2,3];
[0,3] -> [3,0];
[2,2,1] -> [1,2,2];
[2,3,1] -> [1,3,2];
[0,1] -> [1,0];
[1,2] -> [2,1];
[2,0,3] -> [3,0,2];
[2,2] -> [2,2];
[3] -> [3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0181339999999 true true

[0,0] -> [0,0];
[3] -> [3];
[3,2] -> [2,3];
[1] -> [1];
[0,2,1] -> [1,2,0];
[0,3,2] -> [2,3,0];
[1,0] -> [0,1];
[1,2,0] -> [0,2,1];
[3,1] -> [1,3];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0127970000001 true true

[1] -> [1];
[3,2] -> [2,3];
[1,1] -> [1,1];
[0,2,3] -> [3,2,0];
[0,3] -> [3,0];
[3,0,1] -> [1,0,3];
[2] -> [2];
[0] -> [0];
[2,2,2] -> [2,2,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0127110000001 true true

[1] -> [1];
[3] -> [3];
[2,3] -> [3,2];
[2,3,2] -> [2,3,2];
[2,0,3] -> [3,0,2];
[1,2] -> [2,1];
[1,1,3] -> [3,1,1];
[0,0] -> [0,0];
[3,1,2] -> [2,1,3];
[1,3,1] -> [1,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.014314 true true

[3,0] -> [0,3];
[3] -> [3];
[1,2,3] -> [3,2,1];
[1,1,2] -> [2,1,1];
[3,3] -> [3,3];
[3,1,1] -> [1,1,3];
[2,1,2] -> [2,1,2];
[1,2] -> [2,1];
[2,3] -> [3,2];
[2,3,1] -> [1,3,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.014224 true true

[1,0] -> [0,1];
[3] -> [3];
[0] -> [0];
[0,1,0] -> [0,1,0];
[2] -> [2];
[1,2] -> [2,1];
[0,0] -> [0,0];
[3,2,2] -> [2,2,3];
[0,3,3] -> [3,3,0];
[1] -> [1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0131289999999 true true

[0,3] -> [3,0];
[2] -> [2];
[0] -> [0];
[1,2,2] -> [2,2,1];
[3,3] -> [3,3];
[3,1,2] -> [2,1,3];
[1] -> [1];
[1,3] -> [3,1];
[1,2] -> [2,1];
[1,3,2] -> [2,3,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0133269999999 true true

[0] -> [0];
[2,0,2] -> [2,0,2];
[0,2,3] -> [3,2,0];
[0,2,0] -> [0,2,0];
[2,2,3] -> [3,2,2];
[0,0,3] -> [3,0,0];
[3,2,1] -> [1,2,3];
[1,1] -> [1,1];
[2,2] -> [2,2];
[0,2,2] -> [2,2,0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0145399999999 true true

[3,2,3] -> [3,2,3];
[0,3,3] -> [3,3,0];
[2] -> [2];
[2,3] -> [3,2];
[0,2] -> [2,0];
[1,2,2] -> [2,2,1];
[0] -> [0];
[1] -> [1];
[3,2,1] -> [1,2,3];
[2,1,2] -> [2,1,2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013643 true true

[0,0] -> [0,0];
[2,3] -> [3,2];
[3,1] -> [1,3];
[3] -> [3];
[1,0] -> [0,1];
[3,3] -> [3,3];
[3,1,2] -> [2,1,3];
[1,1,1] -> [1,1,1];
[1,3,0] -> [0,3,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.0138870000001 true true

[2,2] -> [2,2];
[2] -> [2];
[0,2] -> [2,0];
[1,1,1] -> [1,1,1];
[2,3] -> [3,2];
[1,2,2] -> [2,2,1];
[1] -> [1];
[0] -> [0];
[3,3,3] -> [3,3,3];
[1,1] -> [1,1];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      snoc (#2.2 y1) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013717 false true

[2,3] -> [3,2];
[0,3,2] -> [2,3,0];
[3,1] -> [1,3];
[0,0] -> [0,0];
[2,1,2] -> [2,1,2];
[1,0,1] -> [1,0,1];
[2,2,1] -> [1,2,2];
[2,2] -> [2,2];
[3,3,0] -> [0,3,3];
[2] -> [2];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.014234 true true

[3,3] -> [3,3];
[1] -> [1];
[0,0,1] -> [1,0,0];
[2] -> [2];
[0,0] -> [0,0];
[3,2,3] -> [3,2,3];
[1,3] -> [3,1];
[0,1,0] -> [0,1,0];
[1,1] -> [1,1];
[0] -> [0];
[] -> [];

=================================
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
(\snoc -> (\list_rev_snoc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_rev_snoc = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      snoc (list_rev_snoc (#2.2 y1)) (#2.1 y1) in list_rev_snoc) : NatList -> NatList))
  ((let snoc = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      Cons (#2.1 p, snoc (#2.2 p) n) in snoc) : NatList -> Nat -> NatList)
0.013418 true true

