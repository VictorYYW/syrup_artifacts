list_inc
[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010579 true false

[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010628 true false

[1,3,3] -> [2,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0107720000001 true false

[3,1,2] -> [4,2,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010755 true false

[0,2] -> [1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0107330000001 true false

[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0104289999999 true false

[2,1] -> [3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0108640000001 true false

[1,2,1] -> [2,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0106740000001 true false

[0,0] -> [1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0105920000001 true false

[0,0,1] -> [1,1,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010769 true false

[1] -> [2];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011049 true false

[1] -> [2];
[0,3,1] -> [1,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0111489999999 true false

[1,1,1] -> [2,2,2];
[2,1,0] -> [3,2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011272 true false

[2] -> [3];
[1,1] -> [2,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0109110000001 true false

[1] -> [2];
[3,3,0] -> [4,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0110609999999 true false

[3,0,1] -> [4,1,2];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011129 true false

[0,2] -> [1,3];
[2,3,0] -> [3,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012682 true false

[1,2] -> [2,3];
[2,3,0] -> [3,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01127 true false

[0] -> [1];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010806 true false

[3] -> [4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011121 true false

[2,1] -> [3,2];
[3] -> [4];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011207 true false

[3] -> [4];
[0,0,2] -> [1,1,3];
[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0115679999999 true false

[2] -> [3];
[3] -> [4];
[1,2] -> [2,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0112899999999 true false

[1,3] -> [2,4];
[3,2,3] -> [4,3,4];
[2,1] -> [3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0117660000001 true false

[1] -> [2];
[1,0,3] -> [2,1,4];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0116829999999 true false

[1] -> [2];
[2] -> [3];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011225 true false

[1,3,1] -> [2,4,2];
[3,1,3] -> [4,2,4];
[3,3,0] -> [4,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0121340000001 true false

[3,0] -> [4,1];
[0,2] -> [1,3];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0115390000001 true false

[0,2,2] -> [1,3,3];
[0,2,3] -> [1,3,4];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0116640000001 true false

[3,1,3] -> [4,2,4];
[3,2] -> [4,3];
[0,0,3] -> [1,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012146 true false

[2,0,0] -> [3,1,1];
[1,2] -> [2,3];
[2,1] -> [3,2];
[1,1,1] -> [2,2,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012561 true false

[1,1,0] -> [2,2,1];
[3] -> [4];
[1] -> [2];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011733 true false

[2] -> [3];
[3,3] -> [4,4];
[0] -> [1];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0115760000001 true false

[1,0] -> [2,1];
[2,1] -> [3,2];
[2,0] -> [3,1];
[3,2,0] -> [4,3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0122799999999 true false

[1,0] -> [2,1];
[0,2,0] -> [1,3,1];
[3] -> [4];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0119569999999 true false

[1] -> [2];
[1,2] -> [2,3];
[2,0] -> [3,1];
[2,1,3] -> [3,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0120939999999 true false

[0] -> [1];
[1,2,0] -> [2,3,1];
[3,1,2] -> [4,2,3];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0123149999999 true false

[0] -> [1];
[3] -> [4];
[0,2] -> [1,3];
[3,3] -> [4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.011749 true false

[1,3] -> [2,4];
[0,0,3] -> [1,1,4];
[3,1] -> [4,2];
[2,3] -> [3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0121819999999 true false

[0] -> [1];
[3] -> [4];
[0,1,1] -> [1,2,2];
[3,3,3] -> [4,4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0119609999999 true false

[0,3,0] -> [1,4,1];
[0,0] -> [1,1];
[1] -> [2];
[1,2,2] -> [2,3,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01279 true false

[0,0] -> [1,1];
[3] -> [4];
[2] -> [3];
[1,1] -> [2,2];
[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012215 true false

[1,2] -> [2,3];
[1] -> [2];
[1,0,3] -> [2,1,4];
[2] -> [3];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012307 true false

[0,3] -> [1,4];
[1,3,3] -> [2,4,4];
[0,0] -> [1,1];
[3,2,2] -> [4,3,3];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0127890000001 true false

[1] -> [2];
[0,2,0] -> [1,3,1];
[1,0,1] -> [2,1,2];
[3,2] -> [4,3];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0126720000001 true false

[3,1,3] -> [4,2,4];
[0,0] -> [1,1];
[1] -> [2];
[1,1,2] -> [2,2,3];
[2,3,2] -> [3,4,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0128790000001 true false

[1] -> [2];
[2,0,3] -> [3,1,4];
[0] -> [1];
[3,3,0] -> [4,4,1];
[1,3,1] -> [2,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012974 true false

[3,0,3] -> [4,1,4];
[0,1] -> [1,2];
[2,2] -> [3,3];
[3] -> [4];
[0,0,0] -> [1,1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0128119999999 true false

[0,2,2] -> [1,3,3];
[3,2,2] -> [4,3,3];
[0,3] -> [1,4];
[0,1,3] -> [1,2,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012939 true false

[2,3] -> [3,4];
[0] -> [1];
[1,0] -> [2,1];
[2,2,2] -> [3,3,3];
[2,3,0] -> [3,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012659 true false

[1,3,1] -> [2,4,2];
[1,0] -> [2,1];
[2,2,2] -> [3,3,3];
[2,2,1] -> [3,3,2];
[1,0,0] -> [2,1,1];
[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013841 true false

[1,1] -> [2,2];
[1,1,2] -> [2,2,3];
[0,3,0] -> [1,4,1];
[0] -> [1];
[2,2] -> [3,3];
[2,0,3] -> [3,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013422 true false

[0,3] -> [1,4];
[0,0] -> [1,1];
[3] -> [4];
[2] -> [3];
[1,3] -> [2,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01271 true false

[3] -> [4];
[1,2,3] -> [2,3,4];
[2] -> [3];
[2,2,2] -> [3,3,3];
[2,3] -> [3,4];
[3,1] -> [4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0130590000001 true false

[1] -> [2];
[0] -> [1];
[2,3,2] -> [3,4,3];
[3] -> [4];
[3,1,2] -> [4,2,3];
[3,2,0] -> [4,3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0128910000001 true false

[2] -> [3];
[0,0,0] -> [1,1,1];
[0,0] -> [1,1];
[2,3,1] -> [3,4,2];
[2,2] -> [3,3];
[0,1] -> [1,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01315 true false

[1,0,0] -> [2,1,1];
[0,0] -> [1,1];
[1,3,2] -> [2,4,3];
[2] -> [3];
[3,3] -> [4,4];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0133350000001 true false

[2] -> [3];
[2,0,3] -> [3,1,4];
[1,0,0] -> [2,1,1];
[2,0] -> [3,1];
[0,1,3] -> [1,2,4];
[1,1,0] -> [2,2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013543 true false

[3,1] -> [4,2];
[1,1,3] -> [2,2,4];
[3,0] -> [4,1];
[3] -> [4];
[0,0] -> [1,1];
[2,1] -> [3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0130859999999 true false

[0,0,1] -> [1,1,2];
[1] -> [2];
[2,2,2] -> [3,3,3];
[0,0] -> [1,1];
[1,3,2] -> [2,4,3];
[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0134539999999 true false

[3] -> [4];
[0,1,1] -> [1,2,2];
[0,0,1] -> [1,1,2];
[2,2] -> [3,3];
[0,2] -> [1,3];
[3,0] -> [4,1];
[2,0,2] -> [3,1,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0140289999999 true false

[2,2,3] -> [3,3,4];
[0,3] -> [1,4];
[3] -> [4];
[0,3,0] -> [1,4,1];
[0,0] -> [1,1];
[3,0] -> [4,1];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013696 true false

[3,1] -> [4,2];
[1,2] -> [2,3];
[2,1,2] -> [3,2,3];
[3] -> [4];
[2,3,2] -> [3,4,3];
[3,2] -> [4,3];
[3,3,0] -> [4,4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014021 true false

[1,1,0] -> [2,2,1];
[1] -> [2];
[3,2,2] -> [4,3,3];
[2,1,0] -> [3,2,1];
[0,3] -> [1,4];
[1,0,1] -> [2,1,2];
[2,0] -> [3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0141180000001 true false

[1] -> [2];
[3,1] -> [4,2];
[2] -> [3];
[1,0,3] -> [2,1,4];
[2,1,2] -> [3,2,3];
[3] -> [4];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0132980000001 true false

[1,3] -> [2,4];
[1,3,2] -> [2,4,3];
[0,2] -> [1,3];
[1,0] -> [2,1];
[2,1,1] -> [3,2,2];
[1,3,3] -> [2,4,4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01386 true false

[3,3,2] -> [4,4,3];
[3,2,3] -> [4,3,4];
[0,0] -> [1,1];
[1,2] -> [2,3];
[3] -> [4];
[1,3] -> [2,4];
[2,2,2] -> [3,3,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0139469999999 true false

[0,1,0] -> [1,2,1];
[2] -> [3];
[1,1] -> [2,2];
[0] -> [1];
[3,1] -> [4,2];
[1] -> [2];
[3,2,1] -> [4,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013461 true false

[3,1,0] -> [4,2,1];
[0,2,0] -> [1,3,1];
[3] -> [4];
[2,3,2] -> [3,4,3];
[0,0] -> [1,1];
[0,1] -> [1,2];
[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0137299999999 true false

[2,3] -> [3,4];
[3] -> [4];
[0] -> [1];
[0,1] -> [1,2];
[2,3,1] -> [3,4,2];
[2] -> [3];
[0,0,1] -> [1,1,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0134029999999 true false

[1] -> [2];
[2,0] -> [3,1];
[2] -> [3];
[3,1] -> [4,2];
[2,1] -> [3,2];
[0,3] -> [1,4];
[0,1,0] -> [1,2,1];
[1,2] -> [2,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014148 true false

[0,2] -> [1,3];
[1,3,2] -> [2,4,3];
[0,0] -> [1,1];
[2,0,3] -> [3,1,4];
[3,1,0] -> [4,2,1];
[1,2] -> [2,3];
[2,2,3] -> [3,3,4];
[2,2] -> [3,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015085 true false

[2,2,0] -> [3,3,1];
[2,2,2] -> [3,3,3];
[1,1] -> [2,2];
[0,2,0] -> [1,3,1];
[3] -> [4];
[1,0] -> [2,1];
[0,3,1] -> [1,4,2];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0143499999999 true false

[3,1] -> [4,2];
[0,1] -> [1,2];
[3,3,0] -> [4,4,1];
[3,1,0] -> [4,2,1];
[1,3,1] -> [2,4,2];
[1] -> [2];
[1,1] -> [2,2];
[2,2,0] -> [3,3,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014357 true false

[1,3] -> [2,4];
[1,3,1] -> [2,4,2];
[1,3,2] -> [2,4,3];
[1,1,3] -> [2,2,4];
[0,0] -> [1,1];
[0] -> [1];
[3] -> [4];
[1] -> [2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0139569999999 true false

[2,1,1] -> [3,2,2];
[1] -> [2];
[2] -> [3];
[3,1] -> [4,2];
[3,0,1] -> [4,1,2];
[1,2,0] -> [2,3,1];
[0] -> [1];
[0,2,1] -> [1,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014136 true false

[3,3] -> [4,4];
[3,0] -> [4,1];
[0,1,1] -> [1,2,2];
[3,2,0] -> [4,3,1];
[0,1] -> [1,2];
[2,1,3] -> [3,2,4];
[1,1,3] -> [2,2,4];
[0] -> [1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014694 true false

[1,3,2] -> [2,4,3];
[2,1] -> [3,2];
[1,1] -> [2,2];
[0,2] -> [1,3];
[3,1,0] -> [4,2,1];
[0,0,3] -> [1,1,4];
[2] -> [3];
[0,0,0] -> [1,1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014545 true false

[3,2] -> [4,3];
[0,2] -> [1,3];
[1,0,0] -> [2,1,1];
[1] -> [2];
[0] -> [1];
[2,2] -> [3,3];
[0,1,1] -> [1,2,2];
[3,2,3] -> [4,3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0142539999999 true false

[0] -> [1];
[2,2] -> [3,3];
[2,3,2] -> [3,4,3];
[2] -> [3];
[0,3,0] -> [1,4,1];
[2,1] -> [3,2];
[1] -> [2];
[0,3] -> [1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0138770000001 true false

[0,3,1] -> [1,4,2];
[1,2,3] -> [2,3,4];
[0,0] -> [1,1];
[2,0] -> [3,1];
[1,1,3] -> [2,2,4];
[1,2] -> [2,3];
[3,2] -> [4,3];
[0,1] -> [1,2];
[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015208 true false

[0,1] -> [1,2];
[1,0,1] -> [2,1,2];
[1] -> [2];
[0] -> [1];
[3] -> [4];
[0,1,1] -> [1,2,2];
[1,1] -> [2,2];
[1,3,3] -> [2,4,4];
[3,3] -> [4,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0144780000001 true false

[0] -> [1];
[1] -> [2];
[2] -> [3];
[2,0,1] -> [3,1,2];
[1,2,1] -> [2,3,2];
[3,1,0] -> [4,2,1];
[0,3,0] -> [1,4,1];
[0,1] -> [1,2];
[3,2] -> [4,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015247 true false

[0] -> [1];
[3,1] -> [4,2];
[2] -> [3];
[3] -> [4];
[1,2,0] -> [2,3,1];
[1,2] -> [2,3];
[1,0,0] -> [2,1,1];
[0,2] -> [1,3];
[0,0] -> [1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014371 true false

[3,1] -> [4,2];
[1,3,3] -> [2,4,4];
[0,3,2] -> [1,4,3];
[1,1,2] -> [2,2,3];
[3,3,0] -> [4,4,1];
[0,3,3] -> [1,4,4];
[0,1,0] -> [1,2,1];
[3,2] -> [4,3];
[0,1,3] -> [1,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0160410000001 true false

[2] -> [3];
[3] -> [4];
[3,2,2] -> [4,3,3];
[0] -> [1];
[1] -> [2];
[1,3,3] -> [2,4,4];
[3,1] -> [4,2];
[2,1] -> [3,2];
[1,0] -> [2,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014737 true false

[1] -> [2];
[0,0,1] -> [1,1,2];
[3,3] -> [4,4];
[0,3,2] -> [1,4,3];
[3] -> [4];
[2,2] -> [3,3];
[0,0] -> [1,1];
[3,1,2] -> [4,2,3];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.01512 true false

[2,3] -> [3,4];
[2,2] -> [3,3];
[1,1,3] -> [2,2,4];
[0] -> [1];
[1,1] -> [2,2];
[1,3,1] -> [2,4,2];
[3] -> [4];
[1] -> [2];
[1,3] -> [2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014956 true false

[2,2] -> [3,3];
[3,2] -> [4,3];
[0] -> [1];
[2] -> [3];
[1,3] -> [2,4];
[3] -> [4];
[1,0,0] -> [2,1,1];
[2,3] -> [3,4];
[3,1,1] -> [4,2,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.014647 true false

[3,2,0] -> [4,3,1];
[3,1,2] -> [4,2,3];
[1,0] -> [2,1];
[2] -> [3];
[3,3] -> [4,4];
[0] -> [1];
[3,2,3] -> [4,3,4];
[3,3,3] -> [4,4,4];
[2,3] -> [3,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015161 true false

[1,2] -> [2,3];
[2,0,2] -> [3,1,3];
[1,0,3] -> [2,1,4];
[3] -> [4];
[1,1,2] -> [2,2,3];
[3,1,3] -> [4,2,4];
[2,2,3] -> [3,3,4];
[3,1,2] -> [4,2,3];
[0,0,3] -> [1,1,4];
[2,0,0] -> [3,1,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0165919999999 true false

[1,3] -> [2,4];
[0] -> [1];
[0,2,0] -> [1,3,1];
[1,2] -> [2,3];
[3,2] -> [4,3];
[2,3] -> [3,4];
[2] -> [3];
[1,2,2] -> [2,3,3];
[1,1] -> [2,2];
[3] -> [4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0152849999999 true false

[3,1] -> [4,2];
[3,0,3] -> [4,1,4];
[1,0] -> [2,1];
[1,1,0] -> [2,2,1];
[3,2,3] -> [4,3,4];
[0,2] -> [1,3];
[0,3] -> [1,4];
[3,0] -> [4,1];
[0,1,2] -> [1,2,3];
[0,3,1] -> [1,4,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.016042 true false

[0] -> [1];
[1,0,1] -> [2,1,2];
[3,0] -> [4,1];
[1] -> [2];
[2,0] -> [3,1];
[3,2] -> [4,3];
[3,1,2] -> [4,2,3];
[3] -> [4];
[2,2] -> [3,3];
[2,0,1] -> [3,1,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015911 true false

[1] -> [2];
[0] -> [1];
[1,3] -> [2,4];
[2] -> [3];
[2,2,0] -> [3,3,1];
[0,3,0] -> [1,4,1];
[2,3,0] -> [3,4,1];
[3,0,3] -> [4,1,4];
[3,1,3] -> [4,2,4];
[2,0,3] -> [3,1,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0158980000001 true false

[1,0,3] -> [2,1,4];
[1,1,1] -> [2,2,2];
[1,0] -> [2,1];
[3,0,1] -> [4,1,2];
[0] -> [1];
[3,0] -> [4,1];
[0,0,0] -> [1,1,1];
[3,1,3] -> [4,2,4];
[2,0] -> [3,1];
[1,2,1] -> [2,3,2];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0161760000001 true false

[2] -> [3];
[2,3] -> [3,4];
[0,1,2] -> [1,2,3];
[1,2,0] -> [2,3,1];
[3,3] -> [4,4];
[1,2,1] -> [2,3,2];
[3,2,0] -> [4,3,1];
[0,3] -> [1,4];
[3] -> [4];
[3,0] -> [4,1];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0158710000001 true false

[1,3] -> [2,4];
[0,2,3] -> [1,3,4];
[0] -> [1];
[3,0,1] -> [4,1,2];
[3,1,1] -> [4,2,2];
[2,2,1] -> [3,3,2];
[3,1] -> [4,2];
[3] -> [4];
[2,2] -> [3,3];
[2] -> [3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0157670000001 true false

[1,3,2] -> [2,4,3];
[2,1,1] -> [3,2,2];
[2,2] -> [3,3];
[2,1] -> [3,2];
[2] -> [3];
[2,3,1] -> [3,4,2];
[1] -> [2];
[3,1] -> [4,2];
[3,0] -> [4,1];
[2,1,3] -> [3,2,4];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.015799 true false

[2,2] -> [3,3];
[2,0,2] -> [3,1,3];
[1,0] -> [2,1];
[3,1,1] -> [4,2,2];
[3,0] -> [4,1];
[1,2,2] -> [2,3,3];
[0,0,3] -> [1,1,4];
[3] -> [4];
[0] -> [1];
[1,2] -> [2,3];
[] -> [];

=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0156950000001 true false

