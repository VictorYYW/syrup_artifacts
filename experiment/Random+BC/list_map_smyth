list_map
(zero,[1]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0379399999999 false false

(zero,[0,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040915 false false

(inc,[3,3]) -> [4,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [4, 4] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0456099999999 false false

(zero,[0,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0410059999999 false false

(inc,[0]) -> [1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0395430000001 false false

(inc,[0]) -> [1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [1] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0393019999999 false false

(inc,[1]) -> [2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [2] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0392890000001 false false

(zero,[0,3,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0463090000001 false false

(inc,[2]) -> [3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [3] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039959 false false

(zero,[0,0]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_map = \f -> (\listMapFix -> listMapFix) ((let listMapFix = \xs -> xs in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.031072 false false

(inc,[1,2]) -> [2,3];
(zero,[1,2,0]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.134054 true true

(zero,[1,2]) -> [0,0];
(zero,[0,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0, 0] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0464449999999 false false

(zero,[0,0,0]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.189984 true true

(inc,[0]) -> [1];
(zero,[2,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042287 true true

(zero,[3]) -> [0];
(zero,[2,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0450619999999 false false

(inc,[1,1,0]) -> [2,2,1];
(inc,[2,2,1]) -> [3,3,2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.1316 false false

(zero,[2,1,1]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0878680000001 true true

(zero,[2,0]) -> [0,0];
(zero,[0]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, #2.2 y1) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons (0, listMapFix (#2.2 y1)) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0408600000001 false false

(inc,[2]) -> [3];
(inc,[0]) -> [1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [S (#2.1 y1)] in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0475710000001 false false

(zero,[1,2]) -> [0,0];
(inc,[2,0]) -> [3,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043298 true true

(zero,[1]) -> [0];
(inc,[2]) -> [3];
(inc,[0,0]) -> [1,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0402690000001 true true

(inc,[2,3,0]) -> [3,4,1];
(inc,[0,1]) -> [1,2];
(zero,[0,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0438630000001 true true

(zero,[2]) -> [0];
(inc,[1,2,3]) -> [2,3,4];
(inc,[2,2,2]) -> [3,3,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.039383 true true

(inc,[2,2,2]) -> [3,3,3];
(zero,[3]) -> [0];
(zero,[0,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042385 true true

(zero,[0]) -> [0];
(zero,[2,1]) -> [0,0];
(inc,[0,2]) -> [1,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042256 true true

(zero,[0]) -> [0];
(inc,[3,2,0]) -> [4,3,1];
(inc,[0,2]) -> [1,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.040602 true true

(inc,[1,3,2]) -> [2,4,3];
(zero,[3]) -> [0];
(zero,[0,1,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0419469999999 true true

(zero,[3,0,2]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[2,1,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0424089999999 true true

(zero,[0,2,0]) -> [0,0,0];
(zero,[0,0,0]) -> [0,0,0];
(inc,[3]) -> [4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042868 true true

(inc,[2,0,2]) -> [3,1,3];
(inc,[0,2]) -> [1,3];
(inc,[3,2]) -> [4,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( S (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0611570000001 false false

(zero,[1,3]) -> [0,0];
(inc,[2]) -> [3];
(inc,[3,3]) -> [4,4];
(zero,[3,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041011 true true

(zero,[3]) -> [0];
(zero,[0,0,0]) -> [0,0,0];
(zero,[0,0,1]) -> [0,0,0];
(inc,[2,0]) -> [3,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043218 true true

(inc,[3]) -> [4];
(zero,[1,1,1]) -> [0,0,0];
(zero,[1,0]) -> [0,0];
(zero,[3]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04195 true true

(inc,[2,3]) -> [3,4];
(inc,[1,3]) -> [2,4];
(inc,[3]) -> [4];
(zero,[1,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0413100000001 true true

(inc,[1,0,0]) -> [2,1,1];
(inc,[0,2]) -> [1,3];
(zero,[3,0]) -> [0,0];
(zero,[3,0,1]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0463139999999 true true

(inc,[0,0]) -> [1,1];
(inc,[1]) -> [2];
(zero,[2]) -> [0];
(inc,[1,0]) -> [2,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.041127 true true

(zero,[2]) -> [0];
(inc,[2]) -> [3];
(zero,[3,1,1]) -> [0,0,0];
(inc,[2,0,1]) -> [3,1,2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044236 true true

(inc,[0,0]) -> [1,1];
(zero,[3,1,0]) -> [0,0,0];
(inc,[0,3,3]) -> [1,4,4];
(inc,[2,0,2]) -> [3,1,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045787 true true

(zero,[2,1,0]) -> [0,0,0];
(zero,[0,0,2]) -> [0,0,0];
(inc,[0,2,2]) -> [1,3,3];
(inc,[3,2]) -> [4,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.049704 true true

(zero,[2,1]) -> [0,0];
(zero,[3,2,2]) -> [0,0,0];
(inc,[2]) -> [3];
(inc,[2,2,1]) -> [3,3,2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0441820000001 true true

(zero,[2]) -> [0];
(zero,[2,3,1]) -> [0,0,0];
(zero,[0,2]) -> [0,0];
(inc,[0,0,3]) -> [1,1,4];
(zero,[1,1,0]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0463159999999 true true

(zero,[0,2]) -> [0,0];
(inc,[0,3]) -> [1,4];
(inc,[1,1,1]) -> [2,2,2];
(inc,[3]) -> [4];
(zero,[1]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042502 true true

(zero,[1,3,0]) -> [0,0,0];
(zero,[0,1]) -> [0,0];
(inc,[3]) -> [4];
(zero,[1,2]) -> [0,0];
(inc,[2,0,0]) -> [3,1,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042582 true true

(zero,[1]) -> [0];
(inc,[1,1]) -> [2,2];
(inc,[3,3,3]) -> [4,4,4];
(zero,[3,0]) -> [0,0];
(zero,[1,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0424720000001 true true

(zero,[0,2,0]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(zero,[3,3]) -> [0,0];
(inc,[2,2]) -> [3,3];
(inc,[1]) -> [2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043602 true true

(inc,[2,2]) -> [3,3];
(zero,[2]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[2,2,2]) -> [3,3,3];
(inc,[2]) -> [3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043966 true true

(inc,[0,3,3]) -> [1,4,4];
(inc,[0]) -> [1];
(inc,[1,2,2]) -> [2,3,3];
(zero,[2]) -> [0];
(zero,[0]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.043406 true true

(inc,[1,2,1]) -> [2,3,2];
(inc,[3]) -> [4];
(inc,[2,2]) -> [3,3];
(zero,[1,0,1]) -> [0,0,0];
(zero,[3]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0440659999999 true true

(zero,[2,0]) -> [0,0];
(zero,[2,3]) -> [0,0];
(inc,[0,2]) -> [1,3];
(inc,[3,1]) -> [4,2];
(zero,[3,0,0]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0497720000001 true true

(zero,[2]) -> [0];
(zero,[0,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[3,0,2]) -> [0,0,0];
(inc,[0]) -> [1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.046374 true true

(zero,[0,0]) -> [0,0];
(zero,[1,2,0]) -> [0,0,0];
(zero,[2,1,0]) -> [0,0,0];
(zero,[1]) -> [0];
(inc,[2,1,1]) -> [3,2,2];
(inc,[3,0,3]) -> [4,1,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044216 true true

(inc,[2]) -> [3];
(zero,[2,3,3]) -> [0,0,0];
(zero,[0,2,3]) -> [0,0,0];
(zero,[3,3]) -> [0,0];
(inc,[3]) -> [4];
(inc,[0,3]) -> [1,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0441080000001 true true

(zero,[0,3,2]) -> [0,0,0];
(zero,[3,2,2]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[0,0]) -> [0,0];
(inc,[1]) -> [2];
(zero,[3,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04467 true true

(inc,[1]) -> [2];
(zero,[0,2]) -> [0,0];
(zero,[0]) -> [0];
(zero,[2,1,3]) -> [0,0,0];
(inc,[2,3]) -> [3,4];
(zero,[1,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0442149999999 true true

(zero,[3]) -> [0];
(zero,[1,3,3]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(zero,[1]) -> [0];
(inc,[3,0]) -> [4,1];
(inc,[3,3]) -> [4,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0457140000001 true true

(zero,[2,3]) -> [0,0];
(inc,[2,3]) -> [3,4];
(inc,[0,1,1]) -> [1,2,2];
(zero,[2,2,1]) -> [0,0,0];
(inc,[1,1,0]) -> [2,2,1];
(zero,[2,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.050747 true true

(zero,[1,1,3]) -> [0,0,0];
(inc,[2,0]) -> [3,1];
(zero,[3]) -> [0];
(inc,[3,2]) -> [4,3];
(inc,[3]) -> [4];
(zero,[1,0]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042954 true true

(zero,[3,1,0]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[1]) -> [2];
(inc,[1,0]) -> [2,1];
(inc,[3,2]) -> [4,3];
(zero,[0,2,0]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.042569 true true

(zero,[0]) -> [0];
(inc,[2,1,1]) -> [3,2,2];
(zero,[2,3,3]) -> [0,0,0];
(zero,[2]) -> [0];
(inc,[0,0,1]) -> [1,1,2];
(zero,[1,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0424559999999 true true

(inc,[3,1]) -> [4,2];
(zero,[1]) -> [0];
(inc,[3]) -> [4];
(zero,[0]) -> [0];
(zero,[2]) -> [0];
(zero,[2,2,1]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0446750000001 true true

(inc,[2]) -> [3];
(inc,[1,3,2]) -> [2,4,3];
(zero,[0]) -> [0];
(zero,[2,0]) -> [0,0];
(zero,[1,1,0]) -> [0,0,0];
(zero,[2,1,2]) -> [0,0,0];
(inc,[2,1,0]) -> [3,2,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044498 true true

(inc,[0,1]) -> [1,2];
(zero,[2,1]) -> [0,0];
(inc,[2,0,1]) -> [3,1,2];
(inc,[1,1]) -> [2,2];
(zero,[3,2,3]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044842 true true

(inc,[2,2]) -> [3,3];
(zero,[0,0,3]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[3,0,2]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(zero,[3,1,2]) -> [0,0,0];
(zero,[1]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0480640000001 true true

(zero,[3]) -> [0];
(inc,[2]) -> [3];
(zero,[2,3,0]) -> [0,0,0];
(inc,[0,2,2]) -> [1,3,3];
(inc,[0]) -> [1];
(zero,[1,2]) -> [0,0];
(zero,[1]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0449659999999 true true

(zero,[1,0]) -> [0,0];
(zero,[1,3,0]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(inc,[1,1]) -> [2,2];
(inc,[2,1,3]) -> [3,2,4];
(zero,[3,1]) -> [0,0];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045539 true true

(zero,[3,3]) -> [0,0];
(inc,[3]) -> [4];
(inc,[3,3,1]) -> [4,4,2];
(zero,[1,1]) -> [0,0];
(inc,[0]) -> [1];
(inc,[3,2]) -> [4,3];
(zero,[1,0,2]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.044907 true true

(inc,[3,1]) -> [4,2];
(zero,[2,2,2]) -> [0,0,0];
(inc,[1,3,1]) -> [2,4,2];
(inc,[2,1,0]) -> [3,2,1];
(inc,[3]) -> [4];
(zero,[0,0]) -> [0,0];
(inc,[2]) -> [3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0443359999999 true true

(inc,[0,1]) -> [1,2];
(zero,[0]) -> [0];
(inc,[1,0,1]) -> [2,1,2];
(inc,[1,2,0]) -> [2,3,1];
(inc,[1,1,2]) -> [2,2,3];
(inc,[0]) -> [1];
(zero,[2,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0445709999999 true true

(zero,[0,0,1]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[3,3]) -> [0,0];
(inc,[0,2,3]) -> [1,3,4];
(inc,[1,3]) -> [2,4];
(zero,[0]) -> [0];
(inc,[3,2,0]) -> [4,3,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0446850000001 true true

(inc,[3,1,1]) -> [4,2,2];
(inc,[0,0]) -> [1,1];
(zero,[1,3,1]) -> [0,0,0];
(zero,[2,2]) -> [0,0];
(zero,[2,1]) -> [0,0];
(inc,[2,2,1]) -> [3,3,2];
(zero,[2,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0534359999999 true true

(zero,[3]) -> [0];
(zero,[3,3,2]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[0,0]) -> [0,0];
(zero,[3,1]) -> [0,0];
(zero,[2,0,2]) -> [0,0,0];
(inc,[1,1]) -> [2,2];
(zero,[0,1,1]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0458860000001 true true

(zero,[1]) -> [0];
(zero,[3,3,3]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[1]) -> [2];
(inc,[2,0,3]) -> [3,1,4];
(inc,[2,2]) -> [3,3];
(zero,[0,3]) -> [0,0];
(inc,[3,1,3]) -> [4,2,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0457859999999 true true

(zero,[2]) -> [0];
(inc,[3,2,3]) -> [4,3,4];
(inc,[0]) -> [1];
(inc,[1,2]) -> [2,3];
(zero,[3]) -> [0];
(zero,[0]) -> [0];
(zero,[1,2,1]) -> [0,0,0];
(inc,[3,0,1]) -> [4,1,2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0459989999999 true true

(inc,[0,0]) -> [1,1];
(inc,[2]) -> [3];
(zero,[3]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[2,1]) -> [3,2];
(zero,[2,1]) -> [0,0];
(zero,[0]) -> [0];
(inc,[0,2,2]) -> [1,3,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045924 true true

(inc,[2,2,1]) -> [3,3,2];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc,[0,3,1]) -> [1,4,2];
(zero,[0]) -> [0];
(inc,[1,0,1]) -> [2,1,2];
(inc,[1,1,2]) -> [2,2,3];
(inc,[3,0,2]) -> [4,1,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.045633 true true

(zero,[3]) -> [0];
(zero,[1,1]) -> [0,0];
(zero,[3,2,1]) -> [0,0,0];
(zero,[1,3,1]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(zero,[3,2]) -> [0,0];
(inc,[2,3]) -> [3,4];
(zero,[0]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.05008 true true

(inc,[2]) -> [3];
(zero,[0,2,1]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[1,1]) -> [2,2];
(zero,[0,0]) -> [0,0];
(inc,[0]) -> [1];
(inc,[3,2,1]) -> [4,3,2];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.04612 true true

(zero,[3]) -> [0];
(inc,[3]) -> [4];
(inc,[0]) -> [1];
(zero,[0,3]) -> [0,0];
(inc,[2]) -> [3];
(zero,[2,0,2]) -> [0,0,0];
(zero,[0]) -> [0];
(inc,[2,1,0]) -> [3,2,1];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0458839999999 true true

(inc,[2,0]) -> [3,1];
(zero,[2,2,3]) -> [0,0,0];
(zero,[1,2,3]) -> [0,0,0];
(zero,[1,2]) -> [0,0];
(inc,[0,3]) -> [1,4];
(inc,[0,2,2]) -> [1,3,3];
(zero,[0,0,3]) -> [0,0,0];
(zero,[2,1,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0568989999999 true true

(inc,[0]) -> [1];
(zero,[0,0,2]) -> [0,0,0];
(zero,[1,1,1]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,3,3]) -> [0,0,0];
(inc,[0,1,2]) -> [1,2,3];
(inc,[0,2,1]) -> [1,3,2];
(inc,[3]) -> [4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0471399999999 true true

(zero,[1]) -> [0];
(inc,[0,2]) -> [1,3];
(inc,[3,2]) -> [4,3];
(zero,[0,0,0]) -> [0,0,0];
(inc,[1,3,1]) -> [2,4,2];
(zero,[0,2]) -> [0,0];
(inc,[1,1,2]) -> [2,2,3];
(zero,[0,0,2]) -> [0,0,0];
(zero,[0,3]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0487949999999 true true

(inc,[2]) -> [3];
(zero,[3,3]) -> [0,0];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(zero,[1]) -> [0];
(zero,[2,0,1]) -> [0,0,0];
(zero,[1,1,2]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(zero,[3,3,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0482440000001 true true

(zero,[1]) -> [0];
(inc,[3,2,2]) -> [4,3,3];
(inc,[2,2]) -> [3,3];
(zero,[3,3]) -> [0,0];
(inc,[0,0]) -> [1,1];
(zero,[0,3]) -> [0,0];
(zero,[1,2,2]) -> [0,0,0];
(zero,[0]) -> [0];
(zero,[3,0]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0482030000001 true true

(inc,[0,3,2]) -> [1,4,3];
(inc,[3,3,2]) -> [4,4,3];
(zero,[1,1,0]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[0]) -> [0];
(inc,[2,0]) -> [3,1];
(zero,[1,2]) -> [0,0];
(zero,[1]) -> [0];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0473219999999 true true

(zero,[3,3]) -> [0,0];
(zero,[2,1]) -> [0,0];
(inc,[3]) -> [4];
(inc,[2,3]) -> [3,4];
(zero,[3]) -> [0];
(zero,[1,0]) -> [0,0];
(inc,[3,3,1]) -> [4,4,2];
(zero,[3,1,3]) -> [0,0,0];
(zero,[0,2,2]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048252 true true

(zero,[1]) -> [0];
(zero,[2,2]) -> [0,0];
(zero,[1,2,1]) -> [0,0,0];
(zero,[2,1,3]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(inc,[0,2,2]) -> [1,3,3];
(inc,[0,2]) -> [1,3];
(zero,[1,2]) -> [0,0];
(inc,[0,3,2]) -> [1,4,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0554669999999 true true

(zero,[2]) -> [0];
(zero,[3,0,0]) -> [0,0,0];
(zero,[1]) -> [0];
(zero,[1,2,3]) -> [0,0,0];
(inc,[2,1]) -> [3,2];
(inc,[3]) -> [4];
(inc,[1,1,0]) -> [2,2,1];
(inc,[1,1]) -> [2,2];
(inc,[0,3]) -> [1,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047607 true true

(inc,[1,1]) -> [2,2];
(zero,[0,0,0]) -> [0,0,0];
(inc,[0,2]) -> [1,3];
(inc,[1,0,2]) -> [2,1,3];
(zero,[0]) -> [0];
(inc,[0,3]) -> [1,4];
(zero,[2,2]) -> [0,0];
(inc,[0]) -> [1];
(zero,[2,1,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0475019999999 true true

(zero,[1]) -> [0];
(inc,[2,3,3]) -> [3,4,4];
(inc,[0]) -> [1];
(zero,[0,1]) -> [0,0];
(inc,[2]) -> [3];
(inc,[0,3]) -> [1,4];
(inc,[3,3]) -> [4,4];
(inc,[3]) -> [4];
(inc,[0,2,2]) -> [1,3,3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0467550000001 true true

(zero,[3,2,0]) -> [0,0,0];
(zero,[2,1,2]) -> [0,0,0];
(inc,[1,1,1]) -> [2,2,2];
(zero,[0]) -> [0];
(inc,[0,0,2]) -> [1,1,3];
(inc,[3,1,0]) -> [4,2,1];
(inc,[0]) -> [1];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0471259999999 true true

(inc,[2,3]) -> [3,4];
(zero,[3]) -> [0];
(inc,[3,1]) -> [4,2];
(inc,[0,1]) -> [1,2];
(inc,[3,1,3]) -> [4,2,4];
(zero,[3,1]) -> [0,0];
(zero,[0,1]) -> [0,0];
(inc,[2,3,2]) -> [3,4,3];
(inc,[2]) -> [3];
(inc,[1]) -> [2];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0481259999999 true true

(inc,[2]) -> [3];
(zero,[3,2]) -> [0,0];
(zero,[1]) -> [0];
(inc,[2,2,3]) -> [3,3,4];
(inc,[0]) -> [1];
(zero,[1,0,0]) -> [0,0,0];
(inc,[0,0,3]) -> [1,1,4];
(inc,[2,0,2]) -> [3,1,3];
(zero,[1,0]) -> [0,0];
(inc,[0,3]) -> [1,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047883 true true

(zero,[3,0,1]) -> [0,0,0];
(inc,[3,0]) -> [4,1];
(inc,[0,2]) -> [1,3];
(inc,[1]) -> [2];
(zero,[3,2,2]) -> [0,0,0];
(inc,[3,1]) -> [4,2];
(inc,[2,3,2]) -> [3,4,3];
(zero,[3]) -> [0];
(inc,[0,1]) -> [1,2];
(inc,[2]) -> [3];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0488399999999 true true

(zero,[0]) -> [0];
(inc,[0]) -> [1];
(zero,[2,2,0]) -> [0,0,0];
(zero,[0,3,0]) -> [0,0,0];
(inc,[3,1,0]) -> [4,2,1];
(zero,[3,1]) -> [0,0];
(zero,[2,3,2]) -> [0,0,0];
(zero,[3]) -> [0];
(zero,[2,3,3]) -> [0,0,0];
(inc,[2,2,3]) -> [3,3,4];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048972 true true

(inc,[0,2]) -> [1,3];
(zero,[1]) -> [0];
(zero,[3]) -> [0];
(inc,[3,3,0]) -> [4,4,1];
(inc,[1,3]) -> [2,4];
(zero,[2,1]) -> [0,0];
(inc,[3,1]) -> [4,2];
(inc,[1]) -> [2];
(inc,[3]) -> [4];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0481580000001 true true

(inc,[0,3,3]) -> [1,4,4];
(inc,[2,1]) -> [3,2];
(zero,[1,0,1]) -> [0,0,0];
(zero,[3,1]) -> [0,0];
(inc,[2,3]) -> [3,4];
(zero,[1,3,3]) -> [0,0,0];
(inc,[3,3]) -> [4,4];
(inc,[1]) -> [2];
(zero,[3]) -> [0];
(zero,[3,2]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048233 true true

(inc,[0,2]) -> [1,3];
(zero,[2,2,3]) -> [0,0,0];
(inc,[0]) -> [1];
(zero,[0]) -> [0];
(inc,[1,2]) -> [2,3];
(inc,[0,1,1]) -> [1,2,2];
(zero,[0,1]) -> [0,0];
(inc,[3,2]) -> [4,3];
(inc,[0,1,2]) -> [1,2,3];
(zero,[0,3,3]) -> [0,0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048485 true true

(zero,[1,2,2]) -> [0,0,0];
(inc,[1]) -> [2];
(inc,[2]) -> [3];
(inc,[3,1,2]) -> [4,2,3];
(zero,[3]) -> [0];
(zero,[2]) -> [0];
(inc,[2,0]) -> [3,1];
(inc,[3,2]) -> [4,3];
(inc,[2,1]) -> [3,2];
(zero,[0,0]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.047918 true true

(zero,[2,3]) -> [0,0];
(zero,[1]) -> [0];
(inc,[0]) -> [1];
(zero,[3,2,3]) -> [0,0,0];
(inc,[3]) -> [4];
(zero,[3]) -> [0];
(zero,[0,1]) -> [0,0];
(zero,[2,3,1]) -> [0,0,0];
(zero,[1,3]) -> [0,0];
(zero,[1,1]) -> [0,0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.048536 true true

(inc,[2,0]) -> [3,1];
(zero,[0]) -> [0];
(inc,[3,0,1]) -> [4,1,2];
(inc,[2,2]) -> [3,3];
(zero,[3,0,3]) -> [0,0,0];
(inc,[3]) -> [4];
(inc,[2]) -> [3];
(zero,[3,0]) -> [0,0];
(zero,[1,3,1]) -> [0,0,0];
(zero,[2]) -> [0];
(inc, []) -> [];

=================================
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
(\zero -> (\inc -> (\list_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_map = \f -> (\listMapFix -> listMapFix)
    ((let listMapFix = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( f (#2.1 y1)
          , listMapFix (#2.2 y1)
          ) in listMapFix) : NatList -> NatList) in list_map) : (Nat -> Nat) -> NatList -> NatList)) ((let inc = \n -> S n in inc) : Nat -> Nat)) ((let zero = \n -> 0 in zero) : Nat -> Nat)
0.0481649999999 true true

