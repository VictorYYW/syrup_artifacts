list_take
(1,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00379700000008 false false

(3,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00381599999992 false false

(3,[1,1,0]) -> [1,1,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00380599999994 false false

(0,[2,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00376899999992 false false

(2,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00373500000001 false false

(1,[2,2,0]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (S n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00731500000006 false false

(3,[1,3]) -> [1,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00388799999996 false false

(0,[3]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.00388900000007 false false

(1,[2,2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      #2.2 y1 in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (S n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00735899999995 false false

(0,[0,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> [] in list_take) : Nat -> NatList -> NatList)
0.003874 false false

(1,[0]) -> [0];
(3,[2,1,0]) -> [2,1,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00388399999997 false false

(0,[3]) -> [];
(2,[2,3]) -> [2,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00676900000008 false false

(1,[2,1]) -> [2];
(1,[1,0]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.00703300000009 false false

(0,[1,3,2]) -> [];
(2,[2,3,1]) -> [2,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [n, S n] in list_take) : Nat -> NatList -> NatList)
0.00697700000001 false false

(1,[2]) -> [2];
(3,[3,2]) -> [3,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00388999999996 false false

(0,[1]) -> [];
(3,[1,2,2]) -> [1,2,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.0072459999999 false false

(0,[1]) -> [];
(2,[2,2]) -> [2,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (2, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00717400000008 false false

(3,[2,2,1]) -> [2,2,1];
(1,[0,0,2]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          Cons (S y2, #2.2 y1) in list_take) : Nat -> NatList -> NatList)
0.0286430000001 false false

(0,[0,0]) -> [];
(1,[1,3]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00627299999996 false false

(1,[1,1,0]) -> [1];
(1,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
0.00746200000003 false false

(1,[2,2]) -> [2];
(3,[2]) -> [2];
(3,[2,0,1]) -> [2,0,1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [S n]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case y1 of
        Z y2 -> 
          Cons (S n, list_take y1 xs)

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
0.0620699999999 false false

(2,[0,0]) -> [0,0];
(0,[2,0,2]) -> [];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (0, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.0062660000001 false false

(2,[3,1]) -> [3,1];
(1,[3,0]) -> [3];
(0,[0,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.032164 true true

(3,[2,2]) -> [2,2];
(0,[3]) -> [];
(0,[1,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00672099999997 false false

(3,[2,1,3]) -> [2,1,3];
(1,[1]) -> [1];
(1,[0,0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          #2.2 y1

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
0.0277610000001 false false

(0,[3,0,3]) -> [];
(0,[3]) -> [];
(3,[2,0,0]) -> [2,0,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00676900000008 false false

(1,[0,2,1]) -> [0];
(1,[1,3,3]) -> [1];
(0,[0,2,2]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.023005 false false

(0,[3,0]) -> [];
(1,[2,3]) -> [2];
(3,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0285429999999 false true

(3,[2,1]) -> [2,1];
(0,[1,2]) -> [];
(1,[1,0,1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0352379999999 true true

(0,[2,3,2]) -> [];
(3,[0,2]) -> [0,2];
(3,[3,0,2]) -> [3,0,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00660599999992 false false

(1,[2,3]) -> [2];
(2,[0,1,1]) -> [0,1];
(3,[3,2]) -> [3,2];
(2,[1]) -> [1];
(0, []) -> [];

=================================
None
(3,[0,2]) -> [0,2];
(1,[0]) -> [0];
(1,[3]) -> [3];
(2,[3,0]) -> [3,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00398100000007 false false

(0,[3,2]) -> [];
(0,[0,0,1]) -> [];
(1,[3,3]) -> [3];
(0,[3,3]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [S (S n)] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (S (S n), list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00654600000007 false false

(2,[0,0,1]) -> [0,0];
(2,[2]) -> [2];
(2,[0]) -> [0];
(1,[3]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          [0, 0] in list_take) : Nat -> NatList -> NatList)
0.0266369999999 false false

(2,[3,2,1]) -> [3,2];
(0,[3,1]) -> [];
(0,[1,0,2]) -> [];
(0,[1,3,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      [S n, n] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      Cons (S n, list_take y1 xs) in list_take) : Nat -> NatList -> NatList)
0.00735600000007 false false

(2,[3,1]) -> [3,1];
(2,[2,3]) -> [2,3];
(3,[2,0]) -> [2,0];
(1,[3]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00399999999991 false false

(3,[2,3,2]) -> [2,3,2];
(2,[3]) -> [3];
(1,[2]) -> [2];
(0,[0]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00641999999993 false false

(1,[0,0,1]) -> [0];
(1,[1]) -> [1];
(0,[2]) -> [];
(0,[3]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.024893 false false

(3,[1,0,2]) -> [1,0,2];
(2,[2,0]) -> [2,0];
(2,[1]) -> [1];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.0109749999999 false false

(3,[1,1]) -> [1,1];
(1,[0]) -> [0];
(0,[3]) -> [];
(1,[0,0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0354219999999 true true

(0,[0]) -> [];
(1,[0,2]) -> [0];
(1,[1,3,3]) -> [1];
(0,[1,3,2]) -> [];
(1,[3,1]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.0263600000001 false false

(0,[1,1,3]) -> [];
(0,[0,1,0]) -> [];
(1,[2]) -> [2];
(0,[2,1,3]) -> [];
(2,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.0103879999999 false false

(3,[0,1,0]) -> [0,1,0];
(0,[3,2,2]) -> [];
(0,[1,2,2]) -> [];
(3,[3]) -> [3];
(0,[0,3,0]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.0062069999999 false false

(0,[1,0]) -> [];
(1,[2]) -> [2];
(2,[0]) -> [0];
(1,[2,1,2]) -> [2];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          #2.2 y2 in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0421220000001 false true

(2,[1,0]) -> [1,0];
(2,[1,2]) -> [1,2];
(2,[3]) -> [3];
(1,[1]) -> [1];
(1,[3]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00403299999994 false false

(1,[2,0,1]) -> [2];
(2,[0]) -> [0];
(2,[3,0,1]) -> [3,0];
(2,[2]) -> [2];
(0,[2]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0407729999999 true true

(3,[3]) -> [3];
(3,[2,3]) -> [2,3];
(1,[3]) -> [3];
(1,[2]) -> [2];
(2,[2,3]) -> [2,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00401000000011 false false

(0,[2]) -> [];
(1,[3,1,1]) -> [3];
(1,[1]) -> [1];
(0,[2,3,1]) -> [];
(0,[3]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 xs) in list_take) : Nat -> NatList -> NatList)
0.0287510000001 false false

(1,[0,3]) -> [0];
(3,[0,0,3]) -> [0,0,3];
(0,[0]) -> [];
(2,[0,0]) -> [0,0];
(0,[2]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      case xs of
        Nil y2 -> 
          []

        Cons y2 -> 
          []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0484100000001 false true

(1,[3,3]) -> [3];
(0,[3]) -> [];
(3,[1,0]) -> [1,0];
(1,[1,0]) -> [1];
(0,[2,3]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0601919999999 true true

(2,[2,2]) -> [2,2];
(2,[1,3]) -> [1,3];
(3,[0,1,0]) -> [0,1,0];
(2,[3,0]) -> [3,0];
(0,[3,0]) -> [];
(2,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00610499999993 false false

(1,[2,3]) -> [2];
(0,[1]) -> [];
(1,[3,3,2]) -> [3];
(2,[2]) -> [2];
(0,[2,3,3]) -> [];
(3,[3,1,1]) -> [3,1,1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.066842 true true

(3,[0,0]) -> [0,0];
(2,[3]) -> [3];
(2,[3,0,2]) -> [3,0];
(0,[2]) -> [];
(2,[3,0]) -> [3,0];
(3,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0347039999999 true true

(0,[1,0,1]) -> [];
(0,[3,0,2]) -> [];
(2,[2,2,2]) -> [2,2];
(3,[0]) -> [0];
(3,[3]) -> [3];
(0,[1,2,0]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0286040000001 true true

(1,[0,3,1]) -> [0];
(3,[3]) -> [3];
(2,[1]) -> [1];
(3,[2]) -> [2];
(2,[1,2]) -> [1,2];
(1,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
0.0467200000001 false false

(3,[3,1]) -> [3,1];
(1,[3,2]) -> [3];
(1,[2,0,3]) -> [2];
(0,[1]) -> [];
(3,[2,2,2]) -> [2,2,2];
(3,[3,1,2]) -> [3,1,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.130966 true true

(2,[0,2]) -> [0,2];
(3,[0,1]) -> [0,1];
(2,[1,0]) -> [1,0];
(1,[1]) -> [1];
(2,[2]) -> [2];
(3,[0,3,2]) -> [0,3,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_take = \n -> \xs -> xs in list_take) : Nat -> NatList -> NatList)
0.00406599999997 false false

(0,[2]) -> [];
(3,[0,1,2]) -> [0,1,2];
(1,[2]) -> [2];
(2,[3,1,2]) -> [3,1];
(2,[3,3,3]) -> [3,3];
(0,[1,0,0]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0436030000001 true true

(0,[3,3,1]) -> [];
(1,[0,1]) -> [0];
(3,[3]) -> [3];
(3,[0,1,1]) -> [0,1,1];
(0,[2,0,0]) -> [];
(0,[2,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.038585 false true

(1,[0,2]) -> [0];
(3,[3,2,2]) -> [3,2,2];
(0,[1,0,3]) -> [];
(0,[1]) -> [];
(3,[3,2,3]) -> [3,2,3];
(0,[1,2]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      case y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          xs in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.359478 false true

(1,[1]) -> [1];
(2,[3,2]) -> [3,2];
(3,[2,1]) -> [2,1];
(3,[2,0,1]) -> [2,0,1];
(3,[2]) -> [2];
(0,[2]) -> [];
(1,[0,0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0573890000001 true true

(3,[1]) -> [1];
(3,[0]) -> [0];
(3,[1,0]) -> [1,0];
(2,[1,0]) -> [1,0];
(2,[1]) -> [1];
(0,[1,0]) -> [];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00631199999998 false false

(3,[3,0]) -> [3,0];
(0,[3]) -> [];
(3,[0,3]) -> [0,3];
(1,[2,3,3]) -> [2];
(2,[0,3,1]) -> [0,3];
(0,[1,1,2]) -> [];
(0,[2,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.041878 true true

(1,[2,2,2]) -> [2];
(3,[0]) -> [0];
(3,[2,3]) -> [2,3];
(0,[3]) -> [];
(3,[1,2]) -> [1,2];
(3,[2,1,1]) -> [2,1,1];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0597049999999 true true

(0,[3,3]) -> [];
(0,[1]) -> [];
(2,[3]) -> [3];
(3,[2,0]) -> [2,0];
(2,[3,1]) -> [3,1];
(1,[1]) -> [1];
(1,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00630999999998 false false

(1,[0,1]) -> [0];
(0,[0,1]) -> [];
(2,[3,0,2]) -> [3,0];
(2,[3,1]) -> [3,1];
(0,[3]) -> [];
(3,[1,0,0]) -> [1,0,0];
(3,[3,3,0]) -> [3,3,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.071328 true true

(3,[2,1,0]) -> [2,1,0];
(3,[1,0,1]) -> [1,0,1];
(0,[1,1]) -> [];
(0,[0,1]) -> [];
(0,[0]) -> [];
(3,[1]) -> [1];
(2,[1,3,0]) -> [1,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0412530000001 true true

(1,[3,0]) -> [3];
(2,[1]) -> [1];
(0,[0,1]) -> [];
(0,[1,1]) -> [];
(2,[2,2,0]) -> [2,2];
(2,[0]) -> [0];
(2,[0,0]) -> [0,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.04168 true true

(3,[2]) -> [2];
(0,[1,0]) -> [];
(2,[1,3,2]) -> [1,3];
(0,[3]) -> [];
(0,[1,1]) -> [];
(2,[0,1,1]) -> [0,1];
(0,[3,3,0]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.029018 true true

(0,[2,0,0]) -> [];
(0,[0,0]) -> [];
(2,[0,1]) -> [0,1];
(3,[0,1,1]) -> [0,1,1];
(2,[2,1]) -> [2,1];
(3,[0,2]) -> [0,2];
(3,[0,0]) -> [0,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00673899999992 false false

(0,[2,1,3]) -> [];
(3,[3,0,0]) -> [3,0,0];
(1,[1]) -> [1];
(0,[3,3]) -> [];
(3,[0]) -> [0];
(0,[0]) -> [];
(3,[1,0,3]) -> [1,0,3];
(0,[3,2]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00658300000009 false false

(3,[2]) -> [2];
(0,[3,2,3]) -> [];
(3,[1,0]) -> [1,0];
(0,[1,0,3]) -> [];
(0,[1,1,1]) -> [];
(3,[2,0]) -> [2,0];
(2,[3,1,3]) -> [3,1];
(2,[0,2,2]) -> [0,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0455939999999 true true

(0,[1,3]) -> [];
(3,[1,2,2]) -> [1,2,2];
(0,[2,0,3]) -> [];
(1,[3]) -> [3];
(3,[3]) -> [3];
(3,[3,3,2]) -> [3,3,2];
(2,[3,1]) -> [3,1];
(2,[3,2,1]) -> [3,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0761319999999 true true

(0,[2,1]) -> [];
(1,[2,0,2]) -> [2];
(3,[1]) -> [1];
(0,[0,0,2]) -> [];
(3,[2,1,2]) -> [2,1,2];
(0,[2,0,2]) -> [];
(0,[0,3,0]) -> [];
(2,[0]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0398929999999 true true

(0,[1]) -> [];
(3,[3]) -> [3];
(0,[1,3,3]) -> [];
(2,[1,3,2]) -> [1,3];
(3,[2,0,0]) -> [2,0,0];
(1,[0,2,0]) -> [0];
(3,[0,3]) -> [0,3];
(0,[2,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.047949 true true

(3,[3,0]) -> [3,0];
(0,[0,3]) -> [];
(1,[1]) -> [1];
(0,[2,0,2]) -> [];
(3,[1]) -> [1];
(2,[2]) -> [2];
(0,[3,3,1]) -> [];
(1,[2,3,1]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.058509 true true

(1,[2,0]) -> [2];
(2,[3]) -> [3];
(1,[2,2,1]) -> [2];
(2,[0,1,3]) -> [0,1];
(2,[2]) -> [2];
(1,[3]) -> [3];
(0,[1]) -> [];
(2,[3,1]) -> [3,1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.06836 true true

(3,[3,2]) -> [3,2];
(3,[0,2]) -> [0,2];
(0,[1]) -> [];
(0,[0,3,3]) -> [];
(1,[0,1,0]) -> [0];
(3,[1,0]) -> [1,0];
(2,[3,3,2]) -> [3,3];
(2,[3,3]) -> [3,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0526159999999 true true

(3,[1]) -> [1];
(1,[0,0]) -> [0];
(2,[1]) -> [1];
(3,[3]) -> [3];
(3,[2]) -> [2];
(0,[3]) -> [];
(1,[3,0]) -> [3];
(2,[0,2]) -> [0,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0565079999999 true true

(3,[1]) -> [1];
(2,[0,0,1]) -> [0,0];
(0,[2,2]) -> [];
(1,[2,0,2]) -> [2];
(3,[0]) -> [0];
(0,[2,1,2]) -> [];
(1,[2]) -> [2];
(2,[2,3]) -> [2,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.074912 true true

(1,[1]) -> [1];
(2,[0,0]) -> [0,0];
(1,[3,2,1]) -> [3];
(1,[1,0]) -> [1];
(2,[1,1]) -> [1,1];
(2,[0]) -> [0];
(1,[0,0,1]) -> [0];
(0,[3,3,3]) -> [];
(1,[1,1,2]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0486000000001 true true

(3,[2,3,1]) -> [2,3,1];
(2,[0]) -> [0];
(3,[1,0]) -> [1,0];
(3,[1,1,0]) -> [1,1,0];
(3,[2]) -> [2];
(3,[0,3]) -> [0,3];
(1,[0,0]) -> [0];
(0,[1,0,3]) -> [];
(1,[3]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0567229999999 true true

(1,[2,1,2]) -> [2];
(0,[1]) -> [];
(1,[1]) -> [1];
(0,[0]) -> [];
(2,[2,2,3]) -> [2,2];
(3,[2,3]) -> [2,3];
(3,[2,3,1]) -> [2,3,1];
(2,[0,0]) -> [0,0];
(1,[1,3,1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0565819999999 true true

(0,[3,0]) -> [];
(0,[0,2]) -> [];
(3,[1]) -> [1];
(0,[1]) -> [];
(1,[0,1,3]) -> [0];
(1,[2,1]) -> [2];
(2,[2]) -> [2];
(0,[0,0]) -> [];
(1,[0,1]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          [#2.1 y1] in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.045987 false true

(2,[0,3]) -> [0,3];
(2,[3]) -> [3];
(2,[0,2,0]) -> [0,2];
(3,[3]) -> [3];
(1,[2,2]) -> [2];
(1,[0]) -> [0];
(2,[3,1,1]) -> [3,1];
(1,[3]) -> [3];
(2,[1]) -> [1];
(0, []) -> [];

=================================
None
(3,[1,0]) -> [1,0];
(0,[0]) -> [];
(1,[2,2]) -> [2];
(2,[3]) -> [3];
(3,[3,2,0]) -> [3,2,0];
(1,[1,2]) -> [1];
(3,[1,2]) -> [1,2];
(3,[0]) -> [0];
(2,[3,2]) -> [3,2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.067648 true true

(0,[0,0]) -> [];
(3,[0]) -> [0];
(0,[0]) -> [];
(1,[2,0]) -> [2];
(3,[0,2]) -> [0,2];
(0,[1,0,0]) -> [];
(0,[3,0]) -> [];
(2,[0]) -> [0];
(1,[1,3,2]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0501119999999 true true

(3,[0,2]) -> [0,2];
(0,[0]) -> [];
(0,[3]) -> [];
(3,[3]) -> [3];
(1,[0,1,1]) -> [0];
(1,[2,2,3]) -> [2];
(2,[1]) -> [1];
(1,[0,2]) -> [0];
(1,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.057812 true true

(1,[0,1,2]) -> [0];
(3,[1,3,0]) -> [1,3,0];
(2,[3,1,2]) -> [3,1];
(2,[3,0,0]) -> [3,0];
(2,[2,1]) -> [2,1];
(0,[2,0,0]) -> [];
(0,[3,2]) -> [];
(0,[2,0,1]) -> [];
(3,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0572930000001 true true

(3,[1,3,2]) -> [1,3,2];
(1,[3]) -> [3];
(0,[1,0,2]) -> [];
(1,[0,0]) -> [0];
(0,[0,2,0]) -> [];
(1,[2,3,0]) -> [2];
(0,[1,2,0]) -> [];
(2,[1,3]) -> [1,3];
(1,[1]) -> [1];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.053731 true true

(2,[2]) -> [2];
(3,[0,0]) -> [0,0];
(3,[0,3,2]) -> [0,3,2];
(0,[1,1,0]) -> [];
(3,[2,0,2]) -> [2,0,2];
(1,[1,0,0]) -> [1];
(1,[3,2]) -> [3];
(3,[0,2]) -> [0,2];
(3,[2,1]) -> [2,1];
(1,[3,0]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0611859999999 true true

(1,[3,1,3]) -> [3];
(0,[2]) -> [];
(3,[1,1,2]) -> [1,1,2];
(3,[3]) -> [3];
(2,[3,2,3]) -> [3,2];
(1,[1,2]) -> [1];
(1,[0,3,1]) -> [0];
(2,[3]) -> [3];
(0,[3,2,1]) -> [];
(3,[2]) -> [2];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.058759 true true

(0,[1]) -> [];
(3,[3]) -> [3];
(2,[2,3]) -> [2,3];
(3,[0,3]) -> [0,3];
(3,[0]) -> [0];
(0,[2,1]) -> [];
(1,[3,3,3]) -> [3];
(2,[3,1,0]) -> [3,1];
(3,[3,3]) -> [3,3];
(0,[2,3,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0574509999999 true true

(2,[3]) -> [3];
(0,[3,2]) -> [];
(3,[3,2,0]) -> [3,2,0];
(2,[2,3,3]) -> [2,3];
(3,[2,0]) -> [2,0];
(3,[3]) -> [3];
(1,[1,2]) -> [1];
(2,[0,1,3]) -> [0,1];
(2,[0]) -> [0];
(1,[0,1]) -> [0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0596740000001 true true

(0,[0,1]) -> [];
(1,[1]) -> [1];
(2,[2,1]) -> [2,1];
(2,[3]) -> [3];
(3,[1,2]) -> [1,2];
(0,[2,0,2]) -> [];
(0,[2]) -> [];
(0,[2,3]) -> [];
(0,[0,1,2]) -> [];
(0,[1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00675500000011 false false

(0,[2]) -> [];
(3,[0]) -> [0];
(1,[0]) -> [0];
(1,[2]) -> [2];
(2,[1,3]) -> [1,3];
(2,[1]) -> [1];
(2,[0,1,1]) -> [0,1];
(1,[0,0,3]) -> [0];
(0,[3]) -> [];
(1,[3,2,3]) -> [3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0583509999999 true true

(1,[2,3,2]) -> [2];
(3,[2,3]) -> [2,3];
(3,[2]) -> [2];
(1,[3,0]) -> [3];
(1,[2,3,0]) -> [2];
(0,[1,0,0]) -> [];
(2,[1]) -> [1];
(0,[3,0,1]) -> [];
(2,[3,1,3]) -> [3,1];
(2,[1,3,0]) -> [1,3];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.0724970000001 true true

(0,[1,0]) -> [];
(1,[2]) -> [2];
(2,[1,3]) -> [1,3];
(3,[1,3]) -> [1,3];
(1,[1]) -> [1];
(2,[2]) -> [2];
(2,[3,0]) -> [3,0];
(3,[1]) -> [1];
(2,[0]) -> [0];
(0,[0,1]) -> [];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case n of
    Z y1 -> 
      []

    S y1 -> 
      xs in list_take) : Nat -> NatList -> NatList)
0.00646400000005 false false

(1,[1]) -> [1];
(1,[0]) -> [0];
(1,[3,2,3]) -> [3];
(2,[2,0]) -> [2,0];
(3,[1,2]) -> [1,2];
(3,[2,1]) -> [2,1];
(2,[0]) -> [0];
(1,[2]) -> [2];
(2,[1]) -> [1];
(1,[3,0,2]) -> [3];
(0, []) -> [];

=================================
None
(2,[3,3,2]) -> [3,3];
(2,[1,1]) -> [1,1];
(0,[2]) -> [];
(2,[0]) -> [0];
(1,[3]) -> [3];
(0,[3,1]) -> [];
(2,[1,2,2]) -> [1,2];
(2,[0,0,0]) -> [0,0];
(0,[0]) -> [];
(3,[2,2,0]) -> [2,2,0];
(0, []) -> [];

=================================
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
(\list_take -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_take = \n -> \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case n of
        Z y2 -> 
          []

        S y2 -> 
          Cons (#2.1 y1, list_take y2 (#2.2 y1)) in list_take) : Nat -> NatList -> NatList)
0.055282 true true

