list_length
[2,2,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (#2.1 y1) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00412099999994 false true

[2,0] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      #2.1 y1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00415100000009 false true

[2,2,0] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (#2.1 y1) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00407999999993 false true

[2,2,0] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (#2.1 y1) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00403899999992 false true

[1,0] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (#2.1 y1) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0039670000001 false true

[0] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00399399999992 false true

[3,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      2 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0040039999999 false true

[3] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00382800000011 false true

[3,2,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      #2.1 y1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00397199999998 false true

[2,1] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      #2.1 y1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00398100000007 false true

[1,1] -> 2;
[3,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      2 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00393499999996 false true

[0,2] -> 2;
[3] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00395499999991 true true

[0,2] -> 2;
[1] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00409300000001 true true

[3,0] -> 2;
[0,3,3] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00691899999993 true true

[0] -> 1;
[1,1] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (#2.1 y1) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00731199999996 false true

[1,1,0] -> 3;
[2,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00433900000007 true true

[3,0,3] -> 3;
[0,0] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00396599999999 true true

[2,2,1] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00417599999992 true true

[3] -> 1;
[0] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00395400000002 false true

[1] -> 1;
[2,1] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      #2.1 y1 in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00390799999991 false true

[0,1] -> 2;
[3] -> 1;
[3,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00396500000011 true true

[3,3] -> 2;
[0,2,0] -> 3;
[1,0,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003467 true true

[1] -> 1;
[2,3,0] -> 3;
[3,3] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003874 true true

[1] -> 1;
[2,0,0] -> 3;
[0,1,1] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00387999999998 true true

[1,2,2] -> 3;
[3,3,1] -> 3;
[3,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00330400000007 true true

[0,1,1] -> 3;
[0,1,3] -> 3;
[2] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00392499999998 true true

[0,1] -> 2;
[3] -> 1;
[1,3,1] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003964 true true

[2,3,1] -> 3;
[3,1] -> 2;
[0,0,3] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00335199999995 true true

[3,3] -> 2;
[3,2] -> 2;
[0] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00400100000002 true true

[2] -> 1;
[1,1,2] -> 3;
[3,3] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00395499999991 true true

[1,3] -> 2;
[1,1] -> 2;
[2] -> 1;
[0,0,1] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00334599999996 true true

[3,0] -> 2;
[1,1,1] -> 3;
[1] -> 1;
[3] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003289 true true

[3,1,2] -> 3;
[1] -> 1;
[2,0,0] -> 3;
[1,0,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00353599999994 true true

[2] -> 1;
[0,1,0] -> 3;
[0,2] -> 2;
[3] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00340899999992 true true

[1] -> 1;
[1,3,0] -> 3;
[3] -> 1;
[0] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0042719999999 true true

[0] -> 1;
[3,1] -> 2;
[1,0] -> 2;
[2,3,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00352999999996 true true

[0,0] -> 2;
[1,1,1] -> 3;
[3,0,1] -> 3;
[1] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00343900000007 true true

[1,1,0] -> 3;
[2,1,1] -> 3;
[1] -> 1;
[2,0] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00366400000007 true true

[0] -> 1;
[0,1,0] -> 3;
[0,0] -> 2;
[1,2,3] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00348400000007 true true

[2] -> 1;
[0] -> 1;
[2,3] -> 2;
[1,0,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0035069999999 true true

[2,2,1] -> 3;
[0,0] -> 2;
[3] -> 1;
[1] -> 1;
[0] -> 1;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00350600000002 true true

[2,2,3] -> 3;
[2,2] -> 2;
[1,0] -> 2;
[2] -> 1;
[3,0,3] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00361500000008 true true

[2] -> 1;
[1,2,3] -> 3;
[3,3,2] -> 3;
[3] -> 1;
[3,1] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.0033840000001 true true

[2] -> 1;
[0,3,2] -> 3;
[0,1,2] -> 3;
[1,0,3] -> 3;
[0,0,3] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.003287 true true

[0,0,3] -> 3;
[3,1] -> 2;
[1] -> 1;
[3,3] -> 2;
[3,1,1] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00337300000001 true true

[2] -> 1;
[1,3,3] -> 3;
[0,0] -> 2;
[1] -> 1;
[2,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00328500000001 true true

[3] -> 1;
[0,2,2] -> 3;
[1] -> 1;
[2,1,2] -> 3;
[1,2] -> 2;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00326599999994 true true

[0,0] -> 2;
[0] -> 1;
[0,3] -> 2;
[3] -> 1;
[2,0,0] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00351599999999 true true

[1,0] -> 2;
[3,3,2] -> 3;
[3,0,0] -> 3;
[1,3,3] -> 3;
[0,1,2] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00346599999989 true true

[1,0] -> 2;
[2,2] -> 2;
[0,1,1] -> 3;
[1,3,2] -> 3;
[3,3,1] -> 3;
[] -> 0;

=================================
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
(\list_length -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_length = \xs -> case xs of
    Nil y1 -> 
      0

    Cons y1 -> 
      S (list_length (#2.2 y1)) in list_length) : NatList -> Nat)
0.00367299999994 true true

