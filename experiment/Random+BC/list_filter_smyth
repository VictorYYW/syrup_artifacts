list_filter
(isEven,[1,2,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [S (#2.1 y1)] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026257 false false

(isEven,[0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022035 false false

(isNonzero,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0221340000001 false false

(isNonzero,[3,1]) -> [3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0222040000001 false false

(isNonzero,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0221100000001 false false

(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.02197 false false

(isEven,[2,2,0]) -> [2,2,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0218990000001 false false

(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026439 false false

(isNonzero,[3,1]) -> [3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0220179999999 false false

(isNonzero,[0,3,3]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0276590000001 false false

(isEven,[1,2]) -> [2];
(isEven,[1,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        xs

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                []

              F y3 -> 
                [S (#2.1 y1)]

          Cons y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        xs

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                []

              F y3 -> 
                [S (#2.1 y1)]

          Cons y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.068804 false false

(isEven,[2]) -> [2];
(isNonzero,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022305 false false

(isEven,[0,3]) -> [0];
(isEven,[2,0,2]) -> [2,0,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [0]

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.050407 false false

(isNonzero,[1,2,3]) -> [1,2,3];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0219509999999 false false

(isNonzero,[0,0,2]) -> [2];
(isEven,[1,0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [2]

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.049829 false false

(isEven,[0]) -> [0];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.021851 false false

(isEven,[0,2]) -> [0,2];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.021888 false false

(isNonzero,[0,2,1]) -> [2,1];
(isNonzero,[0]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0253479999999 false false

(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3,0,2]) -> [3,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case #2.2 y1 of
              Nil y3 -> 
                []

              Cons y3 -> 
                Cons (3, #2.2 y1)

          Cons y2 -> 
            [3, 2] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case fixListFilter (#2.2 y1) of
          Nil y2 -> 
            case #2.2 y1 of
              Nil y3 -> 
                []

              Cons y3 -> 
                Cons (3, #2.2 y1)

          Cons y2 -> 
            [3, 2] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
9.542024 false false

(isNonzero,[0,0,0]) -> [];
(isEven,[3,0,0]) -> [0,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0412650000001 false false

(isNonzero,[1,0]) -> [1];
(isNonzero,[0]) -> [];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            []

          S y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.044386 false false

(isEven,[1,3]) -> [];
(isNonzero,[1]) -> [1];
(isNonzero,[0,1,0]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [1]

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [1]

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0427850000001 false false

(isEven,[3,1,2]) -> [2];
(isEven,[3,3]) -> [];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.053913 false false

(isEven,[2,3]) -> [2];
(isNonzero,[3,0,3]) -> [3,3];
(isEven,[1,3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.060389 true true

(isNonzero,[3]) -> [3];
(isEven,[0,1,2]) -> [0,2];
(isEven,[2,1,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            Cons (#2.1 y1, #2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0529289999999 false false

(isEven,[3,3,1]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[1]) -> [1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.081664 false false

(isNonzero,[1,2,2]) -> [1,2,2];
(isEven,[1,0,1]) -> [0];
(isEven,[2,2,3]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.18499 true true

(isEven,[1,0,3]) -> [0];
(isNonzero,[2,3]) -> [2,3];
(isEven,[3,0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0]

      F y1 -> 
        xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.076712 false true

(isNonzero,[3]) -> [3];
(isEven,[1]) -> [];
(isNonzero,[3,3]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        []

      F y1 -> 
        xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            fixListFilter (#2.2 y2)

      F y1 -> 
        xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0818079999999 false false

(isNonzero,[2]) -> [2];
(isEven,[1]) -> [];
(isNonzero,[0,1,3]) -> [1,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.10776 false false

(isNonzero,[1,2,0]) -> [1,2];
(isEven,[0,3]) -> [0];
(isNonzero,[1,1,2]) -> [1,1,2];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.096953 false false

(isEven,[3,1]) -> [];
(isNonzero,[3]) -> [3];
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.095548 false false

(isEven,[1,0,3]) -> [0];
(isEven,[1,2]) -> [2];
(isNonzero,[1,1]) -> [1,1];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( case #2.2 y1 of
              Nil y2 -> 
                0

              Cons y2 -> 
                #2.1 y2
          , case predicate (#2.1 y1) of
              T y2 -> 
                #2.2 y1

              F y2 -> 
                []
          ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.287012 false true

(isEven,[3,0]) -> [0];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[3]) -> [3];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0]

      F y1 -> 
        xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104086 false true

(isNonzero,[0]) -> [];
(isEven,[2]) -> [2];
(isEven,[1,0]) -> [0];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0956739999999 false false

(isNonzero,[1,2]) -> [1,2];
(isEven,[3,1,1]) -> [];
(isEven,[3]) -> [];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0813270000001 false false

(isEven,[2,0,0]) -> [2,0,0];
(isNonzero,[1,3]) -> [1,3];
(isEven,[0,2]) -> [0,2];
(isEven,[0,3,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case predicate (#2.1 y1) of
              T y3 -> 
                Cons (#2.1 y1, #2.2 y1)

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case predicate (#2.1 y1) of
              T y3 -> 
                Cons (#2.1 y1, #2.2 y1)

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                Cons (0, #2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
1.541077 false false

(isEven,[1,2]) -> [2];
(isEven,[0]) -> [0];
(isNonzero,[3]) -> [3];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.086695 false false

(isNonzero,[0,1,3]) -> [1,3];
(isEven,[1]) -> [];
(isNonzero,[2,2]) -> [2,2];
(isEven,[0,1]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.093889 false false

(isEven,[0,1]) -> [0];
(isNonzero,[2,1,0]) -> [2,1];
(isNonzero,[0]) -> [];
(isNonzero,[2,0,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0939539999999 false false

(isNonzero,[0,1,0]) -> [1];
(isEven,[1]) -> [];
(isEven,[2,0]) -> [2,0];
(isNonzero,[0,1,1]) -> [1,1];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.114057 true true

(isEven,[0,3]) -> [0];
(isEven,[0]) -> [0];
(isNonzero,[1,2,3]) -> [1,2,3];
(isNonzero,[0,2]) -> [2];
(isEven,[0,3,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.196563 true true

(isEven,[0]) -> [0];
(isNonzero,[2,3,2]) -> [2,3,2];
(isEven,[0,3]) -> [0];
(isNonzero,[3]) -> [3];
(isEven,[3,3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0879789999999 false false

(isNonzero,[0]) -> [];
(isNonzero,[2,2]) -> [2,2];
(isEven,[3,0]) -> [0];
(isNonzero,[3,0,2]) -> [3,2];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0943970000001 false false

(isNonzero,[2]) -> [2];
(isEven,[2]) -> [2];
(isEven,[1,3,2]) -> [2];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[1,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0865570000001 false false

(isNonzero,[0,0]) -> [];
(isNonzero,[2,3,0]) -> [2,3];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[3]) -> [3];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0845850000001 false false

(isNonzero,[1]) -> [1];
(isNonzero,[2,2]) -> [2,2];
(isEven,[3,0,0]) -> [0,0];
(isNonzero,[0,3]) -> [3];
(isEven,[0,2,2]) -> [0,2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.376892 false false

(isEven,[0,1,3]) -> [0];
(isNonzero,[0,2,0]) -> [2];
(isNonzero,[3,2,2]) -> [3,2,2];
(isNonzero,[1]) -> [1];
(isEven,[2,0,3]) -> [2,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.468841 true true

(isEven,[2]) -> [2];
(isNonzero,[3]) -> [3];
(isNonzero,[1,3]) -> [1,3];
(isEven,[2,2]) -> [2,2];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            #2.2 y1

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            fixListFilter (#2.2 y1)

          S y2 -> 
            xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.055106 false false

(isEven,[1,2]) -> [2];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[3]) -> [];
(isNonzero,[3,1]) -> [3,1];
(isEven,[2,1,1]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.092842 true true

(isEven,[2]) -> [2];
(isEven,[1,3]) -> [];
(isNonzero,[3,2,1]) -> [3,2,1];
(isNonzero,[2,1]) -> [2,1];
(isNonzero,[2]) -> [2];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.092492 false false

(isNonzero,[2,3]) -> [2,3];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3,0]) -> [3,3];
(isNonzero,[2]) -> [2];
(isEven,[1,1,3]) -> [];
(isEven,[3]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102247 false false

(isNonzero,[3,1,2]) -> [3,1,2];
(isEven,[3]) -> [];
(isEven,[2,3]) -> [2];
(isEven,[0,0,2]) -> [0,0,2];
(isEven,[2,2]) -> [2,2];
(isNonzero,[3,0]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.110003 false false

(isEven,[1,3,1]) -> [];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isNonzero,[1,2,0]) -> [1,2];
(isNonzero,[0]) -> [];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0854220000001 false false

(isEven,[0,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isEven,[3,0]) -> [0];
(isEven,[2,2]) -> [2,2];
(isEven,[3,1]) -> [];
(isEven,[3,1,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0915649999999 false false

(isEven,[1,2,2]) -> [2,2];
(isEven,[0]) -> [0];
(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3]) -> [3];
(isEven,[2,0]) -> [2,0];
(isNonzero,[2,1,3]) -> [2,1,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.186047 false false

(isEven,[3,2]) -> [2];
(isEven,[1,1,1]) -> [];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isEven,[2]) -> [2];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0902920000001 false false

(isEven,[2,1]) -> [2];
(isEven,[2,0,3]) -> [2,0];
(isNonzero,[2,3,1]) -> [2,3,1];
(isNonzero,[1,3]) -> [1,3];
(isEven,[0]) -> [0];
(isEven,[3,2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.815283 false false

(isEven,[3,1,3]) -> [];
(isEven,[2,0,1]) -> [2,0];
(isEven,[0,3,0]) -> [0,0];
(isNonzero,[0]) -> [];
(isNonzero,[2]) -> [2];
(isEven,[0,2]) -> [0,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0918019999999 true true

(isEven,[0]) -> [0];
(isNonzero,[0,2]) -> [2];
(isEven,[2]) -> [2];
(isNonzero,[3,1]) -> [3,1];
(isEven,[0,1]) -> [0];
(isNonzero,[2,3,0]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.480419 false false

(isEven,[3]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[1,0]) -> [0];
(isNonzero,[3]) -> [3];
(isNonzero,[0,0,3]) -> [3];
(isNonzero,[0,2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.098978 false false

(isEven,[2,2]) -> [2,2];
(isEven,[1,0,0]) -> [0,0];
(isNonzero,[0]) -> [];
(isEven,[2,0,2]) -> [2,0,2];
(isNonzero,[3]) -> [3];
(isNonzero,[0,2,3]) -> [2,3];
(isEven,[1,2,1]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.111482 true true

(isEven,[2,3,0]) -> [2,0];
(isNonzero,[3,2]) -> [3,2];
(isNonzero,[2]) -> [2];
(isEven,[1,2]) -> [2];
(isEven,[3,1,3]) -> [];
(isEven,[0,0]) -> [0,0];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102738 true true

(isNonzero,[3,2,3]) -> [3,2,3];
(isNonzero,[1]) -> [1];
(isEven,[2,3]) -> [2];
(isNonzero,[0]) -> [];
(isNonzero,[1,0,1]) -> [1,1];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.124123 false false

(isNonzero,[2]) -> [2];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[3]) -> [];
(isNonzero,[0,0,0]) -> [];
(isNonzero,[2,2,0]) -> [2,2];
(isEven,[1,0,2]) -> [0,2];
(isEven,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.100663 true true

(isEven,[3,0,2]) -> [0,2];
(isNonzero,[0]) -> [];
(isNonzero,[0,2,3]) -> [2,3];
(isEven,[1,0]) -> [0];
(isNonzero,[0,3,3]) -> [3,3];
(isEven,[1]) -> [];
(isNonzero,[1,3,1]) -> [1,3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.099451 false false

(isNonzero,[2,2]) -> [2,2];
(isEven,[0,3]) -> [0];
(isNonzero,[3]) -> [3];
(isNonzero,[1,0,2]) -> [1,2];
(isEven,[1]) -> [];
(isEven,[2,0]) -> [2,0];
(isEven,[0,0,2]) -> [0,0,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106369 false false

(isNonzero,[2,3]) -> [2,3];
(isNonzero,[2,0]) -> [2];
(isEven,[3]) -> [];
(isEven,[2,1]) -> [2];
(isEven,[3,1,0]) -> [0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.100446 true true

(isEven,[1,3]) -> [];
(isNonzero,[0,1]) -> [1];
(isNonzero,[2]) -> [2];
(isEven,[2,3,0]) -> [2,0];
(isEven,[1,1,0]) -> [0];
(isNonzero,[0,1,1]) -> [1,1];
(isEven,[2,1,1]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104336 true true

(isEven,[3,2,1]) -> [2];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isNonzero,[3]) -> [3];
(isNonzero,[3,0]) -> [3];
(isEven,[3,3]) -> [];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.096491 true true

(isEven,[2,3,0]) -> [2,0];
(isEven,[3]) -> [];
(isEven,[3,2]) -> [2];
(isNonzero,[3,3,1]) -> [3,3,1];
(isNonzero,[0,1,2]) -> [1,2];
(isNonzero,[2,2]) -> [2,2];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.121598 false false

(isEven,[2,1]) -> [2];
(isNonzero,[3,3]) -> [3,3];
(isEven,[3,2,3]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[0,1,0]) -> [0,0];
(isNonzero,[3,2,1]) -> [3,2,1];
(isEven,[2,2,3]) -> [2,2];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
2.107835 true true

(isNonzero,[2]) -> [2];
(isNonzero,[2,3]) -> [2,3];
(isNonzero,[0,2,2]) -> [2,2];
(isEven,[1,0,3]) -> [0];
(isNonzero,[0]) -> [];
(isEven,[3,0]) -> [0];
(isEven,[2,3]) -> [2];
(isEven,[3,1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.118136 true true

(isNonzero,[3]) -> [3];
(isEven,[1,1]) -> [];
(isEven,[2,1,3]) -> [2];
(isEven,[0,2]) -> [0,2];
(isNonzero,[2,2,0]) -> [2,2];
(isEven,[0,2,3]) -> [0,2];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3]) -> [3,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.136119 false false

(isNonzero,[0,1]) -> [1];
(isEven,[1,1,1]) -> [];
(isNonzero,[0,3,2]) -> [3,2];
(isEven,[0]) -> [0];
(isEven,[0,1]) -> [0];
(isEven,[1,1,2]) -> [2];
(isNonzero,[0,0,3]) -> [3];
(isNonzero,[0]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.115126 true true

(isEven,[1]) -> [];
(isNonzero,[2]) -> [2];
(isEven,[2]) -> [2];
(isNonzero,[3,0,2]) -> [3,2];
(isNonzero,[1]) -> [1];
(isEven,[1,0]) -> [0];
(isNonzero,[3,1]) -> [3,1];
(isEven,[3,2,0]) -> [2,0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.105217 false false

(isEven,[0,1,0]) -> [0,0];
(isNonzero,[1,3,2]) -> [1,3,2];
(isEven,[0,3,0]) -> [0,0];
(isNonzero,[1]) -> [1];
(isEven,[2,2,2]) -> [2,2,2];
(isEven,[2,0]) -> [2,0];
(isNonzero,[0]) -> [];
(isEven,[2,1,3]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.1304 true true

(isNonzero,[0]) -> [];
(isEven,[3,1]) -> [];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[2]) -> [2];
(isNonzero,[2,0]) -> [2];
(isEven,[1,1]) -> [];
(isEven,[0,1]) -> [0];
(isNonzero,[1,3,1]) -> [1,3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.113272 false false

(isEven,[0,1]) -> [0];
(isNonzero,[0]) -> [];
(isNonzero,[2]) -> [2];
(isEven,[2,0,0]) -> [2,0,0];
(isEven,[3,1,0]) -> [0];
(isEven,[1,3,0]) -> [0];
(isEven,[0,2,1]) -> [0,2];
(isNonzero,[2,1]) -> [2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.125884 true true

(isEven,[0,3,3]) -> [0];
(isNonzero,[2]) -> [2];
(isNonzero,[1,0]) -> [1];
(isEven,[2,0]) -> [2,0];
(isEven,[3]) -> [];
(isEven,[1]) -> [];
(isNonzero,[2,3]) -> [2,3];
(isNonzero,[0,3]) -> [3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.116913 true true

(isEven,[2,3,0]) -> [2,0];
(isNonzero,[2,2,3]) -> [2,2,3];
(isEven,[3,1,2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[1,3,1]) -> [];
(isNonzero,[0,3,0]) -> [3];
(isNonzero,[1,1]) -> [1,1];
(isNonzero,[1]) -> [1];
(isNonzero,[2,3]) -> [2,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.168902 true true

(isNonzero,[1,2,2]) -> [1,2,2];
(isNonzero,[3]) -> [3];
(isEven,[3]) -> [];
(isNonzero,[0,0,0]) -> [];
(isEven,[2]) -> [2];
(isNonzero,[3,1,3]) -> [3,1,3];
(isNonzero,[1,1]) -> [1,1];
(isEven,[1,1,3]) -> [];
(isNonzero,[2,1]) -> [2,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.162028 false false

(isNonzero,[3,3,0]) -> [3,3];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[2,1]) -> [2,1];
(isEven,[0]) -> [0];
(isNonzero,[1]) -> [1];
(isNonzero,[0]) -> [];
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,1,2]) -> [1,1,2];
(isEven,[0,2,2]) -> [0,2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.155719 false false

(isNonzero,[2,1]) -> [2,1];
(isNonzero,[0,0,1]) -> [1];
(isEven,[2]) -> [2];
(isNonzero,[1]) -> [1];
(isNonzero,[1,0,2]) -> [1,2];
(isNonzero,[0,2]) -> [2];
(isEven,[3]) -> [];
(isNonzero,[3,3,1]) -> [3,3,1];
(isEven,[0,2,3]) -> [0,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.161519 true true

(isEven,[1,0,2]) -> [0,2];
(isEven,[2]) -> [2];
(isEven,[3,3,0]) -> [0];
(isEven,[0]) -> [0];
(isNonzero,[1]) -> [1];
(isNonzero,[3,3,1]) -> [3,3,1];
(isNonzero,[2,3,1]) -> [2,3,1];
(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3,2,2]) -> [3,2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
4.075584 false false

(isEven,[0,2]) -> [0,2];
(isEven,[3,3]) -> [];
(isEven,[1]) -> [];
(isEven,[2,2,3]) -> [2,2];
(isNonzero,[3]) -> [3];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[1,0,3]) -> [0];
(isNonzero,[1,0,3]) -> [1,3];
(isNonzero,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.168299 true true

(isNonzero,[0]) -> [];
(isNonzero,[1,2]) -> [1,2];
(isEven,[1,1,1]) -> [];
(isEven,[2,3]) -> [2];
(isEven,[3,3]) -> [];
(isEven,[1,3]) -> [];
(isEven,[1,1]) -> [];
(isEven,[3]) -> [];
(isNonzero,[2,0]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.154596 false false

(isNonzero,[0,0]) -> [];
(isNonzero,[3]) -> [3];
(isEven,[1,1,1]) -> [];
(isEven,[0]) -> [0];
(isEven,[0,3]) -> [0];
(isNonzero,[2,0]) -> [2];
(isEven,[1,0]) -> [0];
(isNonzero,[0]) -> [];
(isNonzero,[1,0,3]) -> [1,3];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.143492 true true

(isNonzero,[2]) -> [2];
(isEven,[3]) -> [];
(isEven,[3,3,2]) -> [2];
(isEven,[2,2]) -> [2,2];
(isEven,[3,2]) -> [2];
(isEven,[3,0]) -> [0];
(isEven,[2]) -> [2];
(isNonzero,[0]) -> [];
(isEven,[1,0,3]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.139728 true true

(isNonzero,[3]) -> [3];
(isEven,[2,0,3]) -> [2,0];
(isNonzero,[0,3]) -> [3];
(isNonzero,[0,2,1]) -> [2,1];
(isEven,[3,0]) -> [0];
(isEven,[1,3,1]) -> [];
(isNonzero,[1,3]) -> [1,3];
(isEven,[3]) -> [];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.157694 true true

(isEven,[1,2]) -> [2];
(isNonzero,[3,3]) -> [3,3];
(isNonzero,[3,2,3]) -> [3,2,3];
(isEven,[0]) -> [0];
(isEven,[2]) -> [2];
(isNonzero,[1,0,1]) -> [1,1];
(isNonzero,[0,3,0]) -> [3];
(isNonzero,[2,1,3]) -> [2,1,3];
(isNonzero,[3,0,3]) -> [3,3];
(isEven,[1]) -> [];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.256834 true true

(isNonzero,[2,2,0]) -> [2,2];
(isEven,[3,3]) -> [];
(isEven,[1,0,2]) -> [0,2];
(isNonzero,[1,0]) -> [1];
(isNonzero,[1,3,2]) -> [1,3,2];
(isNonzero,[1]) -> [1];
(isEven,[0,3,0]) -> [0,0];
(isEven,[1,2,0]) -> [2,0];
(isEven,[1,1,2]) -> [2];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.281439 true true

(isEven,[0,2]) -> [0,2];
(isEven,[1,2,0]) -> [2,0];
(isNonzero,[0,1,3]) -> [1,3];
(isEven,[2]) -> [2];
(isEven,[1]) -> [];
(isEven,[3]) -> [];
(isEven,[1,0,0]) -> [0,0];
(isNonzero,[0,2]) -> [2];
(isNonzero,[1,0]) -> [1];
(isEven,[0,1]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            #2.2 y1 in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.242064 false false

(isNonzero,[2]) -> [2];
(isNonzero,[3,3,1]) -> [3,3,1];
(isEven,[2]) -> [2];
(isNonzero,[3,3]) -> [3,3];
(isEven,[2,0]) -> [2,0];
(isNonzero,[1,3]) -> [1,3];
(isNonzero,[3,3,3]) -> [3,3,3];
(isEven,[2,3,2]) -> [2,2];
(isNonzero,[1,2,2]) -> [1,2,2];
(isNonzero,[2,1]) -> [2,1];
(isEven, []) -> [];

=================================
None
(isEven,[3,3]) -> [];
(isEven,[1,3]) -> [];
(isEven,[2,1,3]) -> [2];
(isNonzero,[0,0,1]) -> [1];
(isNonzero,[2]) -> [2];
(isEven,[1,0,2]) -> [0,2];
(isNonzero,[3,3]) -> [3,3];
(isEven,[0,2,0]) -> [0,2,0];
(isEven,[1,0,1]) -> [0];
(isNonzero,[3,1]) -> [3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.279633 true true

(isNonzero,[3]) -> [3];
(isEven,[3,3,1]) -> [];
(isNonzero,[0]) -> [];
(isEven,[0,2]) -> [0,2];
(isNonzero,[3,0]) -> [3];
(isEven,[2]) -> [2];
(isNonzero,[0,1]) -> [1];
(isNonzero,[2,3]) -> [2,3];
(isEven,[2,0,0]) -> [2,0,0];
(isEven,[0]) -> [0];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.218953 true true

(isNonzero,[1,2,2]) -> [1,2,2];
(isEven,[3,2,1]) -> [2];
(isEven,[1,0,2]) -> [0,2];
(isEven,[2,3]) -> [2];
(isNonzero,[3]) -> [3];
(isEven,[2]) -> [2];
(isNonzero,[2]) -> [2];
(isEven,[0,1,3]) -> [0];
(isNonzero,[1]) -> [1];
(isNonzero,[1,2]) -> [1,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
6.924183 true true

(isEven,[0,2]) -> [0,2];
(isNonzero,[1,2]) -> [1,2];
(isEven,[3,3,1]) -> [];
(isNonzero,[2,2]) -> [2,2];
(isNonzero,[3,2]) -> [3,2];
(isEven,[1,2,3]) -> [2];
(isNonzero,[0,2,2]) -> [2,2];
(isNonzero,[2,2,2]) -> [2,2,2];
(isNonzero,[0]) -> [];
(isEven,[2,2]) -> [2,2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.268319 true true

(isNonzero,[2,2]) -> [2,2];
(isEven,[2,0,0]) -> [2,0,0];
(isNonzero,[0]) -> [];
(isEven,[3,3]) -> [];
(isEven,[1]) -> [];
(isEven,[0,0]) -> [0,0];
(isNonzero,[1,3,0]) -> [1,3];
(isEven,[1,2,1]) -> [2];
(isNonzero,[2,2,0]) -> [2,2];
(isNonzero,[2]) -> [2];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.239695 true true

(isEven,[0]) -> [0];
(isEven,[1]) -> [];
(isEven,[3]) -> [];
(isNonzero,[0,0]) -> [];
(isEven,[2,0,1]) -> [2,0];
(isEven,[1,2,2]) -> [2,2];
(isNonzero,[1]) -> [1];
(isEven,[0,3,0]) -> [0,0];
(isNonzero,[1,1,3]) -> [1,1,3];
(isNonzero,[3,1]) -> [3,1];
(isEven, []) -> [];

=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.225402 true true

