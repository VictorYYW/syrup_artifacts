Leaf () -> [];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0103200000001 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [T] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0102039999999 false false

Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [F] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0100170000001 false false

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [T, F] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0103590000001 false false

Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [F, T] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0103220000001 false false

Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [F, T] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.010421 false false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      [T]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons (T, tree_inorder_bool (#3.1 y1))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0132920000001 false false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      [F]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons (F, tree_inorder_bool (#3.1 y1))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0133269999999 false false

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.015476 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
=================================
NOSOL

Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_inorder_bool = \tree -> [F, T] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0105060000001 false false

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.125975 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.013993 false false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.074529 false false

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.126742 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
=================================
NOSOL

Leaf () -> [];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      [F, T]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.015087 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.089982 false false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      Cons
        ( #3.2 y1
        , tree_inorder_bool (#3.3 y1)
        )

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.0159349999999 false false

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.139206 true true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.123508 true true

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.227175 true true

Leaf () -> [];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.120518 true true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1)) [#3.2 y1]

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.150865 false false

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.123454 true true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.124224 true true

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.137158 true true

Leaf () -> [];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.137181 true true

Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
NOSOL

Leaf () -> [];
Node (Leaf (), T (), Leaf ()) -> [T ()];
Node (Leaf (), F (), Leaf ()) -> [F ()];
Node (Node (Leaf (), T (), Leaf ()), F (), Leaf ()) -> [T (), F ()];
Node (Node (Leaf (), F (), Leaf ()), T (), Leaf ()) -> [F (), T ()];
Node (Leaf (), F (), Node (Leaf (), T (), Leaf ())) -> [F (), T ()];
=================================
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
(\append -> (\tree_inorder_bool -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_inorder_bool = \tree -> case tree of
    Node y1 -> 
      append (tree_inorder_bool (#3.1 y1))
        (Cons
          ( #3.2 y1
          , tree_inorder_bool (#3.3 y1)
          ))

    Leaf y1 -> 
      [] in tree_inorder_bool) : BooleanTree -> BooleanList))
  ((let append = \l1 -> \l2 -> case l1 of
    Nil _ -> 
      l2

    Cons p -> 
      Cons (#2.1 p, append (#2.2 p) l2) in append) : BooleanList -> BooleanList -> BooleanList)
0.156766 true true

