(isEven, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022099 false false

(isEven, [0]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0236090000001 false false

(isEven, [1]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0220959999999 false false

(isEven , [2]) -> [2];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0230240000001 false false

(isEven, [0, 0]) -> [0, 0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0236199999999 false false

(isEven, [0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023377 false false

(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023013 false false

(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0221340000001 false false

(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0220429999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0218150000001 false false

(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        [0]

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0287960000001 false false

(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.023019 false false

(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0265179999999 false false

(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0221819999999 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
=================================
NOSOL

(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
=================================
NOSOL

(isEven, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0222209999999 false false

(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
=================================
NOSOL

(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0219609999999 false false

(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
=================================
NOSOL

(isEven, [0]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0262479999999 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0230349999999 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0218829999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.022078 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter) ((let fixListFilter = \xs -> xs in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0219059999999 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
=================================
NOSOL

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
=================================
NOSOL

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [#2.1 y1] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.026492 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            xs

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          (case #2.2 y1 of
            Nil y2 -> 
              (#2.1 y1, fixListFilter (#2.2 y1))

            Cons y2 -> 
              (0, [])) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.050947 false false

(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.044359 false false

(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.049516 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.055505 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0660350000001 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            [0]

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.1 y1 of
          Z y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          S y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.044895 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            []

          Cons y2 -> 
            Cons (0, fixListFilter (#2.2 y2)) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.04378 false false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.098947 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0265959999999 false false

(isEven, [0]) -> [0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        [0]

      F y1 -> 
        [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case predicate 0 of
      T y1 -> 
        [0]

      F y1 -> 
        case xs of
          Nil y2 -> 
            []

          Cons y2 -> 
            fixListFilter (#2.2 y2) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.102934 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( case #2.2 y1 of
              Nil y2 -> 
                #2.1 y1

              Cons y2 -> 
                0
          , case #2.1 y1 of
              Z y2 -> 
                #2.2 y1

              S y2 -> 
                []
          ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        Cons
          ( case #2.2 y1 of
              Nil y2 -> 
                #2.1 y1

              Cons y2 -> 
                0
          , case #2.1 y1 of
              Z y2 -> 
                fixListFilter (#2.2 y1)

              S y2 -> 
                []
          ) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0518500000001 false false

(isEven, []) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106823 false false

(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.100528 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.081293 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [0]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                Cons (0, #2.2 y1)

              F y3 -> 
                [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case #2.2 y1 of
          Nil y2 -> 
            [0]

          Cons y2 -> 
            case isEven (#2.1 y2) of
              T y3 -> 
                Cons (0, fixListFilter (#2.2 y1))

              F y3 -> 
                [0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
1.010683 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.075724 false false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.101981 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0863870000001 false false

(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.101422 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
NOSOL

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0983819999999 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0897560000001 false false

(isEven, []) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.168194 false false

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [0]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [0]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.07944 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.079986 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.107939 false false

(isEven, []) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.114046 false false

(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.097837 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            xs

          F y2 -> 
            []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [#2.1 y1]

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                [0, 0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            xs

          F y2 -> 
            []

      Cons y1 -> 
        case isNonzero (#2.1 y1) of
          T y2 -> 
            case isEven (#2.1 y1) of
              T y3 -> 
                [#2.1 y1]

              F y3 -> 
                []

          F y2 -> 
            case fixListFilter (#2.2 y1) of
              Nil y3 -> 
                [0]

              Cons y3 -> 
                [0, 0] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
2.437081 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.084568 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0999569999999 false false

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0940900000001 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0981059999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0953179999999 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate (Z y1) of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            xs

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0970809999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.0888279999999 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.109067 false false

(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.106541 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104346 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case isEven (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.107604 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108062 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        case predicate 0 of
          T y2 -> 
            []

          F y2 -> 
            []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            [] in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.119183 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.120783 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            [#2.1 y1]

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.104165 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        Nil
          (case predicate 0 of
            T y2 -> 
              ()

            F y2 -> 
              ())

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (0, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.108031 false false

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.138031 true true

(isEven, []) -> [];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.118056 true true

(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.105538 true true

(isEven, []) -> [];
(isEven, [0]) -> [0];
(isEven, [1]) -> [];
(isEven , [2]) -> [2];
(isEven, [0, 0]) -> [0, 0];
(isEven, [0, 1]) -> [0];
(isEven, [1, 0, 1]) -> [0];
(isNonzero, []) -> [];
(isNonzero, [0]) -> [];
=================================
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
(\isEven -> (\isNonzero -> (\list_filter -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_filter = \predicate -> (\fixListFilter -> fixListFilter)
    ((let fixListFilter = \xs -> case xs of
      Nil y1 -> 
        []

      Cons y1 -> 
        case predicate (#2.1 y1) of
          T y2 -> 
            Cons (#2.1 y1, fixListFilter (#2.2 y1))

          F y2 -> 
            fixListFilter (#2.2 y1) in fixListFilter) : NatList -> NatList) in list_filter) : (Nat -> Boolean) -> NatList -> NatList))
  ((let isNonzero = \n -> case n of
    Z _ -> 
      F

    S _ -> 
      T in isNonzero) : Nat -> Boolean))
  ((let isEven = \n -> case n of
    Z _ -> 
      T

    S m1 -> 
      case m1 of
        Z _ -> 
          F

        S m2 -> 
          isEven m2 in isEven) : Nat -> Boolean)
0.122244 true true

