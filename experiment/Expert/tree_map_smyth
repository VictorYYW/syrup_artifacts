(div2, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.040994 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 0, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.159839 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 1, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.216838 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Node (Leaf, 1, Leaf), 1, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.406737 false false

(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 0, Node (Leaf, 1, Leaf)) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.294668 false false

(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0404309999999 false false

(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, 1, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.17346 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0538550000001 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.053003 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
NOSOL

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 0, Node (Leaf, 1, Leaf))

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0575530000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> Node (Leaf, f 0, Leaf) in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.166887 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
NOSOL

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
NOSOL

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
=================================
NOSOL

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
NOSOL

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap) ((let fixTreeMap = \tree -> tree in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.039661 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, f (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.053531 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
NOSOL

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0640800000001 false false

(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0613330000001 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
NOSOL

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0579250000001 false false

(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0781589999999 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.054421 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
None
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, div2 (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0550949999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.067444 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.052095 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (Leaf, div2 (#3.2 y1), Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.1 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0478189999999 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
=================================
NOSOL

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
NOSOL

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.052093 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0544050000001 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.071465 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.080858 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0574349999999 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.053958 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node (fixTreeMap (#3.1 y1), 1, Leaf)

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0557180000001 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0549470000001 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.075147 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0741379999999 false false

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
NOSOL

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0565449999999 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0567080000001 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0677659999999 false false

(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0539690000001 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , div2 (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.056877 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.056413 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , Leaf
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0549510000001 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( Leaf
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0749639999999 false false

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.056468 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.053784 true true

(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0564999999999 true true

(div2, Leaf ()) -> Leaf ();
(div2, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 0, Leaf ());
(div2, Node (Leaf (), 2, Leaf ())) -> Node (Leaf (), 1, Leaf ());
(div2, Node (Node (Leaf (), 2, Leaf ()), 2, Leaf ())) -> Node (Node (Leaf (), 1, Leaf ()), 1, Leaf ());
(div2, Node (Leaf (), 1, Node (Leaf (), 2, Leaf ()))) -> Node (Leaf (), 0, Node (Leaf (), 1, Leaf ()));
(inc, Leaf ()) -> Leaf ();
(inc, Node (Leaf (), 0, Leaf ())) -> Node (Leaf (), 1, Leaf ());
=================================
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
(\div2 -> (\inc -> (\tree_map -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_map = \f -> (\fixTreeMap -> fixTreeMap)
    ((let fixTreeMap = \tree -> case tree of
      Node y1 -> 
        Node
          ( fixTreeMap (#3.1 y1)
          , f (#3.2 y1)
          , fixTreeMap (#3.3 y1)
          )

      Leaf y1 -> 
        Leaf in fixTreeMap) : NatTree -> NatTree) in tree_map) : (Nat -> Nat) -> NatTree -> NatTree)) ((let inc = \n -> S n in inc) : Nat -> Nat))
  ((let div2 = \n -> case n of
    Z _ -> 
      0

    S m1 -> 
      case m1 of
        Z _ -> 
          0

        S m2 -> 
          S (div2 m2) in div2) : Nat -> Nat)
0.0563749999999 true true

