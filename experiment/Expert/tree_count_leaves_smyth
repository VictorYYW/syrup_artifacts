Leaf () -> 1;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00847599999997 false false

Node (Leaf (), T (), Leaf ()) -> 2;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 2 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00912100000005 false false

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 3 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00928500000009 false false

Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 3 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00950200000011 false false

Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 4 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0097310000001 false false

Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 4 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00944699999991 false false

Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 6 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00998000000004 false false

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let tree_count_leaves = \tree -> 3 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.00991399999998 false false

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
NOSOL

Leaf () -> 1;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (tree_count_leaves (#3.1 y1))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      S (tree_count_leaves (#3.1 y1))

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0138629999999 false false

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      4

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0171909999999 false false

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      6

    Leaf y1 -> 
      1 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.0235 false false

Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
NOSOL

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> S
    (case tree of
      Node y1 -> 
        tree_count_leaves (#3.1 y1)

      Leaf y1 -> 
        0) in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> S
    (case tree of
      Node y1 -> 
        tree_count_leaves (#3.1 y1)

      Leaf y1 -> 
        0) in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
0.019331 false false

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
NOSOL

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.121101 true true

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.343473 true true

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
NOSOL

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.939662 true true

Leaf () -> 1;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.351352 true true

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
=================================
NOSOL

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
1.57915 true true

Leaf () -> 1;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.266594 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.09161 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.85618 true true

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.432236 true true

Leaf () -> 1;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.371455 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
2.023373 true true

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
NOSOL

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.51728 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.004955 true true

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.258848 true true

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
5.042845 true true

Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.10159 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.059308 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.521221 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.078336 true true

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
3.95683 true true

Leaf () -> 1;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
6.304771 true true

Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
NOSOL

Leaf () -> 1;
Node (Leaf (), T (), Leaf ()) -> 2;
Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()) -> 3;
Node (Leaf (), T (), Node (Leaf (), T (), Leaf ())) -> 3;
Node (Node (Node (Leaf (), T (), Leaf ()), T (), Leaf ()), T (), Leaf ()) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ())) -> 4;
Node (Node (Leaf (), T (), Leaf ()), T (), Node (Node (Leaf (), T (), Leaf ()), T (), Node (Leaf (), T (), Leaf ()))) -> 6;
=================================
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
(\sum -> (\tree_count_leaves -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let tree_count_leaves = \tree -> case tree of
    Node y1 -> 
      sum (tree_count_leaves (#3.1 y1)) (tree_count_leaves (#3.3 y1))

    Leaf y1 -> 
      sum 1 0 in tree_count_leaves) : BooleanTree -> Nat))
  ((let sum = \n1 -> \n2 -> case n1 of
    Z _ -> 
      n2

    S m -> 
      S (sum m n2) in sum) : Nat -> Nat -> Nat)
4.501783 true true

