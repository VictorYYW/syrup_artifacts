[] -> [];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> [] in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0101010000001 false false

[1, 2] -> [2, 3];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.013931 true false

[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0128159999999 true false

[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0191400000001 true false

[] -> [];
[1, 2] -> [2, 3];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0107149999999 true false

[] -> [];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0106579999999 true false

[] -> [];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.010841 true false

[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012293 true false

[1, 2] -> [2, 3];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0126049999999 true false

[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.012518 true false

[] -> [];
[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0111320000001 true false

[] -> [];
[1, 2] -> [2, 3];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0113510000001 true false

[] -> [];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0114369999999 true false

[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0137970000001 true false

[] -> [];
[1, 2] -> [2, 3];
[0, 0] -> [1, 1];
[3, 4, 5] -> [4, 5, 6];
=================================
(\map -> (\list_inc -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_inc = \xs -> map xs (let f1 = \x1 -> S x1 in f1) in list_inc) : NatList -> NatList))
  ((let map = \xs -> \f -> case xs of
    Nil _ -> 
      []

    Cons p -> 
      Cons (f (#2.1 p), map (#2.2 p) f) in map) : NatList -> (Nat -> Nat) -> NatList)
0.0120219999999 true false

