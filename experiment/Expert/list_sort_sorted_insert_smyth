[] -> [];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00771299999997 false false

[0] -> [0];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00818499999991 false false

[1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00841999999989 false false

[0, 0] -> [0];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00849500000004 false false

[1, 0] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0090580000001 false false

[1, 1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00874900000008 false false

[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> [0, 1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00925400000006 false false

[] -> [];
[0] -> [0];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00784199999998 false false

[] -> [];
[1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0081459999999 false false

[] -> [];
[0, 0] -> [0];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      #2.2 y1 in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.012825 false true

[0, 0] -> [0];
[1, 0] -> [0, 1];
=================================
NOSOL

[1, 0] -> [0, 1];
[1, 1] -> [1];
=================================
NOSOL

[] -> [];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.016545 true true

[0] -> [0];
[1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_sort_sorted_insert = \xs -> xs in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00840500000004 false false

[0, 0] -> [0];
[1, 1] -> [1];
=================================
NOSOL

[1] -> [1];
[1, 0] -> [0, 1];
=================================
NOSOL

[0] -> [0];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[0, 0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[0, 0] -> [0];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015797 true true

[] -> [];
[0] -> [0];
[1, 0] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013195 false true

[1] -> [1];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[1] -> [1];
[0, 0] -> [0];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[1] -> [1];
[1, 0] -> [0, 1];
[1, 1] -> [1];
=================================
NOSOL

[0] -> [0];
[0, 0] -> [0];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[0, 0] -> [0];
[1, 0] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013526 false true

[] -> [];
[1] -> [1];
[1, 0] -> [0, 1];
[1, 1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0133109999999 false true

[0] -> [0];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[1, 1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013745 false true

[] -> [];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0154829999999 true true

[] -> [];
[0, 0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015005 true true

[] -> [];
[0] -> [0];
[0, 0] -> [0];
[1, 1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      [#2.1 y1] in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0142960000001 false true

[0] -> [0];
[0, 0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
=================================
NOSOL

[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
=================================
NOSOL

[] -> [];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.013027 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0133249999999 false true

[] -> [];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0136729999999 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015351 true true

[0] -> [0];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[1] -> [1];
[0, 0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0158799999999 true true

[] -> [];
[1] -> [1];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0136090000001 true true

[] -> [];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0137689999999 true true

[] -> [];
[0] -> [0];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.015983 true true

[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      insert (#2.2 y1) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0138529999999 false true

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014191 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0164890000001 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014019 true true

[] -> [];
[0] -> [0];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014283 true true

[] -> [];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0144310000001 true true

[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[0, 0] -> [0];
[1, 0] -> [0, 1];
[1, 1] -> [1];
[0, 1, 1] -> [0, 1];
=================================
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\insert -> (\list_sort_sorted_insert -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_sort_sorted_insert = \xs -> case xs of
    Nil y1 -> 
      xs

    Cons y1 -> 
      insert (list_sort_sorted_insert (#2.2 y1)) (#2.1 y1) in list_sort_sorted_insert) : NatList -> NatList))
  ((let insert = \xs -> \n -> case xs of
    Nil _ -> 
      [n]

    Cons p -> 
      case compare n (#2.1 p) of
        LT _ -> 
          Cons (n, Cons (#2.1 p, #2.2 p))

        EQ _ -> 
          xs

        GT _ -> 
          Cons (#2.1 p, insert (#2.2 p) n) in insert) : NatList -> Nat -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.014727 true true

