[] -> [];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00289100000009 false false

[0] -> [0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00314099999991 false false

[1] -> [1];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00322800000004 false false

[0,0] -> [0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00317399999994 false false

[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00349000000006 false false

[2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00339899999994 false false

[2,2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00344399999994 false false

[0,1,1] -> [0,1];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [0, 1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00329899999997 false false

[2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 1, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00353799999993 false false

[2,2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> [2, 1, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00344399999994 false false

[2,0] -> [2,0];
[0,1,1] -> [0,1];
=================================
NOSOL

[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
=================================
NOSOL

[1,1] -> [1];
[0,1,1] -> [0,1];
=================================
NOSOL

[1,0,0] -> [1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[0] -> [0];
[1,1] -> [1];
=================================
NOSOL

[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[0] -> [0];
[2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00324500000011 false false

[0] -> [0];
[0,1,1] -> [0,1];
=================================
NOSOL

[0] -> [0];
[2,1,0,0] -> [2,1,0];
=================================
NOSOL

[] -> [];
[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00524500000006 false false

[] -> [];
[0] -> [0];
[1] -> [1];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ((let list_compress = \xs -> xs in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.00294600000007 false false

[2,0] -> [2,0];
[0,1,1] -> [0,1];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
=================================
NOSOL

[] -> [];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
=================================
NOSOL

[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0,1,1] -> [0,1];
=================================
NOSOL

[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
=================================
NOSOL

[1,1] -> [1];
[2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[1] -> [1];
[1,1] -> [1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              [2, 1, 0]

            Cons y3 -> 
              #2.2 y3

        EQ y2 -> 
          Cons
            ( 0
            , case #2.2 y1 of
                Nil y3 -> 
                  Cons (2, xs)

                Cons y3 -> 
                  #2.2 y3
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              [2, 1, 0]

            Cons y3 -> 
              #2.2 y3

        EQ y2 -> 
          Cons
            ( 0
            , case #2.2 y1 of
                Nil y3 -> 
                  Cons (2, xs)

                Cons y3 -> 
                  #2.2 y3
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.585325 false false

[] -> [];
[1,1] -> [1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[1] -> [1];
[2,0] -> [2,0];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[0,0] -> [0];
[1,1] -> [1];
[2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          case list_compress (#2.2 y1) of
            Nil y3 -> 
              #2.2 y1

            Cons y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

        EQ y2 -> 
          #2.2 y1 in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.106243 false false

[0,0] -> [0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
=================================
NOSOL

[0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[1,0,0] -> [1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.03991 false false

[] -> [];
[0,0] -> [0];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          case compare y2 0 of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1, y2, 0]

            EQ y3 -> 
              Cons (1, list_compress (#2.2 y1)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.1 y1 of
        Z y2 -> 
          [0]

        S y2 -> 
          case compare y2 0 of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1, y2, 0]

            EQ y3 -> 
              Cons (1, list_compress (#2.2 y1)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.190367 false false

[] -> [];
[1] -> [1];
[0,1,1] -> [0,1];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              ??

            EQ y3 -> 
              [#2.1 y1, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              ??

            EQ y3 -> 
              [#2.1 y1, 0] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
2.382863 false false

[] -> [];
[1] -> [1];
[0,0] -> [0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.018828 false false

[] -> [];
[1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[1,1] -> [1];
[2,0] -> [2,0];
[2,2,1,0,0] -> [2,1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[0,0] -> [0];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.0192159999999 false false

[0] -> [0];
[0,0] -> [0];
[2,0] -> [2,0];
[2,2,1,0,0] -> [2,1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
=================================
NOSOL

[0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
=================================
STACKOVERFLOW

[0] -> [0];
[1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            (case list_compress (#2.2 y1) of
              Nil y3 -> 
                (1, [])

              Cons y3 -> 
                (2, #2.2 y3))

        EQ y2 -> 
          Cons
            ( 0
            , Cons
                ( case #2.2 y1 of
                    Nil y3 -> 
                      0

                    Cons y3 -> 
                      1
                , case list_compress (#2.2 y1) of
                    Nil y3 -> 
                      []

                    Cons y3 -> 
                      #2.2 y3
                )
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          Cons
            (case list_compress (#2.2 y1) of
              Nil y3 -> 
                (1, [])

              Cons y3 -> 
                (2, #2.2 y3))

        EQ y2 -> 
          Cons
            ( 0
            , Cons
                ( case #2.2 y1 of
                    Nil y3 -> 
                      0

                    Cons y3 -> 
                      1
                , case list_compress (#2.2 y1) of
                    Nil y3 -> 
                      []

                    Cons y3 -> 
                      #2.2 y3
                )
            ) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.650659 false false

[] -> [];
[1] -> [1];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.286792 false false

[] -> [];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          xs

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
17.403703 false false

[0,0] -> [0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[1,1] -> [1];
[2,0] -> [2,0];
[2,1,0,0] -> [2,1,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          case compare (#2.1 y1) (Z y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              [#2.1 y1]

            EQ y3 -> 
              [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons
                ( #2.1 y1
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              [#2.1 y1] in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.826383 false false

[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[1] -> [1];
[0,0] -> [0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[1] -> [1];
[1,1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, #2.2 y2) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.866542 false false

[1] -> [1];
[0,0] -> [0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[0,0] -> [0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.447962 true true

[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.792405 false false

[] -> [];
[0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          [#2.1 y1, 0]

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              [0]

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case compare (#2.1 y1) 0 of
        LT y2 -> 
          ??

        GT y2 -> 
          [#2.1 y1, 0]

        EQ y2 -> 
          case #2.2 y1 of
            Nil y3 -> 
              Cons (0, list_compress (#2.2 y1))

            Cons y3 -> 
              Cons (0, #2.2 y3) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
0.738545 false false

[] -> [];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
None
[1] -> [1];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
None
[] -> [];
[0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
7.216965 false false

[] -> [];
[0] -> [0];
[1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              [2, 0]

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              [2, 0]

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
3.552344 false false

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [#2.1 y1]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
4.429809 false false

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              ??

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
5.238183 false false

[] -> [];
[0] -> [0];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          [0]

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (0, #2.2 y2)

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y2)) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.625127 false false

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
=================================
None
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
9.522174 false false

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
NOSOL

[] -> [];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
11.970782 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
None
[] -> [];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              [0, #2.1 y2]

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
18.721915 false false

[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
17.827197 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
45.620701 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
24.816155 true true

[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons
                ( 2
                , Cons (#2.1 y2, list_compress (#2.2 y2))
                )

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
20.660047 false false

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
NOSOL

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
54.145525 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
[] -> [];
[0] -> [0];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
(\compare -> (\list_compress -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> (\_ -> ()) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ())) ({ASSERTION} : ()))
  ((let list_compress = \xs -> case xs of
    Nil y1 -> 
      []

    Cons y1 -> 
      case #2.2 y1 of
        Nil y2 -> 
          Cons
            (case compare (#2.1 y1) (Z y2) of
              LT y3 -> 
                ??

              GT y3 -> 
                (#2.1 y1, [])

              EQ y3 -> 
                (0, []))

        Cons y2 -> 
          case compare (#2.1 y1) (#2.1 y2) of
            LT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            GT y3 -> 
              Cons (#2.1 y1, list_compress (#2.2 y1))

            EQ y3 -> 
              list_compress (#2.2 y1) in list_compress) : NatList -> NatList))
  ((let compare = \n1 -> \n2 -> case n1 of
    Z _ -> 
      case n2 of
        Z _ -> 
          EQ

        S _ -> 
          LT

    S m1 -> 
      case n2 of
        Z _ -> 
          GT

        S m2 -> 
          compare m1 m2 in compare) : Nat -> Nat -> Cmp)
45.956549 true true

[] -> [];
[0] -> [0];
[1] -> [1];
[0,0] -> [0];
[1,1] -> [1];
[2,0] -> [2,0];
[1,0,0] -> [1,0];
[0,1,1] -> [0,1];
[2,1,0,0] -> [2,1,0];
[2,2,1,0,0] -> [2,1,0];
[2,2,0] -> [2,0];
[2,2,2,0] -> [2,0];
[1,2,2,2,0] -> [1,2,0];
=================================
None
